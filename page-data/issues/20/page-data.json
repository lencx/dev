{"componentChunkName":"component---src-templates-issues-tsx","path":"/issues/20","result":{"data":{"site":{"siteMetadata":{"repo":"https://github.com/lencx/dev"}},"issuesJson":{"id":"af6f34d3-2097-52d2-9940-5e52bdef6956","title":"JavaScript for impatient programmers (ES2021 edition)","number":20,"bodyHTML":"<blockquote>\n<p dir=\"auto\">读书笔记: 创作不易，推荐购买作者正版书籍，<a href=\"https://exploringjs.com/impatient-js/\" rel=\"nofollow\">Buy the book</a></p>\n</blockquote>\n<h2 dir=\"auto\"><a href=\"https://exploringjs.com/impatient-js/toc.html\" rel=\"nofollow\">目录 (Table of contents)</a></h2>\n<details>\n<summary>I BACKGROUND</summary>\n<ol dir=\"auto\">\n<li>Before you buy the book</li>\n<li>FAQ: book and supplementary material</li>\n<li><a href=\"https://github.com/lencx/z/discussions/42#discussioncomment-924178\">History and evolution of JavaScript</a></li>\n<li>New JavaScript features</li>\n<li><a href=\"https://github.com/lencx/z/discussions/42#discussioncomment-932038\">FAQ: JavaScript</a></li>\n</ol>\n</details>\n<details>\n<summary>II FIRST STEPS</summary>\n<ol start=\"6\" dir=\"auto\">\n<li><a href=\"https://github.com/lencx/z/discussions/42#discussioncomment-932104\">Using JavaScript: the big picture</a></li>\n<li><a href=\"https://github.com/lencx/z/discussions/42#discussioncomment-942662\">Syntax</a></li>\n<li>Consoles: interactive JavaScript command lines</li>\n<li>Assertion API</li>\n<li>Getting started with quizzes and exercises</li>\n</ol>\n</details>\n<details>\n<summary>III VARIABLES AND VALUES</summary>\n<ol start=\"11\" dir=\"auto\">\n<li>Variables and assignment</li>\n<li>Values</li>\n<li>Operators</li>\n</ol>\n</details>\n<details>\n<summary>IV PRIMITIVE VALUES</summary>\n<ol start=\"14\" dir=\"auto\">\n<li>The non-values <code class=\"notranslate\">undefined</code> and <code class=\"notranslate\">null</code></li>\n<li>Booleans</li>\n<li>Numbers</li>\n<li>Math</li>\n<li>Bigints – arbitrary-precision integers [ES2020] (advanced)</li>\n<li>Unicode – a brief introduction (advanced)</li>\n<li>Strings</li>\n<li>Using template literals and tagged templates</li>\n<li>Symbols</li>\n</ol>\n</details>\n<details>\n<summary>V CONTROL FLOW AND DATA FLOW</summary>\n<ol start=\"23\" dir=\"auto\">\n<li>Control flow statements</li>\n<li>Exception handling</li>\n<li>Callable values</li>\n<li>Evaluating code dynamically: <code class=\"notranslate\">eval()</code>, <code class=\"notranslate\">new Function()</code> (advanced)</li>\n</ol>\n</details>\n<details>\n<summary>VI MODULARITY</summary>\n<ol start=\"27\" dir=\"auto\">\n<li>Modules</li>\n<li>Single objects</li>\n<li>Prototype chains and classes</li>\n</ol>\n</details>\n<details>\n<summary>VII COLLECTIONS</summary>\n<ol start=\"30\" dir=\"auto\">\n<li>Synchronous iteration</li>\n<li>Arrays (<code class=\"notranslate\">Array</code>)</li>\n<li>Typed Arrays: handling binary data (advanced)</li>\n<li>Maps (<code class=\"notranslate\">Map</code>)</li>\n<li>WeakMaps (<code class=\"notranslate\">WeakMap</code>) (advanced)</li>\n<li>Sets (<code class=\"notranslate\">Set</code>)</li>\n<li>WeakSets (<code class=\"notranslate\">WeakSet</code>) (advanced)</li>\n<li>Destructuring</li>\n<li>Synchronous generators (advanced)</li>\n</ol>\n</details>\n<details>\n<summary>VIII ASYNCHRONICITY</summary>\n<ol start=\"39\" dir=\"auto\">\n<li>Asynchronous programming in JavaScript</li>\n<li>Promises for asynchronous programming [ES6]</li>\n<li>Async functions</li>\n<li>Asynchronous iteration</li>\n</ol>\n</details>\n<details>\n<summary>IX MORE STANDARD LIBRARY</summary>\n<ol start=\"43\" dir=\"auto\">\n<li>Regular expressions (<code class=\"notranslate\">RegExp</code>)</li>\n<li>Dates (<code class=\"notranslate\">Date</code>)</li>\n<li>Creating and parsing JSON (<code class=\"notranslate\">JSON</code>)</li>\n</ol>\n</details>","updatedAt":"2022-06-11T15:59:18Z","upvoteCount":1,"author":{"login":"lencx","avatarUrl":"https://avatars.githubusercontent.com/u/16164244?u=77d1d01930d8e36105a49a6c474abf70eeee74b1&v=4","url":"https://github.com/lencx"},"category":{"isAnswerable":false,"name":"Web","emoji":":globe_with_meridians:"},"labels":{"edges":[{"node":{"name":"JavaScript","color":"f1e05a"}},{"node":{"name":"Book","color":"bfdadc"}}]},"comments":{"edges":[{"node":{"id":"MDE3OkRpc2N1c3Npb25Db21tZW50OTI0MTc4","bodyHTML":"<h2 dir=\"auto\">JavaScript 的历史和演变</h2>\n<p dir=\"auto\"><code class=\"notranslate\">JavaScript</code> 是由 <a href=\"https://en.wikipedia.org/wiki/Brendan_Eich\" rel=\"nofollow\">Brendan Eich</a> 于 1995 年 5 月在 10 天内创建的。 Eich 在 Netscape 工作并为他们的 Web 浏览器 Netscape Navigator 实现了 JavaScript</p>\n<h3 dir=\"auto\">JS 曾多次更名</h3>\n<ol dir=\"auto\">\n<li>代号是 <code class=\"notranslate\">Mocha</code></li>\n<li><code class=\"notranslate\">LiveScript</code> (1995.09) - Netscape Navigator 2.0 betas</li>\n<li><code class=\"notranslate\">JavaScript</code> (1995.12) - Netscape Navigator 2.0 beta 3</li>\n</ol>\n<h3 dir=\"auto\">标准化 JavaScript</h3>\n<blockquote>\n<p dir=\"auto\">术语 <code class=\"notranslate\">JavaScript</code> 指的是语言及其实现。 术语 <code class=\"notranslate\">ECMAScript</code> 是指语言标准和语言版本。<code class=\"notranslate\">ECMAScript 6</code> 是该语言的一个版本（第 6 版）</p>\n</blockquote>\n<p dir=\"auto\">JavaScript 有两个标准：</p>\n<ul dir=\"auto\">\n<li>ECMA-262 由 Ecma International 主办。它是首要标准。</li>\n<li>ISO/IEC 16262 由国际标准化组织 (ISO) 和国际电工委员会 (IEC) 主办。这是二级标准。</li>\n</ul>\n<h3 dir=\"auto\">Ecma 技术委员会 39 (TC39)</h3>\n<p dir=\"auto\">TC39 是发展 JavaScript 的委员会。其成员包括以下公司：<code class=\"notranslate\">Adobe</code>、<code class=\"notranslate\">Apple</code>、<code class=\"notranslate\">Facebook</code>、<code class=\"notranslate\">Google</code>、<code class=\"notranslate\">Microsoft</code>、<code class=\"notranslate\">Mozilla</code>、<code class=\"notranslate\">Opera</code>、<code class=\"notranslate\">Twitter</code> 等。也就是说，通常是激烈竞争对手的公司正在为语言的利益而合作。 每两个月，TC39 都会召开会议，成员指定的代表和受邀的专家参加。这些会议的记录在 <a href=\"https://github.com/tc39/notes\">GitHub 存储库</a> 中公开。</p>\n<h3 dir=\"auto\">TC39 提案流程</h3>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/16164244/123602441-510e0a00-d82b-11eb-8d1f-ddf4fc5d2c74.png\"><img width=\"420\" src=\"https://user-images.githubusercontent.com/16164244/123602441-510e0a00-d82b-11eb-8d1f-ddf4fc5d2c74.png\" alt=\"stage\" style=\"max-width: 100%;\"></a></p>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">Stage 0 (Strawperson)</code> - 没有作为正式提案提交的任何讨论、想法，或是修改或新增提案都是此阶段</li>\n<li><code class=\"notranslate\">Stage 1 (Proposal)</code> - 补充理由、描述解决方案、用法的说明范例、提出潜在的 challenges、讨论关键算法、abstractions 和 semantics，在这个阶段就会有 polyfill 或 demo</li>\n<li><code class=\"notranslate\">Stage 2 (Draft)</code> - 用 spec 的方式来精确描述 syntax 和 semantics，此阶段会有实验性的实作</li>\n<li><code class=\"notranslate\">Stage 3 (Candidate)</code> - 已完成 spec 的内容，需要大量使用者的使用和反馈才能进入 stage 4，但实作已经符合 spec 了</li>\n<li><code class=\"notranslate\">Stage 4 (Finished)</code> - 已准备将提案加入正式的 ECMAScript 标准中，但需两个相容的实作 (浏览器或 Node.js 等环境) 通过验收测试。此阶段的实作已稳定</li>\n</ul>\n<p dir=\"auto\">所以 <code class=\"notranslate\">Stage 0</code> 是想法阶段，而 <code class=\"notranslate\">Stage 1</code> 至 <code class=\"notranslate\">Stage 3</code> 都是在进行审查和讨论，从 <code class=\"notranslate\">Stage 2</code> 开始会有接近正式 spec 的内容，最后的 <code class=\"notranslate\">Stage 4</code> 才是正式将提案纳入 spec 中。有些提案还没到 <code class=\"notranslate\">Stage 4</code> 就能在浏览器使用了，而且也有对应的 polyfill 可以使用。</p>\n<h4 dir=\"auto\">TC39 的提案详情可参阅</h4>\n<ul dir=\"auto\">\n<li><a href=\"https://tc39.es/process-document\" rel=\"nofollow\">The TC39 Process</a></li>\n<li><a href=\"https://github.com/tc39/proposals\">ECMAScript proposals</a></li>\n<li><a href=\"https://github.com/tc39/proposals/blob/master/finished-proposals.md\">Finished Proposals</a></li>\n</ul>\n<h3 dir=\"auto\">为什么我们不能通过删除怪癖和过时的功能来清理 JavaScript？</h3>\n<p dir=\"auto\">偶尔出现的一个想法是通过删除旧功能和怪癖来清理 JavaScript。虽然这个想法的吸引力是显而易见的，但它也有明显的缺点。 假设我们创建了一个不向后兼容的新版本的 JavaScript 并修复了它的所有缺陷。结果，我们会遇到以下问题： JavaScript 引擎变得臃肿：它们需要同时支持新旧版本。 IDE 和构建工具等工具也是如此。 程序员需要了解并不断意识到版本之间的差异。 您可以将所有现有代码库迁移到新版本（这可能需要大量工作）。或者你可以混合版本，重构变得更加困难，因为你不能在不更改的情况下在版本之间移动代码。 你必须以某种方式指定每段代码——无论是文件还是嵌入网页的代码——它是用什么版本编写的。每个可以想象的解决方案都有优点和缺点。例如，严格模式（strict mode）是 ES5 的一个稍微干净的版本。它之所以不受欢迎的原因之一是：通过文件或函数开头的指令选择加入是一件很麻烦的事情。</p>\n<h4 dir=\"auto\">解决方法是什么呢？</h4>\n<blockquote>\n<p dir=\"auto\">为 ES6 选择的方法称为 “One JavaScript”</p>\n</blockquote>\n<ul dir=\"auto\">\n<li>新版本总是完全向后兼容的（但偶尔可能会有轻微的、几乎不明显的清理）。</li>\n<li>旧功能不会被删除或修复。相反，引入了它们的更好版本。例如通过 <code class=\"notranslate\">let</code> 声明变量——这是 <code class=\"notranslate\">var</code> 的改进版本。</li>\n<li>如果语言的某些方面发生变化，则会在新的句法结构中完成。也就是说，您隐式地选择加入。例如，<code class=\"notranslate\">yield</code> 只是生成器中的一个关键字（在 ES6 中引入）。并且模块和类（均在 ES6 中引入）中的所有代码都隐式处于严格模式。</li>\n</ul>","author":{"login":"lencx","avatarUrl":"https://avatars.githubusercontent.com/u/16164244?u=77d1d01930d8e36105a49a6c474abf70eeee74b1&v=4","url":"https://github.com/lencx"},"replies":{"edges":[]}}},{"node":{"id":"MDE3OkRpc2N1c3Npb25Db21tZW50OTMyMDM4","bodyHTML":"<h2 dir=\"auto\">常见问题解答：JavaScript</h2>\n<h3 dir=\"auto\">JavaScript 参考资料</h3>\n<ul dir=\"auto\">\n<li><a href=\"https://developer.mozilla.org/en-US/\" rel=\"nofollow\">MDN Web Docs</a> - 涵盖各种 Web 技术，例如 CSS、HTML、JavaScript 等</li>\n<li><a href=\"https://nodejs.org/en/docs/\" rel=\"nofollow\">Node.js Docs</a> - Node.js API 文档</li>\n<li><a href=\"https://exploringjs.com/\" rel=\"nofollow\">Exploring JS</a> - 其他关于 JavaScript 的书比这本书更详细，可以免费在线阅读</li>\n</ul>\n<h3 dir=\"auto\">JavaScript 功能支持表</h3>\n<ul dir=\"auto\">\n<li><a href=\"http://kangax.github.io/compat-table/es5/\" rel=\"nofollow\">ECMAScript compatibility tables for various engines</a> (by <a href=\"https://twitter.com/kangax\" rel=\"nofollow\">kangax</a> &amp; <a href=\"https://twitter.com/webbedspace\" rel=\"nofollow\">webbedspace</a> &amp; <a href=\"https://github.com/zloirock\">zloirock</a>)</li>\n<li><a href=\"https://node.green/\" rel=\"nofollow\">Node.js compatibility tables</a> (by <a href=\"https://twitter.com/williamkapke\" rel=\"nofollow\">William Kapke</a>)</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript\" rel=\"nofollow\">MDN web docs</a> - 每个功能都有描述相关 ECMAScript 版本和浏览器支持的表格</li>\n<li><a href=\"https://caniuse.com/\" rel=\"nofollow\">Can I use... Support tables for HTML5, CSS3, etc</a> - 提供了最新的浏览器支持表，以支持桌面和移动 Web 浏览器上的前端 Web 技术。</li>\n</ul>\n<h3 dir=\"auto\">为什么 JavaScript 经常无声无息地失败？</h3>\n<p dir=\"auto\">例如</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// 如果运算符的操作数没有合适的类型，它们会根据需要进行转换\n&gt; '3' * '5'\n15\n\n// 如果计算失败，会得到一个错误值，而不是异常\n&gt; 1 / 0\nInfinity\"><pre><span class=\"pl-c\">// 如果运算符的操作数没有合适的类型，它们会根据需要进行转换</span>\n<span class=\"pl-c1\">&gt;</span> <span class=\"pl-s\">'3'</span> <span class=\"pl-c1\">*</span> <span class=\"pl-s\">'5'</span>\n<span class=\"pl-c1\">15</span>\n\n<span class=\"pl-c\">// 如果计算失败，会得到一个错误值，而不是异常</span>\n<span class=\"pl-c1\">&gt;</span> <span class=\"pl-c1\">1</span> <span class=\"pl-c1\">/</span> <span class=\"pl-c1\">0</span>\n<span class=\"pl-v\">Infinity</span></pre></div>\n<p dir=\"auto\">静默失败的原因是历史性的：JavaScript 直到 ECMAScript 3 才出现异常。从那时起，它的设计者就试图避免静默失败。</p>\n<h3 dir=\"auto\">如何快速尝试一段 JavaScript 代码？</h3>\n<blockquote>\n<p dir=\"auto\">控制台通常以非严格模式运行</p>\n</blockquote>\n<ul dir=\"auto\">\n<li>浏览器控制台（Browser consoles）- 交互式命令行，您可以通过 <code class=\"notranslate\">console.log()</code> 将文本输出到控制台，并且您可以在控制台运行代码段。 打开控制台的方式因浏览器而异。\n<ul dir=\"auto\">\n<li><a href=\"https://developer.apple.com/safari/tools/\" rel=\"nofollow\">Apple Safari</a></li>\n<li><a href=\"https://developer.chrome.com/docs/devtools/console/\" rel=\"nofollow\">Google Chrome</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/archive/microsoft-edge/legacy/developer/\" rel=\"nofollow\">Microsoft Edge</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Tools/Web_Console/UI_Tour\" rel=\"nofollow\">Mozilla Firefox</a></li>\n</ul>\n</li>\n<li>The Node.js REPL - REPL 代表 <code class=\"notranslate\">read-eval-print</code> 循环，基本上意味着命令行。 要使用它，您必须首先通过命令 <code class=\"notranslate\">node</code> 从操作系统命令行启动 Node.js，然后与它的交互。<br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/16164244/123943240-8acb4600-d9ce-11eb-839c-2b88142f32d0.png\"><img width=\"320\" src=\"https://user-images.githubusercontent.com/16164244/123943240-8acb4600-d9ce-11eb-839c-2b88142f32d0.png\" alt=\"node bash\" style=\"max-width: 100%;\"></a></li>\n<li><a href=\"https://babeljs.io/repl\" rel=\"nofollow\">Babel’s REPL</a> - 在 Web 浏览器中试验 JavaScript</li>\n</ul>\n<h4 dir=\"auto\">打印带有替换的字符串</h4>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">%s</code> - 打印字符串</li>\n<li><code class=\"notranslate\">%o</code> - 打印字符串，数字，布尔值，对象等</li>\n<li><code class=\"notranslate\">%d</code> - 打印整数（小数位会被省略）</li>\n</ul>","author":{"login":"lencx","avatarUrl":"https://avatars.githubusercontent.com/u/16164244?u=77d1d01930d8e36105a49a6c474abf70eeee74b1&v=4","url":"https://github.com/lencx"},"replies":{"edges":[{"node":{"id":"MDE3OkRpc2N1c3Npb25Db21tZW50OTM2NDE5","bodyHTML":"<p dir=\"auto\">还有一些常见的静默失败，比如<br>\n<a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/42690790/123747596-b9212680-d8e5-11eb-9ab3-d88bff23a769.png\"><img src=\"https://user-images.githubusercontent.com/42690790/123747596-b9212680-d8e5-11eb-9ab3-d88bff23a769.png\" alt=\"image\" style=\"max-width: 100%;\"></a></p>","author":{"login":"YufeeXing","avatarUrl":"https://avatars.githubusercontent.com/u/42690790?u=553a26fedbe385e781ce78948202034495e314c3&v=4","url":"https://github.com/YufeeXing"}}}]}}},{"node":{"id":"MDE3OkRpc2N1c3Npb25Db21tZW50OTMyMTA0","bodyHTML":"<h2 dir=\"auto\">使用 JavaScript: 大局</h2>\n<p dir=\"auto\">使用 JavaScript 的两个平台</p>\n<ul dir=\"auto\">\n<li>Web browser</li>\n<li>Node.js\n<ul dir=\"auto\">\n<li>编写服务器端（server-side）软件</li>\n<li>编写 <a href=\"https://en.wikipedia.org/wiki/Command-line_interface\" rel=\"nofollow\">命令行（command line）</a> 软件，例如 <a href=\"https://en.wikipedia.org/wiki/Unix_shell\" rel=\"nofollow\">Unix shell</a>、<a href=\"https://docs.microsoft.com/en-us/powershell/\" rel=\"nofollow\">Windows PowerShell</a> 等。许多与 JavaScript 相关的工具都基于 Node.js</li>\n<li>Node 的软件注册表 <a href=\"https://www.npmjs.com/\" rel=\"nofollow\">npm</a> 已经成为安装工具（例如编译器和构建工具）和库的主要方式 —— 甚至对于客户端开发也是如此</li>\n</ul>\n</li>\n</ul>\n<h3 dir=\"auto\">浏览器和 Node.js 的结构</h3>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/16164244/123758335-664d6c00-d8f1-11eb-8c19-35a67a8952ab.png\"><img src=\"https://user-images.githubusercontent.com/16164244/123758335-664d6c00-d8f1-11eb-8c19-35a67a8952ab.png\" alt=\"image\" style=\"max-width: 100%;\"></a><br>\n“standard library” 和 “platform API” 托管于 JavaScript 引擎和特定于平台的 “core” 的基础层之上</p>\n<h3 dir=\"auto\">扩展阅读</h3>\n<ul dir=\"auto\">\n<li><a href=\"https://nodejs.dev/learn/differences-between-nodejs-and-the-browser\" rel=\"nofollow\">Differences between Node.js and the Browser</a></li>\n<li><a href=\"https://www.geeksforgeeks.org/how-to-share-code-between-node-js-and-the-browser/\" rel=\"nofollow\">How to share code between Node.js and the browser?</a></li>\n</ul>","author":{"login":"lencx","avatarUrl":"https://avatars.githubusercontent.com/u/16164244?u=77d1d01930d8e36105a49a6c474abf70eeee74b1&v=4","url":"https://github.com/lencx"},"replies":{"edges":[]}}},{"node":{"id":"MDE3OkRpc2N1c3Npb25Db21tZW50OTQyNjYy","bodyHTML":"<h2 dir=\"auto\">JavaScript 语法概述</h2>\n<h3 dir=\"auto\">基本结构（Basic constructs）</h3>\n<h4 dir=\"auto\">注释（Comments）</h4>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"// 单行注释 single-line comment\n\n/*\n多行注释\nComment withmultiple lines\n*/\"><pre><span class=\"pl-c\">// 单行注释 single-line comment</span>\n\n<span class=\"pl-c\">/*</span>\n<span class=\"pl-c\">多行注释</span>\n<span class=\"pl-c\">Comment withmultiple lines</span>\n<span class=\"pl-c\">*/</span></pre></div>\n<h4 dir=\"auto\">原始值（Primitive (atomic) values）</h4>\n<blockquote>\n<p dir=\"auto\"><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Primitive\" rel=\"nofollow\">[MDN] Primitive</a></p>\n</blockquote>\n<ul dir=\"auto\">\n<li>Booleans：<code class=\"notranslate\">true</code> <code class=\"notranslate\">false</code></li>\n<li>Numbers：基本数字类型用于浮点数（双精度数）和整数。例如：<code class=\"notranslate\">3.1415</code> <code class=\"notranslate\">-123</code></li>\n<li>Bigints：基本数字类型只能正确表示 53 位加号范围内的整数。 Bigint 的大小可以任意增长。例如：<code class=\"notranslate\">17n</code> <code class=\"notranslate\">-20n</code></li>\n<li>Strings：无字符类型，使用字符串来表示\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"'abc'\n&quot;abc&quot;\n`String with interpolated values: ${256} and ${true}`\"><pre><span class=\"pl-s\">'abc'</span>\n<span class=\"pl-s\">\"abc\"</span>\n<span class=\"pl-s\">`String with interpolated values: <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-c1\">256</span><span class=\"pl-kos\">}</span></span> and <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-c1\">true</span><span class=\"pl-kos\">}</span></span>`</span></pre></div>\n</li>\n</ul>\n<h4 dir=\"auto\">断言（Assertions）</h4>\n<p dir=\"auto\">断言描述了计算结果的预期，如果这些预期不正确，则抛出异常。</p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/16164244/126191830-a4ba9ae1-8168-4a7d-bfd3-0aace28c71ed.png\"><img width=\"480\" src=\"https://user-images.githubusercontent.com/16164244/126191830-a4ba9ae1-8168-4a7d-bfd3-0aace28c71ed.png\" alt=\"assert.equal\" style=\"max-width: 100%;\"></a></p>\n<h4 dir=\"auto\">箭头函数（Arrow function expressions）</h4>\n<p dir=\"auto\">箭头函数的主体是一个代码块（code block）或表达式（expression）</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"// 代码块\n(a, b) =&gt; { return a + b }\n\n// 表达式\n(a, b) =&gt; a + b\"><pre><span class=\"pl-c\">// 代码块</span>\n<span class=\"pl-kos\">(</span><span class=\"pl-s1\">a</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">b</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span> <span class=\"pl-k\">return</span> <span class=\"pl-s1\">a</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s1\">b</span> <span class=\"pl-kos\">}</span>\n\n<span class=\"pl-c\">// 表达式</span>\n<span class=\"pl-kos\">(</span><span class=\"pl-s1\">a</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">b</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=</span><span class=\"pl-c1\">&gt;</span> <span class=\"pl-s1\">a</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s1\">b</span></pre></div>\n<h4 dir=\"auto\">模块（Modules）</h4>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"// file-tools.mjs\nexport function isTextFilePath(filePath) {\n  return filePath.endsWith('.txt');\n}\"><pre><span class=\"pl-c\">// file-tools.mjs</span>\n<span class=\"pl-k\">export</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">isTextFilePath</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">filePath</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">filePath</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">endsWith</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'.txt'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"// main.mjs\n// 将整个模块导入为命名空间对象 `path`\nimport * as path from 'path';\n// 导出单个模块\nimport { isTextFilePath } from './file-tools.mjs';\"><pre><span class=\"pl-c\">// main.mjs</span>\n<span class=\"pl-c\">// 将整个模块导入为命名空间对象 `path`</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-c1\">*</span> <span class=\"pl-k\">as</span> <span class=\"pl-s1\">path</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">'path'</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-c\">// 导出单个模块</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-kos\">{</span> <span class=\"pl-s1\">isTextFilePath</span> <span class=\"pl-kos\">}</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">'./file-tools.mjs'</span><span class=\"pl-kos\">;</span></pre></div>\n<h4 dir=\"auto\">异常处理（Exception handling）</h4>\n<ul dir=\"auto\">\n<li>try 语句包含了由一个或者多个语句组成的 try 块, 和至少一个 catch 块或者一个 finally 块的其中一个，或者两个兼有，下面是三种形式的 try 声明：\n<ul dir=\"auto\">\n<li>try...catch</li>\n<li>try...finally</li>\n<li>try...catch...finally</li>\n</ul>\n</li>\n<li>finally_statements: 在try语句块之后执行的语句块。无论是否有异常抛出或捕获这些语句都将执行。</li>\n<li>我们可以抛出任何值，但只有 <code class=\"notranslate\">Error</code> 及其子类支持诸如堆栈跟踪之类的功能。</li>\n</ul>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"try {\n  try {\n    throw new Error(&quot;oops&quot;);\n  }\n  catch (ex) {\n    console.error(&quot;inner&quot;, ex.message);\n    throw ex;\n  }\n  finally {\n    console.log(&quot;finally&quot;);\n  }\n}\ncatch (ex) {\n  console.error(&quot;outer&quot;, ex.message);\n}\n\n// 输出:\n// inner oops\n// finally\n// outer oops\"><pre><span class=\"pl-k\">try</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">try</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Error</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"oops\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n  <span class=\"pl-k\">catch</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">ex</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">error</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"inner\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">ex</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">message</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-k\">throw</span> <span class=\"pl-s1\">ex</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n  <span class=\"pl-k\">finally</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"finally\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-k\">catch</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">ex</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">error</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"outer\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">ex</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">message</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-c\">// 输出:</span>\n<span class=\"pl-c\">// inner oops</span>\n<span class=\"pl-c\">// finally</span>\n<span class=\"pl-c\">// outer oops</span></pre></div>\n<h4 dir=\"auto\">Casing styles</h4>\n<p dir=\"auto\">连接单词的常见大小写样式</p>\n<ul dir=\"auto\">\n<li>驼峰（Camel case）: threeConcatenatedWords</li>\n<li>蛇形（Underscore case (also called snake case)）: three_concatenated_words</li>\n<li>中划线（Dash case (also called kebab case)）: three-concatenated-words</li>\n</ul>\n<p dir=\"auto\">一般情况下，JavaScript 使用驼峰式大小写，常量除外。</p>\n<ul dir=\"auto\">\n<li>小写（Lowercase）：\n<ul dir=\"auto\">\n<li>函数、变量：myFunction</li>\n<li>方法：obj.myMethod</li>\n<li>CSS：\n<ul dir=\"auto\">\n<li>CSS 实体：special-class</li>\n<li>对应的 JavaScript 变量：specialClass</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>大写：\n<ul dir=\"auto\">\n<li>类（Classes）：MyClass</li>\n<li>常量（Constants）：MY_CONSTANT，常量也经常用驼峰写法：myConstant</li>\n</ul>\n</li>\n</ul>\n<p dir=\"auto\">如果参数的名称以下划线开头（或者是下划线），则表示未使用此参数</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"arr.map((_x, i) =&gt; i)\"><pre><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">map</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">_x</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">i</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">i</span><span class=\"pl-kos\">)</span></pre></div>\n<p dir=\"auto\">如果对象的属性名称以下划线开头，则该属性被认为是私有的</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"class ValueWrapper {\n  constructor(value) {\n    this._value = value;\n  }\n}\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-v\">ValueWrapper</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-en\">constructor</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">value</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">_value</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">value</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<hr>\n<ul dir=\"auto\">\n<li><a href=\"https://github.com/lencx/z/discussions/48\">js 中的语句 &amp; 表达式 &amp; 分号</a></li>\n<li><a href=\"https://nodejs.org/api/assert.html\" rel=\"nofollow\">[Node.js v16.5.0 documentation] Assert</a> - The <code class=\"notranslate\">assert</code> module provides a set of assertion functions for verifying invariants.</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/try...catch\" rel=\"nofollow\">[MDN] try...catch</a></li>\n</ul>","author":{"login":"lencx","avatarUrl":"https://avatars.githubusercontent.com/u/16164244?u=77d1d01930d8e36105a49a6c474abf70eeee74b1&v=4","url":"https://github.com/lencx"},"replies":{"edges":[]}}}]}}},"pageContext":{"number":20,"previous":{"title":"Awesome Terminal","number":48},"next":{"title":"Data Structure And Algorithms","number":42}}},"staticQueryHashes":["3993188973"]}