{"componentChunkName":"component---src-templates-issues-tsx","path":"/issues/25","result":{"data":{"site":{"siteMetadata":{"repo":"https://github.com/lencx/dev"}},"issuesJson":{"id":"4e9ed0f7-e975-57d7-addd-09a035607f9e","title":"this 关键字详解","number":25,"bodyHTML":"<h2 dir=\"auto\">含义(Meaning)</h2>\n<blockquote>\n<p dir=\"auto\">在构造函数内部需要使用到<code class=\"notranslate\">this</code>关键字。那么，<code class=\"notranslate\">this</code>关键字到底是什么意思？<br>\n<code class=\"notranslate\">this</code>指向当前的运行环境：在JavaScript中，所有的函数都是在某个运行环境中运行，<code class=\"notranslate\">this</code>就是这个运行环境。对JavaScript语言来说，一切皆对象，运行的环境也是对象，所以可以理解为所有的函数总是在某个对象之中运行，<code class=\"notranslate\">this</code>就指向这个对象。<em>但是JavaScript支持运行环境动态切换，也就是说，this的指向是动态的，没有办法可以事先确定到底指向哪个对象</em></p>\n<p dir=\"auto\">例：有一个函数<code class=\"notranslate\">xOfVal</code>，同时充当<code class=\"notranslate\">a</code>对象和<code class=\"notranslate\">b</code>对象的<code class=\"notranslate\">say</code>方法，用于打印当前运行环境中<code class=\"notranslate\">x</code>变量的值。JavaScript允许函数<code class=\"notranslate\">xOfVal</code>的运行环境动态切换，即一会属于<code class=\"notranslate\">a</code>对象，一会属于<code class=\"notranslate\">b</code>对象，这就需要靠<code class=\"notranslate\">this</code>关键字来办到</p>\n</blockquote>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"function xOfVal() {console.log(this.x)}\nvar a = {x: 5}\nvar b = {x: 7}\na.say = xOfVal\nb.say = xOfVal\na.say() // 5\nb.say() // 7\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">xOfVal</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span><span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">x</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">}</span>\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">a</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span><span class=\"pl-c1\">x</span>: <span class=\"pl-c1\">5</span><span class=\"pl-kos\">}</span>\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">b</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span><span class=\"pl-c1\">x</span>: <span class=\"pl-c1\">7</span><span class=\"pl-kos\">}</span>\n<span class=\"pl-s1\">a</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">say</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">xOfVal</span>\n<span class=\"pl-s1\">b</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">say</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">xOfVal</span>\n<span class=\"pl-s1\">a</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">say</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// 5</span>\n<span class=\"pl-s1\">b</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">say</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// 7</span></pre></div>\n<p dir=\"auto\">当<code class=\"notranslate\">xOfVal</code>属于对象<code class=\"notranslate\">a</code>时，<code class=\"notranslate\">this</code>指向<code class=\"notranslate\">a</code>；当<code class=\"notranslate\">xOfVal</code>属于对象<code class=\"notranslate\">b</code>时， <code class=\"notranslate\">this</code>指向<code class=\"notranslate\">b</code>，<em>因此打印出不同的值</em>。由于<code class=\"notranslate\">this</code>的指向是可变的，所以可以手动切换运行环境，以达到某种特定的目的。</p>\n<p dir=\"auto\"><em>结论</em>：<em><strong>如果一个函数在全局环境中运行，<code class=\"notranslate\">this</code>就是指向顶层对象(浏览器中为<code class=\"notranslate\">window</code>对象)；如果一个函数作为某个对象的方法运行，<code class=\"notranslate\">this</code>就是指向那个对象。 可以近似认为，<code class=\"notranslate\">this</code>事所有函数运行时的一个隐藏参数，决定了函数的运行环境。</strong></em></p>\n<h2 dir=\"auto\">使用场合(Using The Occasion)</h2>\n<h3 dir=\"auto\">全局环境(Global Context)</h3>\n<blockquote>\n<p dir=\"auto\">在全局环境中使用<code class=\"notranslate\">this</code>，它指的时顶层对象window。</p>\n</blockquote>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"console.log(this === window) // true\nfunction fn() {\n    console.log(this === window)\n}\nfn() // true\"><pre><span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span> <span class=\"pl-c1\">===</span> <span class=\"pl-smi\">window</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// true</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">fn</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span> <span class=\"pl-c1\">===</span> <span class=\"pl-smi\">window</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-en\">fn</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// true</span></pre></div>\n<p dir=\"auto\"><em>结论</em>： <em><strong><code class=\"notranslate\">this</code>不论是不是在函数内部，只要是在全局环境下运行，<code class=\"notranslate\">this</code>就是指向全局对象<code class=\"notranslate\">window</code></strong></em></p>\n<h3 dir=\"auto\">构造函数(Constructor)</h3>\n<blockquote>\n<p dir=\"auto\">在构造函数中使用<code class=\"notranslate\">this</code>，它指的是实例对象</p>\n</blockquote>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// 构造函数A\nvar A = function(x) {\n    // this指向实例对象\n    // 所以在构造函数内部定义`this.x`，就相当于定义实例对象有一个`x`属性\n    this.x = x\n}\n// `say`方法可以返回这个`x`属性\nA.prototype.say = function() {\n    return this.x\n}\nvar a = new A(3)\na.x // 3\na.say() // 3\"><pre><span class=\"pl-c\">// 构造函数A</span>\n<span class=\"pl-k\">var</span> <span class=\"pl-v\">A</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">x</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c\">// this指向实例对象</span>\n    <span class=\"pl-c\">// 所以在构造函数内部定义`this.x`，就相当于定义实例对象有一个`x`属性</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">x</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">x</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-c\">// `say`方法可以返回这个`x`属性</span>\n<span class=\"pl-v\">A</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">say</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">x</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">a</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">A</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">3</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-s1\">a</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">x</span> <span class=\"pl-c\">// 3</span>\n<span class=\"pl-s1\">a</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">say</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// 3</span></pre></div>\n<h3 dir=\"auto\">对象方法(Object Method)</h3>\n<ul dir=\"auto\">\n<li>当<code class=\"notranslate\">a</code>对象的方法被赋予<code class=\"notranslate\">b</code>对象，该方法就变成了普通函数。其中的<code class=\"notranslate\">this</code>就从指向<code class=\"notranslate\">a</code>对象变成指向<code class=\"notranslate\">b</code>对象。这就是<code class=\"notranslate\">this</code>取决于运行时所在的对象的含义。<em>需要特别小心。如果将某个对象的方法赋值给另一个对象，会改变<code class=\"notranslate\">this</code>的指向。</em></li>\n</ul>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"var a = {\n    // `prop`是`a`对象的属性\n    prop: 'hello',\n    // `f`是`a`对象的方法\n    f: function() {\n        return this.prop\n    }\n}\na.f() // hello\nvar b = new Object()\nb.prop = 'hello, lencx'\n// `f`是`a`对象的方法\nb.f = a.f\n// 如果在`b`对象上调用这个方法。`f`方法中的`this`就会指向`b`\n// 说明JavaScript函数的运行环境完全是动态绑定的，可以在运行时切换。\nb.f() // hello, lencx\"><pre><span class=\"pl-k\">var</span> <span class=\"pl-s1\">a</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c\">// `prop`是`a`对象的属性</span>\n    <span class=\"pl-c1\">prop</span>: <span class=\"pl-s\">'hello'</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-c\">// `f`是`a`对象的方法</span>\n    <span class=\"pl-en\">f</span>: <span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prop</span>\n    <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-s1\">a</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">f</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// hello</span>\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">b</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-s1\">b</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prop</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">'hello, lencx'</span>\n<span class=\"pl-c\">// `f`是`a`对象的方法</span>\n<span class=\"pl-s1\">b</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">f</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">a</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">f</span>\n<span class=\"pl-c\">// 如果在`b`对象上调用这个方法。`f`方法中的`this`就会指向`b`</span>\n<span class=\"pl-c\">// 说明JavaScript函数的运行环境完全是动态绑定的，可以在运行时切换。</span>\n<span class=\"pl-s1\">b</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">f</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// hello, lencx</span></pre></div>\n<ul dir=\"auto\">\n<li>如果不想改变<code class=\"notranslate\">this</code>的指向，可以将<code class=\"notranslate\">b.f</code>改写为</li>\n</ul>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"b.f = function() {\n    // `f`方法是在`a`对象下运行，所以`this`指向`a`\n    return a.f()\n}\nb.f() // hello\"><pre><span class=\"pl-s1\">b</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">f</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c\">// `f`方法是在`a`对象下运行，所以`this`指向`a`</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-s1\">a</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">f</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-s1\">b</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">f</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// hello</span></pre></div>\n<ul dir=\"auto\">\n<li>有时，某个方法位于多层对象的内部，这时如果为了简化书写，把该方法赋值给一个变量，往往会得到意想不到的结果。</li>\n</ul>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"var a = {\n    b: {\n        prop: 'hello, lencx',\n        say: function() {\n            console.log(this.prop)\n        }\n    }\n}\n// `say`属于多层对象内部的一个方法。为求简写，将其赋值给`hello`变量\nvar hello = a.b.say\n// 调用时，`this`指向全局对象(window)\nhello() // undefined\n// 为了避免这个问题，可以将`say`方法所在的对象赋值给`hello2`\nvar hello2 = a.b\n// 调用时，`this`指向不变，即指向对象`b`\nhello2.say()\"><pre><span class=\"pl-k\">var</span> <span class=\"pl-s1\">a</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">b</span>: <span class=\"pl-kos\">{</span>\n        <span class=\"pl-c1\">prop</span>: <span class=\"pl-s\">'hello, lencx'</span><span class=\"pl-kos\">,</span>\n        <span class=\"pl-en\">say</span>: <span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n            <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prop</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-kos\">}</span>\n    <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-c\">// `say`属于多层对象内部的一个方法。为求简写，将其赋值给`hello`变量</span>\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">hello</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">a</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">b</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">say</span>\n<span class=\"pl-c\">// 调用时，`this`指向全局对象(window)</span>\n<span class=\"pl-s1\">hello</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// undefined</span>\n<span class=\"pl-c\">// 为了避免这个问题，可以将`say`方法所在的对象赋值给`hello2`</span>\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">hello2</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">a</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">b</span>\n<span class=\"pl-c\">// 调用时，`this`指向不变，即指向对象`b`</span>\n<span class=\"pl-s1\">hello2</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">say</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span></pre></div>\n<h3 dir=\"auto\">箭头函数(Arrow functions)</h3>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"var foo = (() =&gt; this)\n// 在全局环境中调用`foo`，`this`指向`window`\nconsole.log(foo() === window) // true\nvar a = {}\n// 作为`a`对象的`fn`方法调用\na.fn = foo\nconsole.log(a.fn() === window) // true\n// 使用`call`\nconsole.log(foo.call(a) === window) // true\n// 使用`bind`\nfoo = foo.bind(a)\nconsole.log(foo() === window) // true\"><pre><span class=\"pl-k\">var</span> <span class=\"pl-s1\">foo</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-c\">// 在全局环境中调用`foo`，`this`指向`window`</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">foo</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">===</span> <span class=\"pl-smi\">window</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// true</span>\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">a</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span>\n<span class=\"pl-c\">// 作为`a`对象的`fn`方法调用</span>\n<span class=\"pl-s1\">a</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">fn</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">foo</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">a</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">fn</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">===</span> <span class=\"pl-smi\">window</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// true</span>\n<span class=\"pl-c\">// 使用`call`</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">foo</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">call</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">a</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">===</span> <span class=\"pl-smi\">window</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// true</span>\n<span class=\"pl-c\">// 使用`bind`</span>\n<span class=\"pl-s1\">foo</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">foo</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">bind</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">a</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">foo</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">===</span> <span class=\"pl-smi\">window</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// true</span></pre></div>\n<p dir=\"auto\"><em>结论</em>：<em><strong>无论使用何种办法，<code class=\"notranslate\">foo</code>方法的<code class=\"notranslate\">this</code>指向都是创建时的指向(window)。这个结论同样适用于在其他函数内部创建的箭头函数。<code class=\"notranslate\">this</code>指向创建它的对象。</strong></em></p>\n<p dir=\"auto\">例：</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"var obj = {foo: function() {\n    var x = (() =&gt; this)\n    // var x = function() {\n    //     return this\n    // }\n    return x\n}}\nvar fn = obj.foo()\nconsole.log(fn() === obj) // true\n// 但是请注意，如果将`foo`所在的对象赋值给一个变量`fn2`，而不是调用`foo`方法\nvar fn2 = obj.foo\n// 然后调用该方法，则`this`指向`window`，因为它遵循所在的对象运行环境\nconsole.log(fn2()() === window) // true\"><pre><span class=\"pl-k\">var</span> <span class=\"pl-s1\">obj</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span><span class=\"pl-en\">foo</span>: <span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">var</span> <span class=\"pl-s1\">x</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-c\">// var x = function() {</span>\n    <span class=\"pl-c\">//     return this</span>\n    <span class=\"pl-c\">// }</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-s1\">x</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">}</span>\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">fn</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">obj</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">foo</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">fn</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s1\">obj</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// true</span>\n<span class=\"pl-c\">// 但是请注意，如果将`foo`所在的对象赋值给一个变量`fn2`，而不是调用`foo`方法</span>\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">fn2</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">obj</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">foo</span>\n<span class=\"pl-c\">// 然后调用该方法，则`this`指向`window`，因为它遵循所在的对象运行环境</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">fn2</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">===</span> <span class=\"pl-smi\">window</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// true</span></pre></div>\n<h3 dir=\"auto\">对象定义新属性方法(Getter Or Setter)</h3>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"function sum() {\n    return this.x + this.y + this.z\n}\nvar numObj = {\n    x: 3,\n    y: 5,\n    z: 7,\n    get average() {\n        return (this.x + this.y + this.z) / 3\n    }\n}\nObject.defineProperty(numObj, 'sum', {\n    get: sum,\n    enumerable: true,\n    configurable: true\n})\nconsole.log(numObj.average, numObj.sum) // 5 15\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">sum</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">x</span> <span class=\"pl-c1\">+</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">y</span> <span class=\"pl-c1\">+</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">z</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">numObj</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">x</span>: <span class=\"pl-c1\">3</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-c1\">y</span>: <span class=\"pl-c1\">5</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-c1\">z</span>: <span class=\"pl-c1\">7</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-k\">get</span> <span class=\"pl-en\">average</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">return</span> <span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">x</span> <span class=\"pl-c1\">+</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">y</span> <span class=\"pl-c1\">+</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">z</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">/</span> <span class=\"pl-c1\">3</span>\n    <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">defineProperty</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">numObj</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'sum'</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">get</span>: <span class=\"pl-s1\">sum</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-c1\">enumerable</span>: <span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-c1\">configurable</span>: <span class=\"pl-c1\">true</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">numObj</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">average</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">numObj</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">sum</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// 5 15</span></pre></div>\n<h3 dir=\"auto\">Node.js</h3>\n<p dir=\"auto\">在node.js，<code class=\"notranslate\">this</code>分成两种情况。在全局环境中，<code class=\"notranslate\">this</code>指向全局对象<code class=\"notranslate\">global</code>；在模块环境中，<code class=\"notranslate\">this</code>指向<code class=\"notranslate\">module.exports</code></p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// 全局环境中\nthis === global // true\n// 模块环境中\nthis === module.exports // true\"><pre><span class=\"pl-c\">// 全局环境中</span>\n<span class=\"pl-smi\">this</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s1\">global</span> <span class=\"pl-c\">// true</span>\n<span class=\"pl-c\">// 模块环境中</span>\n<span class=\"pl-smi\">this</span> <span class=\"pl-c1\">===</span> <span class=\"pl-smi\">module</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">exports</span> <span class=\"pl-c\">// true</span></pre></div>\n<h2 dir=\"auto\">使用注意事项(Note)</h2>\n<h3 dir=\"auto\">避免多层<code class=\"notranslate\">this</code></h3>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"var o = {\n    f1: function() {\n        console.log(this) // f1\n        var f2 = function() {\n            console.log(this) // window\n        }()\n    }\n}\no.f1()\n// 解决办法:\nvar o2 = {\n    f1: function() {\n        console.log(this) // f1\n        // 使用`that`对`this`进行固定\n        var that = this\n        var f2 = function() {\n            // 使用`that`代替原来的`this`\n            console.log(that) // f1\n        }()\n    }\n}\no2.f1()\"><pre><span class=\"pl-k\">var</span> <span class=\"pl-s1\">o</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-en\">f1</span>: <span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// f1</span>\n        <span class=\"pl-k\">var</span> <span class=\"pl-s1\">f2</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n            <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// window</span>\n        <span class=\"pl-kos\">}</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-s1\">o</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">f1</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-c\">// 解决办法:</span>\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">o2</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-en\">f1</span>: <span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// f1</span>\n        <span class=\"pl-c\">// 使用`that`对`this`进行固定</span>\n        <span class=\"pl-k\">var</span> <span class=\"pl-s1\">that</span> <span class=\"pl-c1\">=</span> <span class=\"pl-smi\">this</span>\n        <span class=\"pl-k\">var</span> <span class=\"pl-s1\">f2</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n            <span class=\"pl-c\">// 使用`that`代替原来的`this`</span>\n            <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">that</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// f1</span>\n        <span class=\"pl-kos\">}</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-s1\">o2</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">f1</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span></pre></div>\n<h3 dir=\"auto\">避免数组处理方法中的<code class=\"notranslate\">this</code></h3>\n<p dir=\"auto\">数组的<code class=\"notranslate\">map</code>, <code class=\"notranslate\">reduce</code>, <code class=\"notranslate\">some</code>, <code class=\"notranslate\">filter</code>, <code class=\"notranslate\">forEach</code>等方法，允许提供一个函数作为参数。这个函数内部不应该使用<code class=\"notranslate\">this</code>。</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"var o = {\n    a: 'hello',\n    b: ['lencx', 'a1', 'a2'],\n    fn: function() {\n        this.b.map(function(item) {\n            console.log(`${this.a}, ${item}`)\n        })\n    }\n}\n// undefined, lencx\n// undefined, a1\n// undefined, a2\no.fn()\n// ------------------------------------------\n// 解决办法一：\n// 使用中间变量\nvar o2 = {\n    a: 'hello',\n    b: ['lencx', 'a1', 'a2'],\n    fn: function() {\n        var that = this\n        this.b.map(function(item) {\n            console.log(`${that.a}, ${item}`)\n        })\n    }\n}\n// hello, lencx\n// hello, a1\n// hello, a2\no2.f()\n// ------------------------------------------\n// 解决办法二：\n// 将`this`当作`map`方法的第二个参数，固定它的运行环境\nvar o3 = {\n    a: 'hello',\n    b: ['lencx', 'a1', 'a2'],\n    fn: function() {\n        this.b.map(function(item) {\n            console.log(`${this.a}, ${item}`)\n        }, this)\n    }\n}\n// hello, lencx\n// hello, a1\n// hello, a2\no3.fn()\"><pre><span class=\"pl-k\">var</span> <span class=\"pl-s1\">o</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">a</span>: <span class=\"pl-s\">'hello'</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-c1\">b</span>: <span class=\"pl-kos\">[</span><span class=\"pl-s\">'lencx'</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'a1'</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'a2'</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-en\">fn</span>: <span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">b</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">map</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">item</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n            <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">a</span><span class=\"pl-kos\">}</span></span>, <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">item</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-c\">// undefined, lencx</span>\n<span class=\"pl-c\">// undefined, a1</span>\n<span class=\"pl-c\">// undefined, a2</span>\n<span class=\"pl-s1\">o</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">fn</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-c\">// ------------------------------------------</span>\n<span class=\"pl-c\">// 解决办法一：</span>\n<span class=\"pl-c\">// 使用中间变量</span>\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">o2</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">a</span>: <span class=\"pl-s\">'hello'</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-c1\">b</span>: <span class=\"pl-kos\">[</span><span class=\"pl-s\">'lencx'</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'a1'</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'a2'</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-en\">fn</span>: <span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">var</span> <span class=\"pl-s1\">that</span> <span class=\"pl-c1\">=</span> <span class=\"pl-smi\">this</span>\n        <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">b</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">map</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">item</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n            <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">that</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">a</span><span class=\"pl-kos\">}</span></span>, <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">item</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-c\">// hello, lencx</span>\n<span class=\"pl-c\">// hello, a1</span>\n<span class=\"pl-c\">// hello, a2</span>\n<span class=\"pl-s1\">o2</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">f</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-c\">// ------------------------------------------</span>\n<span class=\"pl-c\">// 解决办法二：</span>\n<span class=\"pl-c\">// 将`this`当作`map`方法的第二个参数，固定它的运行环境</span>\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">o3</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">a</span>: <span class=\"pl-s\">'hello'</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-c1\">b</span>: <span class=\"pl-kos\">[</span><span class=\"pl-s\">'lencx'</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'a1'</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'a2'</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-en\">fn</span>: <span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">b</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">map</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">item</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n            <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">a</span><span class=\"pl-kos\">}</span></span>, <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">item</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-c\">// hello, lencx</span>\n<span class=\"pl-c\">// hello, a1</span>\n<span class=\"pl-c\">// hello, a2</span>\n<span class=\"pl-s1\">o3</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">fn</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span></pre></div>\n<h3 dir=\"auto\">避免回调函数中的<code class=\"notranslate\">this</code></h3>\n<blockquote>\n<p dir=\"auto\">回调函数中的<code class=\"notranslate\">this</code>往往会改变指向，最好避免使用</p>\n</blockquote>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"var o = new Object()\no.f = function() {\n    console.log(this === o)\n}\no.f() // true\n// `this`不再指向`o`对象，而是指向按钮的DOM对象\n// 因为`f`方法是在按钮对象的环境中被调用的\ndocument.querySelector('#btn').addEventListener('click', o.f)\"><pre><span class=\"pl-k\">var</span> <span class=\"pl-s1\">o</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-s1\">o</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">f</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s1\">o</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-s1\">o</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">f</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// true</span>\n<span class=\"pl-c\">// `this`不再指向`o`对象，而是指向按钮的DOM对象</span>\n<span class=\"pl-c\">// 因为`f`方法是在按钮对象的环境中被调用的</span>\n<span class=\"pl-smi\">document</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">querySelector</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'#btn'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">addEventListener</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'click'</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">o</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">f</span><span class=\"pl-kos\">)</span></pre></div>\n<h2 dir=\"auto\">固定<code class=\"notranslate\">this</code>的方法(Fixed this)</h2>\n<p dir=\"auto\"><code class=\"notranslate\">this</code>的动态切换，为JavaScript创造了巨大的灵活性，但也使编程变得困难和模糊。有时需要把<code class=\"notranslate\">this</code>固定下来，避免出现意想不到的情况。JavaScript提供了<code class=\"notranslate\">call</code>, <code class=\"notranslate\">apply</code>, <code class=\"notranslate\">bind</code>三个方法，来切换/固定<code class=\"notranslate\">this</code>的指向。</p>\n<h3 dir=\"auto\"><code class=\"notranslate\">call</code>方法</h3>\n<blockquote>\n<p dir=\"auto\">Syntax: function.call(thisArg, arg1, arg2, ...)<br>\n第一个参数<code class=\"notranslate\">thisArg</code>就是<code class=\"notranslate\">this</code>所要指向的对象，之后的参数<code class=\"notranslate\">arg1, arg2, ...</code>则是函数调用时所需的参数。</p>\n</blockquote>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// 例1:\nvar o = {}\nvar f = function () {\n    return this\n}\nf() === window // true\nf.call(o) === o // true\n// 例2:\nvar num = 111\nvar num2 = {num: 222}\nfunction sayNum() {\n    console.log(this.num)\n}\nsayNum.call() // 111\nsayNum.call(window) // 111\nsayNum.call(num2) // 222\"><pre><span class=\"pl-c\">// 例1:</span>\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">o</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span>\n<span class=\"pl-k\">var</span> <span class=\"pl-en\">f</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-en\">f</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">===</span> <span class=\"pl-smi\">window</span> <span class=\"pl-c\">// true</span>\n<span class=\"pl-en\">f</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">call</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">o</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s1\">o</span> <span class=\"pl-c\">// true</span>\n<span class=\"pl-c\">// 例2:</span>\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">num</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">111</span>\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">num2</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span><span class=\"pl-c1\">num</span>: <span class=\"pl-c1\">222</span><span class=\"pl-kos\">}</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">sayNum</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">num</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-s1\">sayNum</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">call</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// 111</span>\n<span class=\"pl-s1\">sayNum</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">call</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">window</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// 111</span>\n<span class=\"pl-s1\">sayNum</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">call</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">num2</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// 222</span></pre></div>\n<p dir=\"auto\"><code class=\"notranslate\">call</code>的应用：调用对象的原生方法</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"var obj = {}\nobj.hasOwnProperty('map') // false\nobj.hasOwnProperty = function() {\n    return true\n}\nobj.hasOwnProperty('map') // true\nObject.prototype.hasOwnProperty.call(obj, 'map') // false\"><pre><span class=\"pl-k\">var</span> <span class=\"pl-s1\">obj</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span>\n<span class=\"pl-s1\">obj</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">hasOwnProperty</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'map'</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// false</span>\n<span class=\"pl-s1\">obj</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">hasOwnProperty</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">true</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-s1\">obj</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">hasOwnProperty</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'map'</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// true</span>\n<span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">hasOwnProperty</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">call</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">obj</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'map'</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// false</span></pre></div>\n<p dir=\"auto\"><code class=\"notranslate\">hasOwnProperty</code>是<code class=\"notranslate\">obj</code>对象继承的方法，如果这个方法一旦被覆盖，就得不到正确的结果。<code class=\"notranslate\">call</code>方法则可以解决这个问题。它将<code class=\"notranslate\">hasOwnProperty</code>方法的原始定义放到<code class=\"notranslate\">obj</code>对象上执行，这样无论<code class=\"notranslate\">obj</code>上有没有同名方法，都不会影响其结果。</p>\n<h3 dir=\"auto\"><code class=\"notranslate\">apply</code>方法</h3>\n<blockquote>\n<p dir=\"auto\">Syntax: func.apply(thisArg, [argsArray])<br>\n<code class=\"notranslate\">apply</code>方法与<code class=\"notranslate\">call</code>类似，也是改变<code class=\"notranslate\">this</code>指向，然后再调用该函数。唯一区别是，它接收一个数组作为函数执行时的参数。</p>\n</blockquote>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"function sum(x, y) {\n    console.log(x + y)\n}\nsum.call(null, 2, 4) // 6\nsum.apply(null, [2, 4]) // 6\n// --------------------------------------------------\n// 对字符串中的单个字符进行重复操作\n//Uncaught TypeError: &quot;abcd&quot;.map is not a function\n'abcd'.map(i =&gt; console.log(i))\n// aabbccdd\nArray.prototype.map.call('abcd', i =&gt; i+i).join('')\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">sum</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">x</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">y</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">x</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s1\">y</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-s1\">sum</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">call</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">null</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">2</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">4</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// 6</span>\n<span class=\"pl-s1\">sum</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">apply</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">null</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span><span class=\"pl-c1\">2</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">4</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// 6</span>\n<span class=\"pl-c\">// --------------------------------------------------</span>\n<span class=\"pl-c\">// 对字符串中的单个字符进行重复操作</span>\n<span class=\"pl-c\">//Uncaught TypeError: \"abcd\".map is not a function</span>\n<span class=\"pl-s\">'abcd'</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">map</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">i</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-c\">// aabbccdd</span>\n<span class=\"pl-v\">Array</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">map</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">call</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'abcd'</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">i</span><span class=\"pl-c1\">+</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">join</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">''</span><span class=\"pl-kos\">)</span></pre></div>\n<h4 dir=\"auto\">应用(Use)</h4>\n<ul dir=\"auto\">\n<li>找出数组中最大/最小的元素</li>\n</ul>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"var a = [4, 7, 3, 9, 11, 1]\nMath.max.apply(null, a) // 11\nMath.min.apply(null, a) // 1\"><pre><span class=\"pl-k\">var</span> <span class=\"pl-s1\">a</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-c1\">4</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">7</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">3</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">9</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">11</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">1</span><span class=\"pl-kos\">]</span>\n<span class=\"pl-v\">Math</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">max</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">apply</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">null</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">a</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// 11</span>\n<span class=\"pl-v\">Math</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">min</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">apply</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">null</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">a</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// 1</span></pre></div>\n<ul dir=\"auto\">\n<li>将数组的空元素变为<code class=\"notranslate\">undefined</code>(数组遍历会跳过空元素，但是不会跳过undefined)</li>\n</ul>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Array.apply(null, [1, 2, , 3]) // [1, 2, undefined, 3]\"><pre><span class=\"pl-v\">Array</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">apply</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">null</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">2</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">,</span> <span class=\"pl-c1\">3</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// [1, 2, undefined, 3]</span></pre></div>\n<ul dir=\"auto\">\n<li>转换类似数组的对象(被处理的对象必须有<code class=\"notranslate\">length</code>属性，以及相对应的数字键)</li>\n</ul>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// 例1:\nvar o = {\n    0: 1,\n    1: 3,\n    length: 2\n}\nArray.prototype.slice.apply(o) // [1, 3]\n// 例2:\nvar o2 = {\n    0: 1,\n    1: 3\n}\nArray.prototype.slice.apply(o2) // []\n// 例3:\nvar o3 = {\n    0: 1,\n    1: 3,\n    length: 4\n}\nArray.prototype.slice.apply(o3) // [1, 3, empty × 2]\n// 例4:\nvar o4 = {\n    1: 1,\n    a: 3,\n    length: 2\n}\nArray.prototype.slice.apply(o4) // [empty, 1]\"><pre><span class=\"pl-c\">// 例1:</span>\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">o</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">0</span>: <span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-c1\">1</span>: <span class=\"pl-c1\">3</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-c1\">length</span>: <span class=\"pl-c1\">2</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-v\">Array</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">slice</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">apply</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">o</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// [1, 3]</span>\n<span class=\"pl-c\">// 例2:</span>\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">o2</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">0</span>: <span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-c1\">1</span>: <span class=\"pl-c1\">3</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-v\">Array</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">slice</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">apply</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">o2</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// []</span>\n<span class=\"pl-c\">// 例3:</span>\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">o3</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">0</span>: <span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-c1\">1</span>: <span class=\"pl-c1\">3</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-c1\">length</span>: <span class=\"pl-c1\">4</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-v\">Array</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">slice</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">apply</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">o3</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// [1, 3, empty × 2]</span>\n<span class=\"pl-c\">// 例4:</span>\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">o4</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">1</span>: <span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-c1\">a</span>: <span class=\"pl-c1\">3</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-c1\">length</span>: <span class=\"pl-c1\">2</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-v\">Array</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">slice</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">apply</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">o4</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// [empty, 1]</span></pre></div>\n<ul dir=\"auto\">\n<li>绑定回调函数的对象(之前<a href=\"#%E9%81%BF%E5%85%8D%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E4%B8%AD%E7%9A%84this\">绑定按钮点击事件</a>的例子)</li>\n</ul>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"var o = new Object()\no.f = function() {\n    console.log(this === o)\n}\n// `apply`或者`call`方法不仅绑定函数执行时所在的对象，还会立即执行函数。因此要把绑定语句写在一个函数体内。\nvar foo = function() {\n    // o.f.call(o)\n    o.f.apply(o)\n}\n// true\ndocument.querySelector('#btn').addEventListener('click', foo)\"><pre><span class=\"pl-k\">var</span> <span class=\"pl-s1\">o</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-s1\">o</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">f</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s1\">o</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-c\">// `apply`或者`call`方法不仅绑定函数执行时所在的对象，还会立即执行函数。因此要把绑定语句写在一个函数体内。</span>\n<span class=\"pl-k\">var</span> <span class=\"pl-en\">foo</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c\">// o.f.call(o)</span>\n    <span class=\"pl-s1\">o</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">f</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">apply</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">o</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-c\">// true</span>\n<span class=\"pl-smi\">document</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">querySelector</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'#btn'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">addEventListener</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'click'</span><span class=\"pl-kos\">,</span> <span class=\"pl-en\">foo</span><span class=\"pl-kos\">)</span></pre></div>\n<h3 dir=\"auto\"><code class=\"notranslate\">bind</code>方法</h3>\n<blockquote>\n<p dir=\"auto\">Syntax: fun.bind(thisArg[, arg1[, arg2[, ...]]])</p>\n</blockquote>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">bind</code>方法用于将函数体内的<code class=\"notranslate\">this</code>绑定到某个对象，然后返回一个新函数。</li>\n</ul>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"var o = new Object()\no.name = 'lencx'\no.say = function() {\n    console.log(this.name)\n}\no.say() // lencx\nvar o2 = new Object()\no2.name = 'len'\no2.say = o.say\no2.say() // len\no2.say = o.say.bind(o)\no2.say() // lencx\"><pre><span class=\"pl-k\">var</span> <span class=\"pl-s1\">o</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-s1\">o</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">'lencx'</span>\n<span class=\"pl-s1\">o</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">say</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-s1\">o</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">say</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// lencx</span>\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">o2</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-s1\">o2</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">'len'</span>\n<span class=\"pl-s1\">o2</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">say</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">o</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">say</span>\n<span class=\"pl-s1\">o2</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">say</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// len</span>\n<span class=\"pl-s1\">o2</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">say</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">o</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">say</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">bind</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">o</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-s1\">o2</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">say</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// lencx</span></pre></div>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">bind</code>除了可以绑定<code class=\"notranslate\">this</code>以外，还可以绑定原函数的参数</li>\n</ul>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"var sum = function(x, y) {\n    return x * this.a + y * this.b\n}\nvar nums = {\n    a: 3,\n    b: 4\n}\nvar newSum = sum.bind(nums, 3)\nnewSum(3)\"><pre><span class=\"pl-k\">var</span> <span class=\"pl-en\">sum</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">x</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">y</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-s1\">x</span> <span class=\"pl-c1\">*</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">a</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s1\">y</span> <span class=\"pl-c1\">*</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">b</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">nums</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">a</span>: <span class=\"pl-c1\">3</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-c1\">b</span>: <span class=\"pl-c1\">4</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">newSum</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">sum</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">bind</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">nums</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">3</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-s1\">newSum</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">3</span><span class=\"pl-kos\">)</span></pre></div>\n<h4 dir=\"auto\">注意事项(Note)</h4>\n<ul dir=\"auto\">\n<li>每次绑定都返回一个新函数</li>\n</ul>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// 点击事件绑定`bind`方法生成的一个匿名函数。会导致无法取消绑定。\nelement.addEventListener('click', o.say.bind(o))\n// 因此下面的代码无效\nelement.removeEventListener('click', o.say.bind(o))\n// 正确解法：\nvar _say = o.say.bind(o)\nelement.addEventListener('click', _say)\nelement.removeEventListener('click', _say)\"><pre><span class=\"pl-c\">// 点击事件绑定`bind`方法生成的一个匿名函数。会导致无法取消绑定。</span>\n<span class=\"pl-s1\">element</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">addEventListener</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'click'</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">o</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">say</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">bind</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">o</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-c\">// 因此下面的代码无效</span>\n<span class=\"pl-s1\">element</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">removeEventListener</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'click'</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">o</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">say</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">bind</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">o</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-c\">// 正确解法：</span>\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">_say</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">o</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">say</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">bind</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">o</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-s1\">element</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">addEventListener</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'click'</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">_say</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-s1\">element</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">removeEventListener</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'click'</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">_say</span><span class=\"pl-kos\">)</span></pre></div>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">bind</code>方法的兼容(Polyfill)</li>\n</ul>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\nif (!Function.prototype.bind) {\n  Function.prototype.bind = function(oThis) {\n    if (typeof this !== 'function') {\n      // closest thing possible to the ECMAScript 5\n      // internal IsCallable function\n      throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');\n    }\n    var aArgs   = Array.prototype.slice.call(arguments, 1),\n        fToBind = this,\n        fNOP    = function() {},\n        fBound  = function() {\n          return fToBind.apply(this instanceof fNOP\n                 ? this\n                 : oThis,\n                 aArgs.concat(Array.prototype.slice.call(arguments)));\n        };\n    if (this.prototype) {\n      // Function.prototype doesn't have a prototype property\n      fNOP.prototype = this.prototype;\n    }\n    fBound.prototype = new fNOP();\n    return fBound;\n  };\n}\"><pre><span class=\"pl-c\">// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind</span>\n<span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-c1\">!</span><span class=\"pl-v\">Function</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">bind</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-v\">Function</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">bind</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">oThis</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-k\">typeof</span> <span class=\"pl-smi\">this</span> <span class=\"pl-c1\">!==</span> <span class=\"pl-s\">'function'</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-c\">// closest thing possible to the ECMAScript 5</span>\n      <span class=\"pl-c\">// internal IsCallable function</span>\n      <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">TypeError</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'Function.prototype.bind - what is trying to be bound is not callable'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span>\n    <span class=\"pl-k\">var</span> <span class=\"pl-s1\">aArgs</span>   <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Array</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">slice</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">call</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">arguments</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span>\n        <span class=\"pl-s1\">fToBind</span> <span class=\"pl-c1\">=</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">,</span>\n        <span class=\"pl-en\">fNOP</span>    <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n        <span class=\"pl-en\">fBound</span>  <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n          <span class=\"pl-k\">return</span> <span class=\"pl-s1\">fToBind</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">apply</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span> <span class=\"pl-k\">instanceof</span> <span class=\"pl-en\">fNOP</span>\n                 ? <span class=\"pl-smi\">this</span>\n                 : <span class=\"pl-s1\">oThis</span><span class=\"pl-kos\">,</span>\n                 <span class=\"pl-s1\">aArgs</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">concat</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Array</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">slice</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">call</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">arguments</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n        <span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-c\">// Function.prototype doesn't have a prototype property</span>\n      <span class=\"pl-en\">fNOP</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span> <span class=\"pl-c1\">=</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span>\n    <span class=\"pl-en\">fBound</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">fNOP</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-en\">fBound</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<ul dir=\"auto\">\n<li>结合<code class=\"notranslate\">call</code>方法使用</li>\n</ul>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"[1, 2, 3].slice(0, 1) // [1]\n// 等同\nArray.prototype.slice.call([1, 2, 3], 0, 1) // [1]\n// `call`方法实质是调用`Function.prototype.call`方法\nvar slice = Function.prototype.call.bind(Array.prototype.slice)\nslice([1, 2, 3], 0, 1) // [1]\"><pre><span class=\"pl-kos\">[</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">2</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">3</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">slice</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">0</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// [1]</span>\n<span class=\"pl-c\">// 等同</span>\n<span class=\"pl-v\">Array</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">slice</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">call</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">2</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">3</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// [1]</span>\n<span class=\"pl-c\">// `call`方法实质是调用`Function.prototype.call`方法</span>\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">slice</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Function</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">call</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">bind</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Array</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">slice</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-s1\">slice</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">2</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">3</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// [1]</span></pre></div>\n<ul dir=\"auto\">\n<li>利用<code class=\"notranslate\">bind</code>方法，将<code class=\"notranslate\">[1, 2, 3].slice(0, 1)</code>变成了<code class=\"notranslate\">slice([1, 2, 3], 0, 1)</code>的形式。这种改变也可以应用到其他数组方法。</li>\n</ul>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"var pop = Function.prototype.call.bind(Array.prototype.pop)\nvar push = Function.prototype.call.bind(Array.prototype.push)\nvar shift = Function.prototype.call.bind(Array.prototype.shift)\nvar map = Function.prototype.call.bind(Array.prototype.map)\n// ...\nvar a = [1, 2, 3]\npop(a) // [1, 2]\npush(a, 5) // [1, 2, 5]\nshift(a) // [2, 5]\nmap(a, i =&gt; i+1) // [3, 6]\"><pre><span class=\"pl-k\">var</span> <span class=\"pl-s1\">pop</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Function</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">call</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">bind</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Array</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">pop</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">push</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Function</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">call</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">bind</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Array</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">push</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">shift</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Function</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">call</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">bind</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Array</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">shift</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">map</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Function</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">call</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">bind</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Array</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">map</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-c\">// ...</span>\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">a</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">2</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">3</span><span class=\"pl-kos\">]</span>\n<span class=\"pl-s1\">pop</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">a</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// [1, 2]</span>\n<span class=\"pl-s1\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">a</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">5</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// [1, 2, 5]</span>\n<span class=\"pl-s1\">shift</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">a</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// [2, 5]</span>\n<span class=\"pl-s1\">map</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">a</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">i</span><span class=\"pl-c1\">+</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// [3, 6]</span></pre></div>\n<ul dir=\"auto\">\n<li>将<code class=\"notranslate\">Function.prototype.call</code>绑定到<code class=\"notranslate\">Function.prototype.bind</code>对象，<code class=\"notranslate\">bind</code>的调用形式也可以被改写</li>\n</ul>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"function foo() {\n    console.log(this.name)\n}\nvar o = {name: 'lencx'}\nvar bind = Function.prototype.call.bind(Function.prototype.bind)\nbind(foo, o)() // lencx\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">foo</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">o</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span><span class=\"pl-c1\">name</span>: <span class=\"pl-s\">'lencx'</span><span class=\"pl-kos\">}</span>\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">bind</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Function</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">call</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">bind</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Function</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">bind</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-s1\">bind</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">foo</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">o</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// lencx</span></pre></div>\n<h2 dir=\"auto\">参考资料</h2>\n<ul dir=\"auto\">\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\" rel=\"nofollow\">[MDN] this</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\" rel=\"nofollow\">[MDN] defineProperty</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" rel=\"nofollow\">[MDN] call</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\" rel=\"nofollow\">[MDN] bind</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" rel=\"nofollow\">[MDN] apply</a></li>\n</ul>","updatedAt":"2022-03-30T03:58:38Z","upvoteCount":1,"author":{"login":"lencx","avatarUrl":"https://avatars.githubusercontent.com/u/16164244?u=77d1d01930d8e36105a49a6c474abf70eeee74b1&v=4","url":"https://github.com/lencx"},"category":{"isAnswerable":false,"name":"Web","emoji":":globe_with_meridians:"},"labels":{"edges":[{"node":{"name":"JavaScript","color":"f1e05a"}}]},"comments":{"edges":[]}}},"pageContext":{"number":25,"previous":{"title":"开发那些事儿","number":1},"next":{"title":"Awesome Book","number":18}}},"staticQueryHashes":["3993188973"]}