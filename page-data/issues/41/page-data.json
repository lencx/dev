{"componentChunkName":"component---src-templates-issues-tsx","path":"/issues/41","result":{"data":{"site":{"siteMetadata":{"repo":"https://github.com/lencx/dev"}},"issuesJson":{"id":"0e2dbe98-927c-5450-a6eb-18cac1b6abb2","title":"Awesome WebAssembly","number":41,"bodyHTML":"<h2 dir=\"auto\">Guide</h2>\n<ul dir=\"auto\">\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/WebAssembly\" rel=\"nofollow\">MDN WebAssembly</a></li>\n<li><a href=\"https://hacks.mozilla.org/category/webassembly/\" rel=\"nofollow\">[Mozilla Hacks] WebAssembly Articles</a> - Articles posted in WebAssembly</li>\n<li><a href=\"https://webassembly.org\" rel=\"nofollow\">webassembly.org</a> - WebAssembly (abbreviated Wasm) is a binary instruction format for a stack-based virtual machine. Wasm is designed as a portable compilation target for programming languages, enabling deployment on the web for client and server applications.</li>\n<li><a href=\"https://bytecodealliance.org/articles/\" rel=\"nofollow\">Bytecode Alliance</a> - The Bytecode Alliance is a nonprofit organization dedicated to creating secure new software foundations, building on standards such as WebAssembly and WebAssembly System Interface (WASI).</li>\n<li><a href=\"https://rustwasm.github.io/docs/book\" rel=\"nofollow\">Rust <g-emoji class=\"g-emoji\" alias=\"crab\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f980.png\">🦀</g-emoji>   and WebAssembly <g-emoji class=\"g-emoji\" alias=\"spider_web\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f578.png\">🕸</g-emoji>   </a> - This small book describes how to use Rust and WebAssembly together.</li>\n<li><a href=\"https://github.com/appcypher/awesome-wasm-langs\">Awesome WebAssembly Languages</a> - <g-emoji class=\"g-emoji\" alias=\"sunglasses\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f60e.png\">😎</g-emoji>  A curated list of languages that compile directly to or have their VMs in WebAssembly</li>\n<li><a href=\"https://wasmweekly.news\" rel=\"nofollow\">WebAssembly Weekly</a> - A weekly newsletter for keeping on top of what's new in the world of WebAssembly, with tutorials, examples, articles, and more.</li>\n<li><a href=\"https://github.com/mbasso/awesome-wasm\">Awesome Wasm</a> - <g-emoji class=\"g-emoji\" alias=\"sunglasses\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f60e.png\">😎</g-emoji>  Curated list of awesome things regarding WebAssembly (wasm) ecosystem.</li>\n<li><a href=\"https://wasmbyexample.dev/home.en-us.html\" rel=\"nofollow\">Wasm By Example</a> - A hands-on introduction into WebAssembly ( Wasm ). Containing simple wasm examples and wasm tutorials on how to implement concepts and various tasks using WebAssembly.</li>\n</ul>\n<h2 dir=\"auto\">WASI &amp; VM &amp; VDOM</h2>\n<ul dir=\"auto\">\n<li><a href=\"https://github.com/bytecodealliance/wasmtime\">wasmtime</a> - Standalone JIT-style runtime for WebAssembly, using Cranelift</li>\n<li><a href=\"https://github.com/wasm3/wasm3\">Wasm3</a> - <g-emoji class=\"g-emoji\" alias=\"rocket\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f680.png\">🚀</g-emoji>  The fastest WebAssembly interpreter, and the most universal runtime</li>\n<li><a href=\"https://github.com/wasmerio/wasmer\">Wasmer</a> - <g-emoji class=\"g-emoji\" alias=\"rocket\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f680.png\">🚀</g-emoji>  The leading WebAssembly Runtime supporting WASI and Emscripten.</li>\n<li><a href=\"https://github.com/bytecodealliance/lucet\">Lucet</a> - Lucet, the Sandboxing WebAssembly Compiler.</li>\n<li><a href=\"https://github.com/WasmEdge/WasmEdge\">WasmEdge</a> - WasmEdge Runtime is a high-performance, extensible, and hardware optimized WebAssembly Virtual Machine for automotive, cloud, AI, and blockchain applications.</li>\n<li><a href=\"https://github.com/mbasso/asm-dom\">asm-dom</a> - A minimal WebAssembly virtual DOM to build C++ SPA (Single page applications)</li>\n</ul>\n<h2 dir=\"auto\">Tools</h2>\n<ul dir=\"auto\">\n<li><a href=\"https://wapm.io\" rel=\"nofollow\">wapm</a> - <code class=\"notranslate\">WAPM</code> is the WebAssembly Package Manager.</li>\n<li><a href=\"https://github.com/thedodd/trunk\">trunk</a> - Build, bundle &amp; ship your Rust WASM application to the web.</li>\n<li><a href=\"https://github.com/bytecodealliance/wasm-tools\">wasm-tools</a> - Rust tooling for low-level manipulation of WebAssembly modules.</li>\n<li><a href=\"https://github.com/rustwasm/wasm-pack\">wasm-pack</a> - <g-emoji class=\"g-emoji\" alias=\"package\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f4e6.png\">📦</g-emoji>  <g-emoji class=\"g-emoji\" alias=\"sparkles\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/2728.png\">✨</g-emoji>  your favorite rust -&gt; wasm workflow tool!</li>\n</ul>\n<h2 dir=\"auto\">Optimizing</h2>\n<ul dir=\"auto\">\n<li><a href=\"https://rustwasm.github.io/book/reference/code-size.html\" rel=\"nofollow\">Shrinking <code class=\"notranslate\">.wasm</code> Code Size</a>\n<ul dir=\"auto\">\n<li><a href=\"https://github.com/WebAssembly/binaryen\">Binaryen</a> - Binaryen is a compiler and toolchain infrastructure library for WebAssembly, written in C++. It aims to make compiling to WebAssembly easy, fast, and effective.</li>\n<li><a href=\"https://github.com/rustwasm/twiggy\">Twiggy</a> - Twiggy <g-emoji class=\"g-emoji\" alias=\"seedling\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f331.png\">🌱</g-emoji>  is a code size profiler</li>\n</ul>\n</li>\n<li><a href=\"https://emscripten.org/docs/optimizing/Optimizing-Code.html\" rel=\"nofollow\">Optimizing Code (<code class=\"notranslate\">cpp</code>)</a></li>\n<li><a href=\"https://arxiv.org/pdf/2002.10213.pdf\" rel=\"nofollow\">Superoptimization of WebAssembly Bytecode</a></li>\n</ul>\n<h2 dir=\"auto\">Open Source</h2>\n<ul dir=\"auto\">\n<li><a href=\"https://github.com/lencx/vite-plugin-rsw\">vite-plugin-rsw</a> - <g-emoji class=\"g-emoji\" alias=\"crab\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f980.png\">🦀</g-emoji>  wasm-pack plugin for Vite</li>\n<li><a href=\"https://github.com/lencx/rsw-node\">rsw-node</a> - <g-emoji class=\"g-emoji\" alias=\"white_circle\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/26aa.png\">⚪️</g-emoji>  <code class=\"notranslate\">wasm-pack build</code> executed in remote deployment</li>\n<li><a href=\"https://github.com/GoogleChromeLabs/wasi-fs-access\">wasi-fs-access</a> - This is a demo shell powered by WebAssembly, WASI, Asyncify and File System Access API.</li>\n<li><a href=\"https://ffmpegwasm.github.io\" rel=\"nofollow\">FFMPEG.WASM</a> - ffmpeg.wasm is a pure WebAssembly / JavaScript port of FFmpeg. It enables video &amp; audio record, convert and stream right inside browsers.</li>\n<li><a href=\"https://github.com/ColinEberhardt/wasm-rust-chip8\">wasm-rust-chip8</a> - A WebAssembly CHIP-8 emulator written with Rust</li>\n<li><a href=\"https://bbodi.github.io/notecalc3\" rel=\"nofollow\">NoteCalc</a> -  is a handy notepad with a smart builtin calculator.</li>\n<li><a href=\"https://github.com/GraphiteEditor/Graphite\">Graphite</a> - Powerful 2D vector and raster editing: procedural and nondestructive. (Photoshop + Illustrator + Houdini = Graphite)</li>\n<li><a href=\"https://github.com/PaddiM8/kalker\">Kalker/kalk</a> - is a calculator with math syntax that supports user-defined variables and functions, complex numbers, and estimation of derivatives and integrals</li>\n<li><a href=\"https://github.com/torch2424/wasmboy\">wasmboy</a> - Game Boy / Game Boy Color Emulator Library, <g-emoji class=\"g-emoji\" alias=\"video_game\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f3ae.png\">🎮</g-emoji>   written for WebAssembly using AssemblyScript. <g-emoji class=\"g-emoji\" alias=\"rocket\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f680.png\">🚀</g-emoji>  Demos built with Preact and Svelte. <g-emoji class=\"g-emoji\" alias=\"atom_symbol\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/269b.png\">⚛️</g-emoji></li>\n<li><a href=\"https://github.com/38/plotters\">Plotters</a> - A rust drawing library for high quality data plotting for both WASM and native, statically and realtimely <g-emoji class=\"g-emoji\" alias=\"crab\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f980.png\">🦀</g-emoji>   <g-emoji class=\"g-emoji\" alias=\"chart_with_upwards_trend\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f4c8.png\">📈</g-emoji>  <g-emoji class=\"g-emoji\" alias=\"rocket\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f680.png\">🚀</g-emoji></li>\n<li><a href=\"https://github.com/tomaka/redshirt\">redshirt</a> - The redshirt operating system is an experiment to build some kind of operating-system-like environment where executables are all in Wasm and are loaded from an IPFS-like decentralized network.</li>\n<li><a href=\"https://github.com/silvia-odwyer/photon\">Photon</a> - <g-emoji class=\"g-emoji\" alias=\"zap\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/26a1.png\">⚡</g-emoji>  Rust/WebAssembly image processing library</li>\n<li><a href=\"https://github.com/rsms/markdown-wasm\">markdown-wasm</a> - Markdown parser and HTML generator implemented in WebAssembly, based on md4c.</li>\n<li><a href=\"https://github.com/Daninet/hash-wasm\">hash-wasm</a> - Hash-WASM is a <g-emoji class=\"g-emoji\" alias=\"zap\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/26a1.png\">⚡</g-emoji>  lightning fast<g-emoji class=\"g-emoji\" alias=\"zap\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/26a1.png\">⚡</g-emoji>  hash function library for browsers and Node.js. It is using hand-tuned WebAssembly binaries to calculate the hash faster than other libraries.</li>\n<li><a href=\"https://github.com/cloudflare/serde-wasm-bindgen\">serde-wasm-bindgen</a> - Native integration of <a href=\"https://serde.rs\" rel=\"nofollow\">Serde</a> with <a href=\"https://github.com/rustwasm/wasm-bindgen\">wasm-bindgen</a></li>\n<li><a href=\"https://github.com/sycamore-rs/sycamore\">sycamore</a> - A reactive DOM library for Rust in WASM.</li>\n<li><a href=\"https://github.com/samthor/gumnut\">gumnut</a> - JS parser in Web Assembly / C.</li>\n<li><a href=\"https://github.com/Birch-san/box2d-wasm\">box2d-wasm</a> - Box2D physics engine compiled to WebAssembly. Supports TypeScript and ES modules.</li>\n<li><a href=\"https://github.com/tensorflow/tfjs\">TensorFlow.js</a> - A WebGL accelerated JavaScript library for training and deploying ML models.</li>\n</ul>\n<h2 dir=\"auto\">Article</h2>\n<ul dir=\"auto\">\n<li><a href=\"https://medium.com/@alshdavid/a-vision-for-future-web-technologies-wasm-pwas-9f8c6e1fe6b0\" rel=\"nofollow\">A vision for future Web Technologies — WASM &amp; PWAs</a></li>\n<li><a href=\"https://thenewstack.io/the-three-pillars-of-webassembly/\" rel=\"nofollow\">The Three Pillars of WebAssembly</a></li>\n<li><a href=\"https://www.cloudsavvyit.com/13696/why-webassembly-frameworks-are-the-future-of-the-web/\" rel=\"nofollow\">Why WebAssembly Frameworks Are the Future of the Web</a></li>\n<li><a href=\"https://lencx.github.io/book/wasm/rust_wasm_frontend.html\" rel=\"nofollow\">WebAssembly入门</a></li>\n<li><a href=\"https://www.yuque.com/kiwenlau/blog/zg3349\" rel=\"nofollow\">十年磨一剑，WebAssembly是如何诞生的？</a></li>\n<li><a href=\"https://blog.scottlogic.com/2021/06/21/state-of-wasm.html\" rel=\"nofollow\">The State of WebAssembly 2021</a></li>\n<li><a href=\"https://web.dev/webassembly-threads/\" rel=\"nofollow\">Using WebAssembly threads from C, C++ and Rust</a></li>\n<li><a href=\"https://blog.discourse.org/2021/07/faster-user-uploads-on-discourse-with-rust-webassembly-and-mozjpeg/\" rel=\"nofollow\">Faster (and smaller) uploads in Discourse with Rust, WebAssembly and MozJPEG</a></li>\n<li><a href=\"https://wasmbook.com/\" rel=\"nofollow\">WasmBook</a> - Rick Battagline's WebAssembly Playground</li>\n<li><a href=\"https://surma.dev/things/js-to-asc/\" rel=\"nofollow\">Is WebAssembly magic performance pixie dust?</a></li>\n<li><a href=\"https://www.edx.org/course/webassembly-actors-from-cloud-to-edge\" rel=\"nofollow\">WebAssembly Actors: From Cloud to Edge</a> - Embrace the actor model to build portable, secure, lightweight WebAssembly modules that thrive in the cloud, at the edge, and anywhere in between.</li>\n<li><a href=\"https://blog.ttulka.com/learning-webassembly-series\" rel=\"nofollow\">Learning WebAssembly Series</a> - A series of learning texts covering the first steps with WebAssembly for complete beginners.</li>\n<li><a href=\"https://blog.scottlogic.com/2020/11/23/ffmpeg-webassembly.html\" rel=\"nofollow\">In-browser transcoding of video files with FFmpeg and WebAssembly</a></li>\n<li><a href=\"https://hacks.mozilla.org/2019/03/standardizing-wasi-a-webassembly-system-interface\" rel=\"nofollow\">Standardizing WASI: A system interface to run WebAssembly outside the web</a></li>\n<li><a href=\"https://paulbutler.org/2020/the-webassembly-app-gap\" rel=\"nofollow\">The WebAssembly App Gap</a></li>\n<li><a href=\"https://developer.ibm.com/articles/why-webassembly-and-rust-together-improve-nodejs-performance\" rel=\"nofollow\">Why using WebAssembly and Rust together improves Node.js performance</a></li>\n<li><a href=\"https://v8.dev/docs/wasm-compilation-pipeline\" rel=\"nofollow\">[V8] WebAssembly compilation pipeline</a></li>\n<li><a href=\"https://pspdfkit.com/blog/2018/optimize-webassembly-startup-performance/\" rel=\"nofollow\">Optimizing WebAssembly Startup Time</a></li>\n<li><a href=\"https://www.cs.cornell.edu/courses/cs6120/2019fa/blog/wasm/\" rel=\"nofollow\">Bringing You Up to Speed on How Compiling WebAssembly is Faster</a></li>\n<li><a href=\"https://mrale.ph/blog/2018/02/03/maybe-you-dont-need-rust-to-speed-up-your-js.html#getting-the-code\" rel=\"nofollow\">Maybe you don't need Rust and WASM to speed up your JS</a></li>\n<li><a href=\"https://thenewstack.io/using-web-assembly-written-in-rust-on-the-server-side/\" rel=\"nofollow\">Using WebAssembly Written in Rust on the Server-Side</a></li>\n<li><a href=\"https://thenewstack.io/the-pain-of-debugging-webassembly/\" rel=\"nofollow\">The Pain of Debugging WebAssembly</a></li>\n<li><a href=\"https://thenewstack.io/kubecon-eu-why-webassembly-is-more-than-a-javascript-replacement/\" rel=\"nofollow\">KubeCon EU: WebAssembly Is More Than a JavaScript Replacement</a></li>\n<li><a href=\"https://thenewstack.io/why-webassembly-modules-could-be-the-new-de-facto-unit-of-compute/\" rel=\"nofollow\">Why WebAssembly Modules Could Be the New de Facto Unit of Compute</a></li>\n<li><a href=\"https://www.infinyon.com/blog/2021/08/smartstream-aggregates/\" rel=\"nofollow\">Aggregate streaming data in real-time with WebAssembly</a></li>\n<li><a href=\"https://blog.logrocket.com/full-stack-rust-a-complete-tutorial-with-examples/\" rel=\"nofollow\">Full-stack Rust: A complete tutorial with examples</a></li>\n</ul>","updatedAt":"2022-06-13T19:23:39Z","upvoteCount":1,"author":{"login":"lencx","avatarUrl":"https://avatars.githubusercontent.com/u/16164244?u=77d1d01930d8e36105a49a6c474abf70eeee74b1&v=4","url":"https://github.com/lencx"},"category":{"isAnswerable":false,"name":"Awesome","emoji":":sunglasses:"},"labels":{"edges":[]},"comments":{"edges":[]}}},"pageContext":{"number":41,"previous":{"title":"Awesome Node.js","number":23},"next":{"title":"Awesome GitHub","number":30}}},"staticQueryHashes":["3993188973"]}