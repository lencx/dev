{"componentChunkName":"component---src-templates-issues-tsx","path":"/issues/49","result":{"data":{"site":{"siteMetadata":{"repo":"https://github.com/lencx/dev"}},"issuesJson":{"id":"66e36a42-b1a1-565f-9270-a524056d5fba","title":"js 中 apply & bind & call 区别","number":49,"bodyHTML":"<h2 dir=\"auto\">三者异同</h2>\n<div class=\"highlight highlight-source-shell notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"+-----------------+-----------------+----------------+\n|                 |   函数执行时间    |   this绑定时间  |\n+-----------------+-----------------+----------------+\n| function object |       未        |       未        |\n|        f        |       来        |       来        |\n+-----------------+-----------------+----------------+\n| function call   |       现        |       现        |\n|      f()        |       在        |       在        |\n+-----------------+-----------------+----------------+\n|    f.call()     |       现        |       现        |\n|    f.apply()    |       在        |       在        |\n+-----------------+-----------------+----------------+\n|    f.bind()     |      未来        |      现在      |\n+-----------------+-----------------+----------------+\"><pre>+-----------------+-----------------+----------------+\n<span class=\"pl-k\">|</span>                 <span class=\"pl-k\">|</span>   函数执行时间    <span class=\"pl-k\">|</span>   this绑定时间  <span class=\"pl-k\">|</span>\n+-----------------+-----------------+----------------+\n<span class=\"pl-k\">|</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">object</span> <span class=\"pl-k\">|</span>       未        <span class=\"pl-k\">|</span>       未        <span class=\"pl-k\">|</span>\n<span class=\"pl-k\">|</span>        f        <span class=\"pl-k\">|</span>       来        <span class=\"pl-k\">|</span>       来        <span class=\"pl-k\">|</span>\n+-----------------+-----------------+----------------+\n<span class=\"pl-k\">|</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">call</span>   <span class=\"pl-k\">|</span>       现        <span class=\"pl-k\">|</span>       现        <span class=\"pl-k\">|</span>\n<span class=\"pl-k\">|</span>      <span class=\"pl-en\">f</span>()        <span class=\"pl-k\">|</span>       在        <span class=\"pl-k\">|</span>       在        <span class=\"pl-k\">|</span>\n+-----------------+-----------------+----------------+\n<span class=\"pl-k\">|</span>    <span class=\"pl-en\">f.call</span>()     <span class=\"pl-k\">|</span>       现        <span class=\"pl-k\">|</span>       现        <span class=\"pl-k\">|</span>\n<span class=\"pl-k\">|</span>    <span class=\"pl-en\">f.apply</span>()    <span class=\"pl-k\">|</span>       在        <span class=\"pl-k\">|</span>       在        <span class=\"pl-k\">|</span>\n+-----------------+-----------------+----------------+\n<span class=\"pl-k\">|</span>    <span class=\"pl-en\">f.bind</span>()     <span class=\"pl-k\">|</span>      未来        <span class=\"pl-k\">|</span>      现在      <span class=\"pl-k\">|</span>\n+-----------------+-----------------+----------------+</pre></div>\n<h3 dir=\"auto\">相同点</h3>\n<ul dir=\"auto\">\n<li>都是 <code class=\"notranslate\">Function</code> 对象上的方法 ，为了改变函数体内部的 <code class=\"notranslate\">this</code> 指向</li>\n<li>三者第一个参数都是 <code class=\"notranslate\">this</code> 要指向的对象，即指定函数调用上下文</li>\n<li>三者都可以利用后续参数传参</li>\n</ul>\n<h3 dir=\"auto\">不同点</h3>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">bind</code> 是指定上下文，返回函数，便于稍后调用，<code class=\"notranslate\">apply</code> 和 <code class=\"notranslate\">call</code> 则是立即调用函数并修改上下文\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">bind()</code> 函数会创建一个新的绑定函数 <code class=\"notranslate\">(bound function，BF)</code></li>\n<li>返回值：返回一个原函数的拷贝，并拥有指定的 <code class=\"notranslate\">this</code> 值和初始参数</li>\n</ul>\n</li>\n<li><code class=\"notranslate\">apply</code> 传入数组\n<ul dir=\"auto\">\n<li>返回值：调用有指定 <code class=\"notranslate\">this</code> 值和参数的函数的结果</li>\n</ul>\n</li>\n<li><code class=\"notranslate\">call</code> 传入参数列表\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">call()</code> 允许为不同的对象分配和调用属于一个对象的函数/方法</li>\n<li>可以使用 <code class=\"notranslate\">call</code> 来实现继承：写一个方法，然后让另外一个新的对象来继承它（而不是在新对象中再写一次这个方法）</li>\n<li>返回值：使用调用者提供的 <code class=\"notranslate\">this</code> 值和参数调用该函数的返回值。若该方法没有返回值，则返回 <code class=\"notranslate\">undefined</code></li>\n</ul>\n</li>\n</ul>\n<h2 dir=\"auto\">参考资料</h2>\n<ul dir=\"auto\">\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" rel=\"nofollow\">[MDN] Function.prototype.apply()</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\" rel=\"nofollow\">[MDN] Function.prototype.bind()</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" rel=\"nofollow\">[MDN] Function.prototype.call()</a></li>\n<li><a href=\"https://stackoverflow.com/questions/15455009/javascript-call-apply-vs-bind\" rel=\"nofollow\">Javascript call() &amp; apply() vs bind()?</a></li>\n</ul>","updatedAt":"2022-06-15T09:52:25Z","upvoteCount":1,"author":{"login":"lencx","avatarUrl":"https://avatars.githubusercontent.com/u/16164244?u=77d1d01930d8e36105a49a6c474abf70eeee74b1&v=4","url":"https://github.com/lencx"},"category":{"isAnswerable":false,"name":"Web","emoji":":globe_with_meridians:"},"labels":{"edges":[{"node":{"name":"JavaScript","color":"f1e05a"}},{"node":{"name":"Interview","color":"662E4E"}}]},"comments":{"edges":[]}}},"pageContext":{"number":49,"previous":{"title":"Unicode 中文乱码速查表","number":46},"next":{"title":"react-router 中的 <Link> 标签与 <a> 标签的区别是什么？","number":45}}},"staticQueryHashes":["3993188973"]}