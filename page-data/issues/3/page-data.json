{"componentChunkName":"component---src-templates-issues-tsx","path":"/issues/3","result":{"data":{"site":{"siteMetadata":{"repo":"https://github.com/lencx/dev"}},"issuesJson":{"id":"98aa8172-cb7d-5638-9d04-154508497f85","title":"Where ‘this’ executes？","number":3,"bodyHTML":"<p dir=\"auto\">What will each output？</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"let name = 'global';\nconst obj = {\n    name:'obj',\n    test:function(){\n        let name = 'scope';\n        console.log(this.name);\n    }\n}\nconst test = obj.test;\ntest(); \nobj.test(); \"><pre><span class=\"pl-k\">let</span> <span class=\"pl-s1\">name</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">'global'</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">obj</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">name</span>:<span class=\"pl-s\">'obj'</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-en\">test</span>:<span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">let</span> <span class=\"pl-s1\">name</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">'scope'</span><span class=\"pl-kos\">;</span>\n        <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">test</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">obj</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">test</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-s1\">test</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span> \n<span class=\"pl-s1\">obj</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">test</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span> </pre></div>","updatedAt":"2022-05-10T05:26:06Z","upvoteCount":2,"author":{"login":"dengshicheng1996","avatarUrl":"https://avatars.githubusercontent.com/u/41374066?v=4","url":"https://github.com/dengshicheng1996"},"category":{"isAnswerable":false,"name":"Web","emoji":":globe_with_meridians:"},"labels":{"edges":[{"node":{"name":"JavaScript","color":"f1e05a"}},{"node":{"name":"Interview","color":"662E4E"}}]},"comments":{"edges":[{"node":{"id":"DC_kwDOG2u5tM4AIj5T","bodyHTML":"<h2 dir=\"auto\">分析</h2>\n<ol dir=\"auto\">\n<li><code class=\"notranslate\">确定 this 的指向</code> - this 的值是在执行的时候才能确认，定义的时候不能确认！ 因为 this 是执行上下文环境的一部分，而执行上下文需要在代码执行之前确定，而不是定义的时候。</li>\n<li><code class=\"notranslate\">name 是什么</code> - 使用 <code class=\"notranslate\">let</code> 或 <code class=\"notranslate\">const</code> 声明的 name，和使用 <code class=\"notranslate\">var</code> 有什么区别。\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">let 或 const</code> - 它们在全局（在最顶部的范围）声明时，不会在 window 下创建属性。具体原因参考<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/let#%E6%8F%8F%E8%BF%B0\" rel=\"nofollow\">这里</a>。</li>\n<li><code class=\"notranslate\">var</code> - 用 var 声明的变量的作用域是它当前的执行上下文，它可以是嵌套的函数，或者对于声明在任何函数外的变量来说是全局（成为 window 的属性）。</li>\n<li><code class=\"notranslate\">window 下的 name 是什么?</code> - 窗口的名称主要用于设置超链接和表单的目标。默认为空字符串。</li>\n</ul>\n</li>\n</ol>\n<h2 dir=\"auto\">解题</h2>\n<h3 dir=\"auto\">第一次打印</h3>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// 🟢 声明 test 变量，此时函数未发生调用。\nconst test = obj.test;\n// 🟢 函数执行执行上下文为 window, 此时 this 指向 window，即 `this.name` 就是 `window.name`。\n// 🟢 问题变为 window 下的 name 是什么？\n// 🟢 let 声明的变量不会将 name 绑定到 window 下，所以不可能输出 `global`。\n// 🟢 而 `window.name` 恰巧是 window 自有属性，默认值为空字符串。(这个是挖坑)\n// 🟢 如果换成其他属性，如 `this.aaa` 之类的，则输出 `undefined`。\n// ✅ 所以输出空字符串。\ntest();\"><pre><span class=\"pl-c\">// 🟢 声明 test 变量，此时函数未发生调用。</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">test</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">obj</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">test</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-c\">// 🟢 函数执行执行上下文为 window, 此时 this 指向 window，即 `this.name` 就是 `window.name`。</span>\n<span class=\"pl-c\">// 🟢 问题变为 window 下的 name 是什么？</span>\n<span class=\"pl-c\">// 🟢 let 声明的变量不会将 name 绑定到 window 下，所以不可能输出 `global`。</span>\n<span class=\"pl-c\">// 🟢 而 `window.name` 恰巧是 window 自有属性，默认值为空字符串。(这个是挖坑)</span>\n<span class=\"pl-c\">// 🟢 如果换成其他属性，如 `this.aaa` 之类的，则输出 `undefined`。</span>\n<span class=\"pl-c\">// ✅ 所以输出空字符串。</span>\n<span class=\"pl-s1\">test</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>\n<h3 dir=\"auto\">第二次打印</h3>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// 🟢 对于 obj.test() 来说，我们只需要记住，谁调用了函数，谁就是 this。\n// 🟢 所以在这个场景下 test 函数中的 this 就是 obj 对象。\n// ✅ 所以输出 “obj”。\nobj.test(); \"><pre><span class=\"pl-c\">// 🟢 对于 obj.test() 来说，我们只需要记住，谁调用了函数，谁就是 this。</span>\n<span class=\"pl-c\">// 🟢 所以在这个场景下 test 函数中的 this 就是 obj 对象。</span>\n<span class=\"pl-c\">// ✅ 所以输出 “obj”。</span>\n<span class=\"pl-s1\">obj</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">test</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span> </pre></div>\n<hr>\n<h2 dir=\"auto\">参考资料</h2>\n<ul dir=\"auto\">\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\" rel=\"nofollow\">this</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/var\" rel=\"nofollow\">var</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/name\" rel=\"nofollow\">window.name</a></li>\n</ul>","author":{"login":"lencx","avatarUrl":"https://avatars.githubusercontent.com/u/16164244?u=77d1d01930d8e36105a49a6c474abf70eeee74b1&v=4","url":"https://github.com/lencx"},"replies":{"edges":[]}}}]}}},"pageContext":{"number":3,"previous":{"title":"TCP 与 UDP 之间的区别","number":6},"next":{"title":"js-macro micro tasks","number":2}}},"staticQueryHashes":["3993188973"]}