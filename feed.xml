<?xml version="1.0" encoding="utf-8"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
<channel>
  <title>RSS</title>
  <atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
  <link>/</link>
  <description>GitHub Discussions</description>
  <item>
  <title><![CDATA[Rust国内镜像]]></title>
  <link>https://github.com/lencx/dev/discussions/51</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/51</guid>
  <pubDate>2022-07-24</pubDate>
  <description><![CDATA[<p dir="auto">macOS: <code class="notranslate">~/.cargo/config</code></p>
<div class="highlight highlight-source-toml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="[source.crates-io]
registry = &quot;https://github.com/rust-lang/crates.io-index&quot;

# 替换成你偏好的镜像源
replace-with = 'sjtu'

# 清华大学
[source.tuna]
registry = &quot;https://mirrors.tuna.tsinghua.edu.cn/git/crates.io-index.git&quot;

# 中国科学技术大学
[source.ustc]
registry = &quot;git://mirrors.ustc.edu.cn/crates.io-index&quot;

# 上海交通大学
[source.sjtu]
registry = &quot;https://mirrors.sjtug.sjtu.edu.cn/git/crates.io-index&quot;

# rustcc社区
[source.rustcc]
registry = &quot;git://crates.rustcc.cn/crates.io-index&quot;"><pre>[<span class="pl-en">source</span>.<span class="pl-en">crates-io</span>]
<span class="pl-smi">registry</span> = <span class="pl-s"><span class="pl-pds">"</span>https://github.com/rust-lang/crates.io-index<span class="pl-pds">"</span></span>

<span class="pl-c"><span class="pl-c">#</span> 替换成你偏好的镜像源</span>
<span class="pl-smi">replace-with</span> = <span class="pl-s"><span class="pl-pds">'</span>sjtu<span class="pl-pds">'</span></span>

<span class="pl-c"><span class="pl-c">#</span> 清华大学</span>
[<span class="pl-en">source</span>.<span class="pl-en">tuna</span>]
<span class="pl-smi">registry</span> = <span class="pl-s"><span class="pl-pds">"</span>https://mirrors.tuna.tsinghua.edu.cn/git/crates.io-index.git<span class="pl-pds">"</span></span>

<span class="pl-c"><span class="pl-c">#</span> 中国科学技术大学</span>
[<span class="pl-en">source</span>.<span class="pl-en">ustc</span>]
<span class="pl-smi">registry</span> = <span class="pl-s"><span class="pl-pds">"</span>git://mirrors.ustc.edu.cn/crates.io-index<span class="pl-pds">"</span></span>

<span class="pl-c"><span class="pl-c">#</span> 上海交通大学</span>
[<span class="pl-en">source</span>.<span class="pl-en">sjtu</span>]
<span class="pl-smi">registry</span> = <span class="pl-s"><span class="pl-pds">"</span>https://mirrors.sjtug.sjtu.edu.cn/git/crates.io-index<span class="pl-pds">"</span></span>

<span class="pl-c"><span class="pl-c">#</span> rustcc社区</span>
[<span class="pl-en">source</span>.<span class="pl-en">rustcc</span>]
<span class="pl-smi">registry</span> = <span class="pl-s"><span class="pl-pds">"</span>git://crates.rustcc.cn/crates.io-index<span class="pl-pds">"</span></span></pre></div>
<h2 dir="auto">RsProxy</h2>
<h3 dir="auto">crates.io 镜像</h3>
<p dir="auto"><code class="notranslate">~/.cargo/config</code></p>
<div class="highlight highlight-source-toml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="[source.crates-io]
# To use sparse index, change 'rsproxy' to 'rsproxy-sparse'
replace-with = 'rsproxy'

[source.rsproxy]
registry = &quot;https://rsproxy.cn/crates.io-index&quot;
[source.rsproxy-sparse]
registry = &quot;sparse+https://rsproxy.cn/index/&quot;

[registries.rsproxy]
index = &quot;https://rsproxy.cn/crates.io-index&quot;

[net]
git-fetch-with-cli = true"><pre>[<span class="pl-en">source</span>.<span class="pl-en">crates-io</span>]
<span class="pl-c"><span class="pl-c">#</span> To use sparse index, change 'rsproxy' to 'rsproxy-sparse'</span>
<span class="pl-smi">replace-with</span> = <span class="pl-s"><span class="pl-pds">'</span>rsproxy<span class="pl-pds">'</span></span>

[<span class="pl-en">source</span>.<span class="pl-en">rsproxy</span>]
<span class="pl-smi">registry</span> = <span class="pl-s"><span class="pl-pds">"</span>https://rsproxy.cn/crates.io-index<span class="pl-pds">"</span></span>
[<span class="pl-en">source</span>.<span class="pl-en">rsproxy-sparse</span>]
<span class="pl-smi">registry</span> = <span class="pl-s"><span class="pl-pds">"</span>sparse+https://rsproxy.cn/index/<span class="pl-pds">"</span></span>

[<span class="pl-en">registries</span>.<span class="pl-en">rsproxy</span>]
<span class="pl-smi">index</span> = <span class="pl-s"><span class="pl-pds">"</span>https://rsproxy.cn/crates.io-index<span class="pl-pds">"</span></span>

[<span class="pl-en">net</span>]
<span class="pl-smi">git-fetch-with-cli</span> = <span class="pl-c1">true</span></pre></div>
<h3 dir="auto">Rustup 镜像</h3>
<p dir="auto"><code class="notranslate">~/.zshrc</code> or <code class="notranslate">~/.bashrc</code></p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="export RUSTUP_DIST_SERVER=&quot;https://rsproxy.cn&quot;
export RUSTUP_UPDATE_ROOT=&quot;https://rsproxy.cn/rustup&quot;"><pre><span class="pl-k">export</span> RUSTUP_DIST_SERVER=<span class="pl-s"><span class="pl-pds">"</span>https://rsproxy.cn<span class="pl-pds">"</span></span>
<span class="pl-k">export</span> RUSTUP_UPDATE_ROOT=<span class="pl-s"><span class="pl-pds">"</span>https://rsproxy.cn/rustup<span class="pl-pds">"</span></span></pre></div>
<h3 dir="auto">安装 Rust</h3>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# export the env above first
curl --proto '=https' --tlsv1.2 -sSf https://rsproxy.cn/rustup-init.sh | sh"><pre><span class="pl-c"><span class="pl-c">#</span> export the env above first</span>
curl --proto <span class="pl-s"><span class="pl-pds">'</span>=https<span class="pl-pds">'</span></span> --tlsv1.2 -sSf https://rsproxy.cn/rustup-init.sh <span class="pl-k">|</span> sh</pre></div>
<hr>
<ul dir="auto">
<li><a href="https://mirrors.tuna.tsinghua.edu.cn" rel="nofollow">清华大学开源软件镜像站</a> - 清华大学开源软件镜像站，致力于为国内和校内用户提供高质量的开源软件镜像、Linux 镜像源服务，帮助用户更方便地获取开源软件。本镜像站由清华大学 TUNA 团队负责维护。</li>
<li><a href="https://mirrors.ustc.edu.cn" rel="nofollow">中国科学技术大学开源软件镜像</a> - 是 Debian, Ubuntu, Fedora, Archlinux, CentOS 等多个发行版的官方源。目前是中国大陆高校访问量最大，收录最全的开源软件镜像。</li>
<li><a href="https://mirrors.sjtug.sjtu.edu.cn" rel="nofollow">上海交通大学 Linux 用户组 软件源镜像服务</a></li>
<li><a href="https://rustcc.cn" rel="nofollow">Rust语言中文社区</a></li>
</ul>]]></description>
</item>
<item>
  <title><![CDATA[js 继承与原型链]]></title>
  <link>https://github.com/lencx/dev/discussions/54</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/54</guid>
  <pubDate>2022-06-28</pubDate>
  <description><![CDATA[<div class="highlight highlight-source-js notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="/**
* 1. new foo() // 输出什么
* 2. foo() // 输出什么
* 3. f.b // 输出什么，为什么（this.b 和 foo.prototype.b 的区别）
* 4. foo.c 和 foo.d 有什么区别？
* 5. foo.prototype = { e: 5, f: 6 } 写法有什么问题？
* 6. new 关键字做了哪些事情？
* 7. f.e // 输出什么，为什么（查找路径是什么）
**/

let foo = function() {
  this.a = 1;
  this.b = 2;
}

const f = new foo();

foo.prototype.b = -2;
foo.prototype.c = 3;
foo.d = 4;"><pre><span class="pl-c">/**</span>
<span class="pl-c">* 1. new foo() // 输出什么</span>
<span class="pl-c">* 2. foo() // 输出什么</span>
<span class="pl-c">* 3. f.b // 输出什么，为什么（this.b 和 foo.prototype.b 的区别）</span>
<span class="pl-c">* 4. foo.c 和 foo.d 有什么区别？</span>
<span class="pl-c">* 5. foo.prototype = { e: 5, f: 6 } 写法有什么问题？</span>
<span class="pl-c">* 6. new 关键字做了哪些事情？</span>
<span class="pl-c">* 7. f.e // 输出什么，为什么（查找路径是什么）</span>
<span class="pl-c">**/</span>

<span class="pl-k">let</span> <span class="pl-en">foo</span> <span class="pl-c1">=</span> <span class="pl-k">function</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
  <span class="pl-smi">this</span><span class="pl-kos">.</span><span class="pl-c1">a</span> <span class="pl-c1">=</span> <span class="pl-c1">1</span><span class="pl-kos">;</span>
  <span class="pl-smi">this</span><span class="pl-kos">.</span><span class="pl-c1">b</span> <span class="pl-c1">=</span> <span class="pl-c1">2</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span>

<span class="pl-k">const</span> <span class="pl-s1">f</span> <span class="pl-c1">=</span> <span class="pl-k">new</span> <span class="pl-en">foo</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">;</span>

<span class="pl-en">foo</span><span class="pl-kos">.</span><span class="pl-c1">prototype</span><span class="pl-kos">.</span><span class="pl-c1">b</span> <span class="pl-c1">=</span> <span class="pl-c1">-</span><span class="pl-c1">2</span><span class="pl-kos">;</span>
<span class="pl-en">foo</span><span class="pl-kos">.</span><span class="pl-c1">prototype</span><span class="pl-kos">.</span><span class="pl-c1">c</span> <span class="pl-c1">=</span> <span class="pl-c1">3</span><span class="pl-kos">;</span>
<span class="pl-en">foo</span><span class="pl-kos">.</span><span class="pl-c1">d</span> <span class="pl-c1">=</span> <span class="pl-c1">4</span><span class="pl-kos">;</span></pre></div>
<hr>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="// Bar 如何继承 Foo
function Foo() {
  this.name = &quot;lencx&quot;;
  this.age = 20;
}
function Bar() {
  // TODO
}"><pre><span class="pl-c">// Bar 如何继承 Foo</span>
<span class="pl-k">function</span> <span class="pl-v">Foo</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
  <span class="pl-smi">this</span><span class="pl-kos">.</span><span class="pl-c1">name</span> <span class="pl-c1">=</span> <span class="pl-s">"lencx"</span><span class="pl-kos">;</span>
  <span class="pl-smi">this</span><span class="pl-kos">.</span><span class="pl-c1">age</span> <span class="pl-c1">=</span> <span class="pl-c1">20</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span>
<span class="pl-k">function</span> <span class="pl-v">Bar</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
  <span class="pl-c">// TODO</span>
<span class="pl-kos">}</span></pre></div>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function Bar() {
  Foo.call(this);
}
// 添加原型实例（Foo.prototype）作为构造器函数 prototype 属性的值
Bar.prototype = Object.create(Foo.prototype);"><pre><span class="pl-k">function</span> <span class="pl-v">Bar</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
  <span class="pl-v">Foo</span><span class="pl-kos">.</span><span class="pl-en">call</span><span class="pl-kos">(</span><span class="pl-smi">this</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span>
<span class="pl-c">// 添加原型实例（Foo.prototype）作为构造器函数 prototype 属性的值</span>
<span class="pl-v">Bar</span><span class="pl-kos">.</span><span class="pl-c1">prototype</span> <span class="pl-c1">=</span> <span class="pl-v">Object</span><span class="pl-kos">.</span><span class="pl-en">create</span><span class="pl-kos">(</span><span class="pl-v">Foo</span><span class="pl-kos">.</span><span class="pl-c1">prototype</span><span class="pl-kos">)</span><span class="pl-kos">;</span></pre></div>]]></description>
</item>
<item>
  <title><![CDATA[Awesome Web]]></title>
  <link>https://github.com/lencx/dev/discussions/53</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/53</guid>
  <pubDate>2022-06-20</pubDate>
  <description><![CDATA[<h2 dir="auto">Tips</h2>
<ul dir="auto">
<li><a href="https://daily-dev-tips.com/" rel="nofollow">Daily Dev Tips just for you - Daily Dev Tips</a> - I write daily web development tips that help you become a more efficient software developer. Learn with me by following my daily tips.</li>
<li><a href="https://www.jstips.co/" rel="nofollow">Js Tips - A JavaScript tip per day!</a> - This is about one JavaScript tip every day! JavaScript resources, react, angular, node, performance, front-end</li>
</ul>]]></description>
</item>
<item>
  <title><![CDATA[实现 People.eat("apple").sleep(1000).run()]]></title>
  <link>https://github.com/lencx/dev/discussions/52</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/52</guid>
  <pubDate>2022-06-19</pubDate>
  <description><![CDATA[<p dir="auto">TODO</p>]]></description>
</item>
<item>
  <title><![CDATA[Awesome  React]]></title>
  <link>https://github.com/lencx/dev/discussions/36</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/36</guid>
  <pubDate>2022-06-20</pubDate>
  <description><![CDATA[<h3 dir="auto">Frame</h3>
<ul dir="auto">
<li><a href="https://create-react-app.dev/" rel="nofollow">Create React App</a> - Set up a modern web app by running one command.</li>
<li><a href="https://umijs.org/" rel="nofollow">UmiJS</a> - <g-emoji class="g-emoji" alias="rice_ball" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f359.png">🍙</g-emoji> Extensible enterprise-level front-end application framework.</li>
<li><a href="https://github.com/vitejs/vite/tree/main/packages/create-vite">create-vite</a> - Scaffolding Your First Vite Project</li>
</ul>
<h3 dir="auto">UI &amp; Components</h3>
<ul dir="auto">
<li><a href="https://github.com/mui-org/material-ui">Material-UI</a> - Material-UI is a simple and customizable component library to build faster, beautiful, and more accessible React applications. Follow your own design system, or start with Material Design.</li>
<li><a href="https://github.com/ant-design/ant-design">Ant Design</a> - An enterprise-class UI design language and React UI library.</li>
<li><a href="https://github.com/chakra-ui/chakra-ui">Chakra UI</a> - <g-emoji class="g-emoji" alias="zap" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a1.png">⚡️</g-emoji> Simple, Modular &amp; Accessible UI Components for your React Applications</li>
<li><a href="https://github.com/bytedance/guide">bytedance/guide</a> - A new feature guide component by react <g-emoji class="g-emoji" alias="compass" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f9ed.png">🧭</g-emoji></li>
<li><a href="https://github.com/jedwatson/react-select">React-Select</a> - The Select Component for React.js</li>
<li><a href="https://github.com/timolins/react-hot-toast">react-hot-toast</a> - Smoking hot React Notifications <g-emoji class="g-emoji" alias="fire" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f525.png">🔥</g-emoji></li>
<li><a href="https://github.com/xiaolin/react-image-gallery">React Image Gallery</a> - React carousel image gallery component with thumbnail support <g-emoji class="g-emoji" alias="framed_picture" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f5bc.png">🖼</g-emoji></li>
<li><a href="https://github.com/brillout/awesome-react-components"><g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji> Absolutely Awesome React Components &amp; Libraries</a> - Curated List of React Components &amp; Libraries.</li>
<li><a href="https://github.com/fkhadra/react-toastify">react-toastify</a> - React notification made easy <g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji> !</li>
<li><a href="https://github.com/atlassian/react-beautiful-dnd">react-beautiful-dnd</a> - Beautiful and accessible drag and drop for lists with React.</li>
</ul>
<h3 dir="auto">ClassName</h3>
<ul dir="auto">
<li><a href="https://github.com/lukeed/clsx">clsx</a> - A tiny (228B) utility for constructing <code class="notranslate">className</code> strings conditionally.</li>
<li><a href="https://github.com/JedWatson/classnames">classnames</a> - A simple javascript utility for conditionally joining classNames together.</li>
</ul>
<h3 dir="auto">Hooks</h3>
<ul dir="auto">
<li><a href="https://github.com/rehooks/awesome-react-hooks">awesome-react-hooks</a> - Awesome React Hooks</li>
<li><a href="https://github.com/streamich/react-use">react-use</a> - React Hooks — <g-emoji class="g-emoji" alias="+1" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png">👍</g-emoji></li>
<li><a href="https://github.com/imbhargav5/rooks">rooks</a> - Essential React custom hooks <g-emoji class="g-emoji" alias="anchor" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2693.png">⚓</g-emoji> to super charge your components!</li>
<li><a href="https://github.com/pmndrs/use-gesture">@use-gesture</a> - <g-emoji class="g-emoji" alias="point_down" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f447.png">👇</g-emoji>Bread n butter utility for component-tied mouse/touch gestures in React and Vanilla Javascript.</li>
<li><a href="https://github.com/ava/use-http">useFetch</a> - <g-emoji class="g-emoji" alias="dog" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f436.png">🐶</g-emoji> React hook for making isomorphic http requests</li>
<li><a href="https://github.com/pmndrs/use-cannon">@react-three/cannon</a> - <g-emoji class="g-emoji" alias="wave" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f44b.png">👋</g-emoji><g-emoji class="g-emoji" alias="bomb" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a3.png">💣</g-emoji> physics based hooks for react-three-fiber</li>
<li><a href="https://github.com/Swizec/useAuth">useAuth</a> - The simplest way to add authentication to your React app. Supports various providers.</li>
<li><a href="https://github.com/alewin/useWorker">useWorker</a> - A React Hook for Blocking-Free Background Tasks</li>
<li><a href="https://github.com/joshwcomeau/use-sound">useSound</a> - A React Hook for playing sound effects</li>
<li><a href="https://github.com/react-hook-form/react-hook-form">react-hook-form</a> - <g-emoji class="g-emoji" alias="clipboard" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4cb.png">📋</g-emoji> React Hooks for forms validation (Web + React Native)</li>
</ul>
<h3 dir="auto">State</h3>
<ul dir="auto">
<li><a href="https://github.com/pmndrs/zustand">zustand</a> - <g-emoji class="g-emoji" alias="bear" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f43b.png">🐻</g-emoji> Bear necessities for state management in React</li>
<li><a href="https://github.com/pmndrs/jotai">jotai</a> - <g-emoji class="g-emoji" alias="ghost" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f47b.png">👻</g-emoji> Primitive and flexible state management for React</li>
<li><a href="https://github.com/reduxjs/react-redux">react-redux</a> - Official React bindings for Redux.
<ul dir="auto">
<li><a href="https://github.com/reduxjs/redux-toolkit">@reduxjs/toolkit</a> - The official, opinionated, batteries-included toolset for efficient Redux development</li>
</ul>
</li>
<li><a href="https://github.com/facebookexperimental/recoil">recoil</a> - Recoil is an experimental state management library for React apps. It provides several capabilities that are difficult to achieve with React alone, while being compatible with the newest features of React.</li>
<li><a href="https://github.com/bluebill1049/little-state-machine">little-state-machine</a> - <g-emoji class="g-emoji" alias="fax" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4e0.png">📠</g-emoji> React custom hook for persist state management</li>
<li><a href="https://github.com/mobxjs/mobx">mobx</a> - Simple, scalable state management.</li>
<li><a href="https://github.com/umijs">UmiJS</a> - Extensible enterprise-level front-end application framework.
<ul dir="auto">
<li><a href="https://github.com/dvajs/dva">dva</a> -  <g-emoji class="g-emoji" alias="seedling" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f331.png">🌱</g-emoji> React and redux based, lightweight and elm-style framework. (Inspired by elm and choo)</li>
<li><a href="https://github.com/umijs/plugins/tree/master/packages/plugin-model">@umijs/plugin-model</a> -A simple state management solution based on hooks (can be replacement of dva in some cases).</li>
<li><a href="https://github.com/umijs/hox">hox</a> - The next-generation state manager for React.</li>
</ul>
</li>
<li><a href="https://github.com/immerjs/immer">immer</a> - Create the next immutable state by mutating the current one.</li>
<li><a href="https://github.com/jamiebuilds/unstated-next">unstated-next</a> - 200 bytes to never think about React state management libraries ever again.</li>
<li><a href="https://github.com/effector/effector">effector</a> - The state manager <g-emoji class="g-emoji" alias="comet" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2604.png">☄️</g-emoji></li>
<li><a href="https://github.com/pmndrs/valtio">valtio</a> - <g-emoji class="g-emoji" alias="pill" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f48a.png">💊</g-emoji> Valtio makes proxy-state simple for React and Vanilla.</li>
<li><a href="https://github.com/ctrlplusb/easy-peasy">easy-peasy</a> - Vegetarian friendly state for React.</li>
<li><a href="https://github.com/diegohaz/constate">constate</a> - React Context + State</li>
<li><a href="https://github.com/RisingStack/react-easy-state">react-easy-state</a> - Simple React state management. Made with <g-emoji class="g-emoji" alias="heart" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2764.png">❤️</g-emoji> and ES6 Proxies.</li>
<li><a href="https://github.com/lostpebble/pullstate">pullstate</a> - Simple state stores using immer and React hooks - re-use parts of your state by pulling it anywhere you like!</li>
</ul>
<h3 dir="auto">Animation</h3>
<ul dir="auto">
<li><a href="https://react-spring.io/" rel="nofollow">react-spring</a> - bring your components to life with simple spring animation primitives</li>
<li><a href="https://github.com/chenglou/react-motion">React-Motion</a> - A spring that solves your animation problems.</li>
<li><a href="https://github.com/framer/motion">Framer Motion</a> - Open source, production-ready animation and gesture library for React</li>
<li><a href="https://github.com/reactjs/react-transition-group">react-transition-group</a> - An easy way to perform animations when a React component enters or leaves the DOM</li>
<li><a href="https://github.com/sghall/react-move">React Move</a> - React Move | Beautiful, data-driven animations for React</li>
</ul>
<h3 dir="auto">Browser Extension</h3>
<ul dir="auto">
<li><a href="https://github.com/reduxjs/redux-devtools">Redux DevTools</a> - DevTools for Redux with hot reloading, action replay, and customizable UI.</li>
</ul>]]></description>
</item>
<item>
  <title><![CDATA[计算机基础]]></title>
  <link>https://github.com/lencx/dev/discussions/32</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/32</guid>
  <pubDate>2022-05-10</pubDate>
  <description><![CDATA[<ul dir="auto">
<li><a href="https://teachyourselfcs.com/" rel="nofollow">Teach Yourself Computer Science</a> - All the resources you need to give yourself a world class computer science education</li>
<li><a href="https://github.com/ossu/computer-science/">Open Source Society University</a> - <g-emoji class="g-emoji" alias="mortar_board" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f393.png">🎓</g-emoji> Path to a free self-taught education in Computer Science!</li>
<li><a href="https://xn--2-umb.com/" rel="nofollow">Math &amp; Engineering</a> - Random collections of my notes and articles over the years, mostly about maths and/or engineering.</li>
</ul>
<h2 dir="auto">EDU</h2>
<ul dir="auto">
<li><a href="https://openlearning.mit.edu/courses-programs/open-learning-library" rel="nofollow">MIT Open Learning Library</a> - The MIT Open Learning Library is home to selected educational content from <a href="https://openlearning.mit.edu/courses-programs/mit-opencourseware" rel="nofollow">MIT OpenCourseWare</a> and <a href="https://openlearning.mit.edu/courses-programs/mitx-courses-edx" rel="nofollow">MITx</a> courses, available to anyone in the world at any time. All material is free to use. Some resources, particularly those from MIT OpenCourseWare, are free to download, remix, and reuse for non-commercial purposes.</li>
</ul>
<h2 dir="auto">Algorithms</h2>
<ul dir="auto">
<li><a href="https://visualgo.net/en" rel="nofollow">VisuAlgo</a> - VisuAlgo was conceptualised in 2011 by Dr Steven Halim as a tool to help his students better understand data structures and algorithms, by allowing them to learn the basics on their own and at their own pace.</li>
</ul>]]></description>
</item>
<item>
  <title><![CDATA[Awesome Interview]]></title>
  <link>https://github.com/lencx/dev/discussions/33</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/33</guid>
  <pubDate>2022-06-20</pubDate>
  <description><![CDATA[<ul dir="auto">
<li><a href="https://github.com/yangshun/tech-interview-handbook">Tech Interview Handbook</a> - <g-emoji class="g-emoji" alias="100" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png">💯</g-emoji> Curated interview preparation materials for busy engineers</li>
<li><a href="https://github.com/yangshun/front-end-interview-handbook">Front End Interview Handbook</a> - <g-emoji class="g-emoji" alias="zap" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a1.png">⚡️</g-emoji> Front End interview preparation materials for busy engineers</li>
<li><a href="https://github.com/jwasham/coding-interview-university">Coding Interview University</a> - A complete computer science study plan to become a software engineer.</li>
</ul>]]></description>
</item>
<item>
  <title><![CDATA[快捷键]]></title>
  <link>https://github.com/lencx/dev/discussions/47</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/47</guid>
  <pubDate>2022-09-23</pubDate>
  <description><![CDATA[<h2 dir="auto">macOS</h2>
<table role="table">
<thead>
<tr>
<th>键名</th>
<th>符号</th>
<th>键名</th>
<th>符号</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>⌘</td>
<td>Option</td>
<td>⌥</td>
</tr>
<tr>
<td>Ctrl</td>
<td>⌃</td>
<td>Shift</td>
<td>⇧</td>
</tr>
<tr>
<td>Tab</td>
<td>⇥</td>
<td>Delete</td>
<td>⌫</td>
</tr>
<tr>
<td>Enter</td>
<td>⏎</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>]]></description>
</item>
<item>
  <title><![CDATA[Awesome APP]]></title>
  <link>https://github.com/lencx/dev/discussions/29</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/29</guid>
  <pubDate>2022-08-05</pubDate>
  <description><![CDATA[<h2 dir="auto">macOS</h2>
<ul dir="auto">
<li><a href="https://github.com/jaywcjlove/awesome-mac">Awesome Mac</a> -  Now we have become very big, Different from the original idea. Collect premium software in various categories.</li>
<li><a href="https://github.com/serhii-londar/open-source-mac-os-apps">Awesome macOS open source applications</a> - <g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji> Awesome list of open source applications for macOS.</li>
<li><a href="https://www.macwk.com/" rel="nofollow">MacWk</a> - 精品mac软件下载</li>
<li><a href="https://www.mediaatelier.com/CheatSheet" rel="nofollow">CheatSheet</a> - Know your short cuts</li>
<li><a href="https://xnipapp.com/" rel="nofollow">Xnip</a> - Handy Screenshot App for Mac</li>
<li><a href="https://github.com/ripperhe/Bob">Bob</a> - Bob 是一款 Mac 端翻译软件，支持划词翻译、截图翻译以及手动输入翻译。</li>
<li><a href="https://github.com/gbammc/Thor">thor</a> - Switch the right application ASAP.</li>
<li><a href="https://getkap.co" rel="nofollow">Kap</a> - An open-source screen recorder built with web technology</li>
<li><a href="https://imageoptim.com/mac" rel="nofollow">ImageOptim</a> - Removes bloated metadata. Saves disk space &amp; bandwidth by compressing images without losing quality.</li>
<li><a href="https://setapp.com/apps/istat-menus" rel="nofollow">iStat Menus</a> - An advanced system monitor for your menubar.</li>
<li><a href="https://iterm2.com/" rel="nofollow">iTerm2</a> - iTerm2 is a replacement for Terminal and the successor to iTerm.</li>
<li><a href="https://maccy.app/" rel="nofollow">Maccy</a> - Clipboard manager for macOS which does one job - keep your copy history at hand. Period.</li>
<li><a href="https://github.com/dwarvesf/hidden">Hidden Bar</a> - An ultra-light MacOS utility that helps hide menu bar icons</li>
<li><a href="https://github.com/rxhanson/Rectangle">Rectangle</a> - Move and resize windows on macOS with keyboard shortcuts and snap areas.</li>
<li><a href="https://dropoverapp.com/" rel="nofollow">Dropover</a> - Dropover is a utility that makes it easier to manage and move content between folders, applications, windows and workspaces using Drag and Drop.</li>
<li><a href="https://github.com/sindresorhus/System-Color-Picker">System Color Picker</a> - The macOS color picker as an app with more features</li>
<li><a href="https://iina.io" rel="nofollow">IINA</a> - The modern media player for macOS.</li>
<li><a href="https://github.com/pock/pock">Pock</a> - Widgets manager for MacBook Touch Bar</li>
<li><a href="https://github.com/mas-cli/mas">mas</a> - <g-emoji class="g-emoji" alias="package" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4e6.png">📦</g-emoji> Mac App Store command line interface</li>
<li><a href="https://sindresorhus.com/plash" rel="nofollow">Plash</a> - Make any website your desktop wallpaper</li>
<li><a href="https://culturedcode.com/things" rel="nofollow">Things</a> - The all-new Things. Your to-do list for Mac &amp; iOS</li>
<li><a href="https://apps.apple.com/cn/app/runcat/id1429033973?mt=12" rel="nofollow">Runcat</a> - The cat takes up residence in your Mac's menu bar, and he just keeps running!</li>
<li><a href="https://www.marginnote.com/" rel="nofollow">MarginNote</a> - A brand new e-reader to better study and digest your books.</li>
</ul>]]></description>
</item>
<item>
  <title><![CDATA[Awesome Dev Tools]]></title>
  <link>https://github.com/lencx/dev/discussions/9</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/9</guid>
  <pubDate>2022-06-11</pubDate>
  <description><![CDATA[<h2 dir="auto">在线工具</h2>
<h3 dir="auto">辅助</h3>
<ul dir="auto">
<li><a href="https://carbon.now.sh/" rel="nofollow">Carbon</a> - 将源代码制作成精美图片来分享
<ul dir="auto">
<li><a href="https://codeimg.io/" rel="nofollow">Codeimg.io</a> - Create and share beautiful images of your source code.</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=adpyke.codesnap" rel="nofollow">CodeSnap</a> - Take beautiful screenshots of your code</li>
<li><a href="https://ray.so/" rel="nofollow">Create beautiful images of your code</a> - Turn your code into beautiful images. Choose from a range of syntax colors, hide or show the background, and toggle between a dark and light window.</li>
<li><a href="https://codekeep.io/" rel="nofollow">Codekeep</a> - Codekeep lets you store and share bits of code and text with other users. Snippets can be organized into folders/labels for instant reuse. We took the best parts from Google Keep and Github to Organize your code snippets.</li>
</ul>
</li>
<li><a href="https://excalidraw.com/" rel="nofollow">Excalidraw</a> - 用于绘制手绘图的虚拟白板</li>
<li><a href="https://undraw.co/illustrations" rel="nofollow">unDraw</a> - 开源免费的精美插画，支持换肤</li>
<li><a href="https://www.remove.bg/" rel="nofollow">removebg</a> - 删除图片背景</li>
<li><a href="https://shields.io/" rel="nofollow">Shields.io</a> - 开源项目的质量元数据徽章</li>
</ul>
<h3 dir="auto">开发</h3>
<ul dir="auto">
<li><a href="https://any86.github.io/any-rule/" rel="nofollow">正则大全</a> - 常用正则大全, 支持 web / vscode / idea / Alfred Workflow 多平台</li>
<li><a href="https://jex.im/regulex/#!flags=&amp;re=%5E(a%7Cb)*%3F%24" rel="nofollow">Regulex</a> - JavaScript 正则表达式可视化工具</li>
</ul>
<hr>
<h2 dir="auto">参考资料</h2>
<ul dir="auto">
<li><a href="https://github.com/lencx/awesome/blob/main/Tools.md">lencx/awesome Tools</a></li>
</ul>]]></description>
</item>
<item>
  <title><![CDATA[Event loop：宏任务与微任务]]></title>
  <link>https://github.com/lencx/dev/discussions/7</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/7</guid>
  <pubDate>2022-07-25</pubDate>
  <description><![CDATA[<h2 dir="auto">事件循环</h2>
<p dir="auto">在计算机领域中事件循环（event loop），又称为消息分发器（message dispatcher）、消息循环（message loop）、消息泵（message pump）或运行循环（run loop），是一种程序构造或设计模式，负责等待并分发程序中的事件或消息。它的工作方式是向内部或者外部的“事件提供方”发出请求（请求通常会被阻塞，直到有新事件产生），待请求被处理后调用所获得的事件对应的回调函数（即“分发事件”）。</p>
<p dir="auto">事件循环可以与<a href="https://zh.wikipedia.org/wiki/%E5%8F%8D%E5%BA%94%E5%99%A8%E6%A8%A1%E5%BC%8F" rel="nofollow">反应器</a>（reactor）结合使用，只要事件提供方采用可以被 poll（指类似 <a href="https://zh.wikipedia.org/wiki/Select_(Unix)" rel="nofollow">select</a>、<a href="https://zh.wikipedia.org/wiki/Epoll" rel="nofollow">epoll</a> 的系统调用，不是指<a href="https://zh.wikipedia.org/wiki/%E8%BC%AA%E8%A9%A2" rel="nofollow">轮询</a>）的文件接口。事件循环几乎总是与消息发起方异步地执行。</p>
<p dir="auto">当一个事件循环构成程序的中心<a href="https://zh.wikipedia.org/wiki/%E6%8E%A7%E5%88%B6%E6%B5%81%E7%A8%8B" rel="nofollow">控制流</a>时（通常是这样），可以称之为主循环或者主事件循环。这些名称是合适的，因为这样的事件循环位于程序控制流的最顶层。</p>
<p dir="auto">事件循环是实现进程间通信的方法之一。</p>
<h2 dir="auto">JS 中的事件循环</h2>
<blockquote>
<p dir="auto">事件循环的概念非常简单。有一个无限循环，JavaScript 引擎等待任务，执行它们然后休眠，等待更多任务。</p>
</blockquote>
<ul dir="auto">
<li>宏任务： <a href="https://developer.mozilla.org/docs/Web/API/WindowTimers/setTimeout" rel="nofollow">setTimeout</a>、<a href="https://developer.mozilla.org/docs/Web/API/WindowTimers/setInterval" rel="nofollow">setInterval</a>、<a href="https://developer.mozilla.org/docs/Web/API/Window/setImmediate" rel="nofollow">setImmediate</a>、<a href="https://developer.mozilla.org/docs/Web/API/window/requestAnimationFrame" rel="nofollow">requestAnimationFrame</a>、<a href="https://developer.mozilla.org/docs/Mozilla/Projects/NSPR/Reference/I_O_Functions" rel="nofollow">I/O</a>、UI 渲染</li>
<li>微任务： <a href="https://nodejs.org/zh-cn/docs/guides/event-loop-timers-and-nexttick/" rel="nofollow">process.nextTick</a>、<a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise" rel="nofollow">Promises</a>、<a href="https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/queueMicrotask" rel="nofollow">queueMicrotask</a>、<a href="https://developer.mozilla.org/docs/Web/API/MutationObserver" rel="nofollow">MutationObserver</a></li>
</ul>
<h2 dir="auto">Node.js</h2>
<h3 dir="auto">什么是事件循环 (What is the Event Loop)?</h3>
<p dir="auto">事件循环是 Node.js 处理非阻塞 I/O 操作的机制——尽管 JavaScript 是单线程处理的——当有可能的时候，它们会把操作转移到系统内核中去。<br>
目前大多数内核都是多线程的，它们可在后台处理多种操作。当其中的一个操作完成的时候，内核通知 Node.js 将适合的回调函数添加到<code class="notranslate">轮询</code>队列中等待时机执行。</p>
<h3 dir="auto">事件循环机制解析 (Event Loop Explained)</h3>
<p dir="auto">当 Node.js 启动后，它会初始化事件循环，处理已提供的输入脚本（或丢入到 <a href="https://nodejs.org/api/repl.html#repl_repl" rel="nofollow">REPL</a>），它可能会调用一些异步的 API、调度定时器，或者调用 process.nextTick()，然后开始处理事件循环。</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="# 事件循环操作顺序的简化概览

# 1. 每个框为事件循环机制的一个阶段
# 2. 每个阶段都有一个 FIFO 队列来执行回调

   ┌───────────────────────────┐
┌─&gt;│           timers          │
│  └─────────────┬─────────────┘
│  ┌─────────────┴─────────────┐
│  │     pending callbacks     │
│  └─────────────┬─────────────┘
│  ┌─────────────┴─────────────┐
│  │       idle, prepare       │
│  └─────────────┬─────────────┘      ┌───────────────┐
│  ┌─────────────┴─────────────┐      │   incoming:   │
│  │           poll            │&lt;─────┤  connections, │
│  └─────────────┬─────────────┘      │   data, etc.  │
│  ┌─────────────┴─────────────┐      └───────────────┘
│  │           check           │
│  └─────────────┬─────────────┘
│  ┌─────────────┴─────────────┐
└──┤      close callbacks      │
   └───────────────────────────┘"><pre><span class="pl-c"><span class="pl-c">#</span> 事件循环操作顺序的简化概览</span>

<span class="pl-c"><span class="pl-c">#</span> 1. 每个框为事件循环机制的一个阶段</span>
<span class="pl-c"><span class="pl-c">#</span> 2. 每个阶段都有一个 FIFO 队列来执行回调</span>

   ┌───────────────────────────┐
┌─<span class="pl-k">&gt;</span>│           timers          │
│  └─────────────┬─────────────┘
│  ┌─────────────┴─────────────┐
│  │     pending callbacks     │
│  └─────────────┬─────────────┘
│  ┌─────────────┴─────────────┐
│  │       idle, prepare       │
│  └─────────────┬─────────────┘      ┌───────────────┐
│  ┌─────────────┴─────────────┐      │   incoming:   │
│  │           poll            │<span class="pl-k">&lt;</span>─────┤  connections, │
│  └─────────────┬─────────────┘      │   data, etc.  │
│  ┌─────────────┴─────────────┐      └───────────────┘
│  │           check           │
│  └─────────────┬─────────────┘
│  ┌─────────────┴─────────────┐
└──┤      close callbacks      │
   └───────────────────────────┘</pre></div>
<ul dir="auto">
<li><strong><code class="notranslate">timers</code></strong>: 定时器 - 本阶段执行已经被 <code class="notranslate">setTimeout()</code> 和 <code class="notranslate">setInterval()</code> 的调度回调函数。</li>
<li><strong><code class="notranslate">pending callbacks</code></strong>: 待定回调 - 执行延迟到下一个循环迭代的 I/O 回调。</li>
<li><strong><code class="notranslate">idle, prepare</code></strong>: 仅系统内部使用。</li>
<li><strong><code class="notranslate">poll</code></strong>: 轮询 - 检索新的 I/O 事件;执行与 I/O 相关的回调（几乎所有情况下，除了关闭的回调函数，那些由计时器和 <code class="notranslate">setImmediate()</code> 调度的之外），其余情况 node 将在适当的时候在此阻塞。此阶段有两个重要功能：
<ol dir="auto">
<li>计算应该阻塞和轮询 I/O 的时间。</li>
<li>然后，处理 <code class="notranslate">轮询</code> 队列里的事件。</li>
</ol>
</li>
<li><strong><code class="notranslate">check</code></strong>: 检测 - <code class="notranslate">setImmediate()</code> 回调函数在这里执行。</li>
<li><strong><code class="notranslate">close callbacks</code></strong>: 关闭的回调函数 - 一些关闭的回调函数，如：<code class="notranslate">socket.on('close', ...)</code>。</li>
</ul>
<p dir="auto">在每次运行的事件循环之间，Node.js 检查它是否在等待任何异步 I/O 或计时器，如果没有的话，则完全关闭。</p>
<hr>
<h2 dir="auto">参考资料</h2>
<ul dir="auto">
<li><a href="https://en.wikipedia.org/wiki/Event_loop" rel="nofollow">wiki  Event loop</a></li>
<li><a href="https://stackoverflow.com/questions/25915634/difference-between-microtask-and-macrotask-within-an-event-loop-context" rel="nofollow">Difference between microtask and macrotask within an event loop context</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop" rel="nofollow">[MDN] 并发模型与事件循环</a></li>
<li><a href="https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/" rel="nofollow">The Node.js Event Loop, Timers, and process.nextTick()</a></li>
<li><a href="https://blog.sessionstack.com/how-javascript-works-event-loop-and-the-rise-of-async-programming-5-ways-to-better-coding-with-2f077c4438b5" rel="nofollow">How JavaScript works: Event loop and the rise of Async programming + 5 ways to better coding with async/await</a></li>
</ul>]]></description>
</item>
<item>
  <title><![CDATA[Awesome Miniprogram]]></title>
  <link>https://github.com/lencx/dev/discussions/38</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/38</guid>
  <pubDate>2022-06-20</pubDate>
  <description><![CDATA[<ul dir="auto">
<li><a href="https://github.com/justjavac/awesome-wechat-weapp">微信小程序开发资源汇总</a> - 收集了微信小程序开发过程中会使用到的资料、问题以及第三方组件库。不是关于如何学习微信小程序的入门指南，也非参考手册，只是一些资料的整理。</li>
</ul>]]></description>
</item>
<item>
  <title><![CDATA[什么是算法？]]></title>
  <link>https://github.com/lencx/dev/discussions/31</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/31</guid>
  <pubDate>2022-06-20</pubDate>
  <description><![CDATA[<h2 dir="auto">什么是好的算法</h2>
<ul dir="auto">
<li>正确性（Correctness）</li>
<li>效率（Efficiency）</li>
</ul>]]></description>
</item>
<item>
  <title><![CDATA[开发那些事儿]]></title>
  <link>https://github.com/lencx/dev/discussions/1</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/1</guid>
  <pubDate>2022-05-10</pubDate>
  <description><![CDATA[<blockquote>
<p dir="auto">关于开发的一切，这里包含基础，资源，面试等等。</p>
</blockquote>
<p dir="auto">网站：<a href="https://dev.nofwl.com" rel="nofollow">dev.nofwl.com</a></p>]]></description>
</item>
<item>
  <title><![CDATA[this 关键字详解]]></title>
  <link>https://github.com/lencx/dev/discussions/25</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/25</guid>
  <pubDate>2022-03-30</pubDate>
  <description><![CDATA[<h2 dir="auto">含义(Meaning)</h2>
<blockquote>
<p dir="auto">在构造函数内部需要使用到<code class="notranslate">this</code>关键字。那么，<code class="notranslate">this</code>关键字到底是什么意思？<br>
<code class="notranslate">this</code>指向当前的运行环境：在JavaScript中，所有的函数都是在某个运行环境中运行，<code class="notranslate">this</code>就是这个运行环境。对JavaScript语言来说，一切皆对象，运行的环境也是对象，所以可以理解为所有的函数总是在某个对象之中运行，<code class="notranslate">this</code>就指向这个对象。<em>但是JavaScript支持运行环境动态切换，也就是说，this的指向是动态的，没有办法可以事先确定到底指向哪个对象</em></p>
<p dir="auto">例：有一个函数<code class="notranslate">xOfVal</code>，同时充当<code class="notranslate">a</code>对象和<code class="notranslate">b</code>对象的<code class="notranslate">say</code>方法，用于打印当前运行环境中<code class="notranslate">x</code>变量的值。JavaScript允许函数<code class="notranslate">xOfVal</code>的运行环境动态切换，即一会属于<code class="notranslate">a</code>对象，一会属于<code class="notranslate">b</code>对象，这就需要靠<code class="notranslate">this</code>关键字来办到</p>
</blockquote>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="function xOfVal() {console.log(this.x)}
var a = {x: 5}
var b = {x: 7}
a.say = xOfVal
b.say = xOfVal
a.say() // 5
b.say() // 7"><pre><span class="pl-k">function</span> <span class="pl-en">xOfVal</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span><span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-smi">this</span><span class="pl-kos">.</span><span class="pl-c1">x</span><span class="pl-kos">)</span><span class="pl-kos">}</span>
<span class="pl-k">var</span> <span class="pl-s1">a</span> <span class="pl-c1">=</span> <span class="pl-kos">{</span><span class="pl-c1">x</span>: <span class="pl-c1">5</span><span class="pl-kos">}</span>
<span class="pl-k">var</span> <span class="pl-s1">b</span> <span class="pl-c1">=</span> <span class="pl-kos">{</span><span class="pl-c1">x</span>: <span class="pl-c1">7</span><span class="pl-kos">}</span>
<span class="pl-s1">a</span><span class="pl-kos">.</span><span class="pl-c1">say</span> <span class="pl-c1">=</span> <span class="pl-s1">xOfVal</span>
<span class="pl-s1">b</span><span class="pl-kos">.</span><span class="pl-c1">say</span> <span class="pl-c1">=</span> <span class="pl-s1">xOfVal</span>
<span class="pl-s1">a</span><span class="pl-kos">.</span><span class="pl-en">say</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-c">// 5</span>
<span class="pl-s1">b</span><span class="pl-kos">.</span><span class="pl-en">say</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-c">// 7</span></pre></div>
<p dir="auto">当<code class="notranslate">xOfVal</code>属于对象<code class="notranslate">a</code>时，<code class="notranslate">this</code>指向<code class="notranslate">a</code>；当<code class="notranslate">xOfVal</code>属于对象<code class="notranslate">b</code>时， <code class="notranslate">this</code>指向<code class="notranslate">b</code>，<em>因此打印出不同的值</em>。由于<code class="notranslate">this</code>的指向是可变的，所以可以手动切换运行环境，以达到某种特定的目的。</p>
<p dir="auto"><em>结论</em>：<em><strong>如果一个函数在全局环境中运行，<code class="notranslate">this</code>就是指向顶层对象(浏览器中为<code class="notranslate">window</code>对象)；如果一个函数作为某个对象的方法运行，<code class="notranslate">this</code>就是指向那个对象。 可以近似认为，<code class="notranslate">this</code>事所有函数运行时的一个隐藏参数，决定了函数的运行环境。</strong></em></p>
<h2 dir="auto">使用场合(Using The Occasion)</h2>
<h3 dir="auto">全局环境(Global Context)</h3>
<blockquote>
<p dir="auto">在全局环境中使用<code class="notranslate">this</code>，它指的时顶层对象window。</p>
</blockquote>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="console.log(this === window) // true
function fn() {
    console.log(this === window)
}
fn() // true"><pre><span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-smi">this</span> <span class="pl-c1">===</span> <span class="pl-smi">window</span><span class="pl-kos">)</span> <span class="pl-c">// true</span>
<span class="pl-k">function</span> <span class="pl-en">fn</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
    <span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-smi">this</span> <span class="pl-c1">===</span> <span class="pl-smi">window</span><span class="pl-kos">)</span>
<span class="pl-kos">}</span>
<span class="pl-en">fn</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-c">// true</span></pre></div>
<p dir="auto"><em>结论</em>： <em><strong><code class="notranslate">this</code>不论是不是在函数内部，只要是在全局环境下运行，<code class="notranslate">this</code>就是指向全局对象<code class="notranslate">window</code></strong></em></p>
<h3 dir="auto">构造函数(Constructor)</h3>
<blockquote>
<p dir="auto">在构造函数中使用<code class="notranslate">this</code>，它指的是实例对象</p>
</blockquote>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="// 构造函数A
var A = function(x) {
    // this指向实例对象
    // 所以在构造函数内部定义`this.x`，就相当于定义实例对象有一个`x`属性
    this.x = x
}
// `say`方法可以返回这个`x`属性
A.prototype.say = function() {
    return this.x
}
var a = new A(3)
a.x // 3
a.say() // 3"><pre><span class="pl-c">// 构造函数A</span>
<span class="pl-k">var</span> <span class="pl-v">A</span> <span class="pl-c1">=</span> <span class="pl-k">function</span><span class="pl-kos">(</span><span class="pl-s1">x</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
    <span class="pl-c">// this指向实例对象</span>
    <span class="pl-c">// 所以在构造函数内部定义`this.x`，就相当于定义实例对象有一个`x`属性</span>
    <span class="pl-smi">this</span><span class="pl-kos">.</span><span class="pl-c1">x</span> <span class="pl-c1">=</span> <span class="pl-s1">x</span>
<span class="pl-kos">}</span>
<span class="pl-c">// `say`方法可以返回这个`x`属性</span>
<span class="pl-v">A</span><span class="pl-kos">.</span><span class="pl-c1">prototype</span><span class="pl-kos">.</span><span class="pl-en">say</span> <span class="pl-c1">=</span> <span class="pl-k">function</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
    <span class="pl-k">return</span> <span class="pl-smi">this</span><span class="pl-kos">.</span><span class="pl-c1">x</span>
<span class="pl-kos">}</span>
<span class="pl-k">var</span> <span class="pl-s1">a</span> <span class="pl-c1">=</span> <span class="pl-k">new</span> <span class="pl-v">A</span><span class="pl-kos">(</span><span class="pl-c1">3</span><span class="pl-kos">)</span>
<span class="pl-s1">a</span><span class="pl-kos">.</span><span class="pl-c1">x</span> <span class="pl-c">// 3</span>
<span class="pl-s1">a</span><span class="pl-kos">.</span><span class="pl-en">say</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-c">// 3</span></pre></div>
<h3 dir="auto">对象方法(Object Method)</h3>
<ul dir="auto">
<li>当<code class="notranslate">a</code>对象的方法被赋予<code class="notranslate">b</code>对象，该方法就变成了普通函数。其中的<code class="notranslate">this</code>就从指向<code class="notranslate">a</code>对象变成指向<code class="notranslate">b</code>对象。这就是<code class="notranslate">this</code>取决于运行时所在的对象的含义。<em>需要特别小心。如果将某个对象的方法赋值给另一个对象，会改变<code class="notranslate">this</code>的指向。</em></li>
</ul>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="var a = {
    // `prop`是`a`对象的属性
    prop: 'hello',
    // `f`是`a`对象的方法
    f: function() {
        return this.prop
    }
}
a.f() // hello
var b = new Object()
b.prop = 'hello, lencx'
// `f`是`a`对象的方法
b.f = a.f
// 如果在`b`对象上调用这个方法。`f`方法中的`this`就会指向`b`
// 说明JavaScript函数的运行环境完全是动态绑定的，可以在运行时切换。
b.f() // hello, lencx"><pre><span class="pl-k">var</span> <span class="pl-s1">a</span> <span class="pl-c1">=</span> <span class="pl-kos">{</span>
    <span class="pl-c">// `prop`是`a`对象的属性</span>
    <span class="pl-c1">prop</span>: <span class="pl-s">'hello'</span><span class="pl-kos">,</span>
    <span class="pl-c">// `f`是`a`对象的方法</span>
    <span class="pl-en">f</span>: <span class="pl-k">function</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
        <span class="pl-k">return</span> <span class="pl-smi">this</span><span class="pl-kos">.</span><span class="pl-c1">prop</span>
    <span class="pl-kos">}</span>
<span class="pl-kos">}</span>
<span class="pl-s1">a</span><span class="pl-kos">.</span><span class="pl-en">f</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-c">// hello</span>
<span class="pl-k">var</span> <span class="pl-s1">b</span> <span class="pl-c1">=</span> <span class="pl-k">new</span> <span class="pl-v">Object</span><span class="pl-kos">(</span><span class="pl-kos">)</span>
<span class="pl-s1">b</span><span class="pl-kos">.</span><span class="pl-c1">prop</span> <span class="pl-c1">=</span> <span class="pl-s">'hello, lencx'</span>
<span class="pl-c">// `f`是`a`对象的方法</span>
<span class="pl-s1">b</span><span class="pl-kos">.</span><span class="pl-c1">f</span> <span class="pl-c1">=</span> <span class="pl-s1">a</span><span class="pl-kos">.</span><span class="pl-c1">f</span>
<span class="pl-c">// 如果在`b`对象上调用这个方法。`f`方法中的`this`就会指向`b`</span>
<span class="pl-c">// 说明JavaScript函数的运行环境完全是动态绑定的，可以在运行时切换。</span>
<span class="pl-s1">b</span><span class="pl-kos">.</span><span class="pl-en">f</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-c">// hello, lencx</span></pre></div>
<ul dir="auto">
<li>如果不想改变<code class="notranslate">this</code>的指向，可以将<code class="notranslate">b.f</code>改写为</li>
</ul>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="b.f = function() {
    // `f`方法是在`a`对象下运行，所以`this`指向`a`
    return a.f()
}
b.f() // hello"><pre><span class="pl-s1">b</span><span class="pl-kos">.</span><span class="pl-en">f</span> <span class="pl-c1">=</span> <span class="pl-k">function</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
    <span class="pl-c">// `f`方法是在`a`对象下运行，所以`this`指向`a`</span>
    <span class="pl-k">return</span> <span class="pl-s1">a</span><span class="pl-kos">.</span><span class="pl-en">f</span><span class="pl-kos">(</span><span class="pl-kos">)</span>
<span class="pl-kos">}</span>
<span class="pl-s1">b</span><span class="pl-kos">.</span><span class="pl-en">f</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-c">// hello</span></pre></div>
<ul dir="auto">
<li>有时，某个方法位于多层对象的内部，这时如果为了简化书写，把该方法赋值给一个变量，往往会得到意想不到的结果。</li>
</ul>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="var a = {
    b: {
        prop: 'hello, lencx',
        say: function() {
            console.log(this.prop)
        }
    }
}
// `say`属于多层对象内部的一个方法。为求简写，将其赋值给`hello`变量
var hello = a.b.say
// 调用时，`this`指向全局对象(window)
hello() // undefined
// 为了避免这个问题，可以将`say`方法所在的对象赋值给`hello2`
var hello2 = a.b
// 调用时，`this`指向不变，即指向对象`b`
hello2.say()"><pre><span class="pl-k">var</span> <span class="pl-s1">a</span> <span class="pl-c1">=</span> <span class="pl-kos">{</span>
    <span class="pl-c1">b</span>: <span class="pl-kos">{</span>
        <span class="pl-c1">prop</span>: <span class="pl-s">'hello, lencx'</span><span class="pl-kos">,</span>
        <span class="pl-en">say</span>: <span class="pl-k">function</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
            <span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-smi">this</span><span class="pl-kos">.</span><span class="pl-c1">prop</span><span class="pl-kos">)</span>
        <span class="pl-kos">}</span>
    <span class="pl-kos">}</span>
<span class="pl-kos">}</span>
<span class="pl-c">// `say`属于多层对象内部的一个方法。为求简写，将其赋值给`hello`变量</span>
<span class="pl-k">var</span> <span class="pl-s1">hello</span> <span class="pl-c1">=</span> <span class="pl-s1">a</span><span class="pl-kos">.</span><span class="pl-c1">b</span><span class="pl-kos">.</span><span class="pl-c1">say</span>
<span class="pl-c">// 调用时，`this`指向全局对象(window)</span>
<span class="pl-s1">hello</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-c">// undefined</span>
<span class="pl-c">// 为了避免这个问题，可以将`say`方法所在的对象赋值给`hello2`</span>
<span class="pl-k">var</span> <span class="pl-s1">hello2</span> <span class="pl-c1">=</span> <span class="pl-s1">a</span><span class="pl-kos">.</span><span class="pl-c1">b</span>
<span class="pl-c">// 调用时，`this`指向不变，即指向对象`b`</span>
<span class="pl-s1">hello2</span><span class="pl-kos">.</span><span class="pl-en">say</span><span class="pl-kos">(</span><span class="pl-kos">)</span></pre></div>
<h3 dir="auto">箭头函数(Arrow functions)</h3>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="var foo = (() =&gt; this)
// 在全局环境中调用`foo`，`this`指向`window`
console.log(foo() === window) // true
var a = {}
// 作为`a`对象的`fn`方法调用
a.fn = foo
console.log(a.fn() === window) // true
// 使用`call`
console.log(foo.call(a) === window) // true
// 使用`bind`
foo = foo.bind(a)
console.log(foo() === window) // true"><pre><span class="pl-k">var</span> <span class="pl-s1">foo</span> <span class="pl-c1">=</span> <span class="pl-kos">(</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-c1">=&gt;</span> <span class="pl-smi">this</span><span class="pl-kos">)</span>
<span class="pl-c">// 在全局环境中调用`foo`，`this`指向`window`</span>
<span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-s1">foo</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-c1">===</span> <span class="pl-smi">window</span><span class="pl-kos">)</span> <span class="pl-c">// true</span>
<span class="pl-k">var</span> <span class="pl-s1">a</span> <span class="pl-c1">=</span> <span class="pl-kos">{</span><span class="pl-kos">}</span>
<span class="pl-c">// 作为`a`对象的`fn`方法调用</span>
<span class="pl-s1">a</span><span class="pl-kos">.</span><span class="pl-c1">fn</span> <span class="pl-c1">=</span> <span class="pl-s1">foo</span>
<span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-s1">a</span><span class="pl-kos">.</span><span class="pl-en">fn</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-c1">===</span> <span class="pl-smi">window</span><span class="pl-kos">)</span> <span class="pl-c">// true</span>
<span class="pl-c">// 使用`call`</span>
<span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-s1">foo</span><span class="pl-kos">.</span><span class="pl-en">call</span><span class="pl-kos">(</span><span class="pl-s1">a</span><span class="pl-kos">)</span> <span class="pl-c1">===</span> <span class="pl-smi">window</span><span class="pl-kos">)</span> <span class="pl-c">// true</span>
<span class="pl-c">// 使用`bind`</span>
<span class="pl-s1">foo</span> <span class="pl-c1">=</span> <span class="pl-s1">foo</span><span class="pl-kos">.</span><span class="pl-en">bind</span><span class="pl-kos">(</span><span class="pl-s1">a</span><span class="pl-kos">)</span>
<span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-s1">foo</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-c1">===</span> <span class="pl-smi">window</span><span class="pl-kos">)</span> <span class="pl-c">// true</span></pre></div>
<p dir="auto"><em>结论</em>：<em><strong>无论使用何种办法，<code class="notranslate">foo</code>方法的<code class="notranslate">this</code>指向都是创建时的指向(window)。这个结论同样适用于在其他函数内部创建的箭头函数。<code class="notranslate">this</code>指向创建它的对象。</strong></em></p>
<p dir="auto">例：</p>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="var obj = {foo: function() {
    var x = (() =&gt; this)
    // var x = function() {
    //     return this
    // }
    return x
}}
var fn = obj.foo()
console.log(fn() === obj) // true
// 但是请注意，如果将`foo`所在的对象赋值给一个变量`fn2`，而不是调用`foo`方法
var fn2 = obj.foo
// 然后调用该方法，则`this`指向`window`，因为它遵循所在的对象运行环境
console.log(fn2()() === window) // true"><pre><span class="pl-k">var</span> <span class="pl-s1">obj</span> <span class="pl-c1">=</span> <span class="pl-kos">{</span><span class="pl-en">foo</span>: <span class="pl-k">function</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
    <span class="pl-k">var</span> <span class="pl-s1">x</span> <span class="pl-c1">=</span> <span class="pl-kos">(</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-c1">=&gt;</span> <span class="pl-smi">this</span><span class="pl-kos">)</span>
    <span class="pl-c">// var x = function() {</span>
    <span class="pl-c">//     return this</span>
    <span class="pl-c">// }</span>
    <span class="pl-k">return</span> <span class="pl-s1">x</span>
<span class="pl-kos">}</span><span class="pl-kos">}</span>
<span class="pl-k">var</span> <span class="pl-s1">fn</span> <span class="pl-c1">=</span> <span class="pl-s1">obj</span><span class="pl-kos">.</span><span class="pl-en">foo</span><span class="pl-kos">(</span><span class="pl-kos">)</span>
<span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-s1">fn</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-c1">===</span> <span class="pl-s1">obj</span><span class="pl-kos">)</span> <span class="pl-c">// true</span>
<span class="pl-c">// 但是请注意，如果将`foo`所在的对象赋值给一个变量`fn2`，而不是调用`foo`方法</span>
<span class="pl-k">var</span> <span class="pl-s1">fn2</span> <span class="pl-c1">=</span> <span class="pl-s1">obj</span><span class="pl-kos">.</span><span class="pl-c1">foo</span>
<span class="pl-c">// 然后调用该方法，则`this`指向`window`，因为它遵循所在的对象运行环境</span>
<span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-s1">fn2</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-c1">===</span> <span class="pl-smi">window</span><span class="pl-kos">)</span> <span class="pl-c">// true</span></pre></div>
<h3 dir="auto">对象定义新属性方法(Getter Or Setter)</h3>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="function sum() {
    return this.x + this.y + this.z
}
var numObj = {
    x: 3,
    y: 5,
    z: 7,
    get average() {
        return (this.x + this.y + this.z) / 3
    }
}
Object.defineProperty(numObj, 'sum', {
    get: sum,
    enumerable: true,
    configurable: true
})
console.log(numObj.average, numObj.sum) // 5 15"><pre><span class="pl-k">function</span> <span class="pl-en">sum</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
    <span class="pl-k">return</span> <span class="pl-smi">this</span><span class="pl-kos">.</span><span class="pl-c1">x</span> <span class="pl-c1">+</span> <span class="pl-smi">this</span><span class="pl-kos">.</span><span class="pl-c1">y</span> <span class="pl-c1">+</span> <span class="pl-smi">this</span><span class="pl-kos">.</span><span class="pl-c1">z</span>
<span class="pl-kos">}</span>
<span class="pl-k">var</span> <span class="pl-s1">numObj</span> <span class="pl-c1">=</span> <span class="pl-kos">{</span>
    <span class="pl-c1">x</span>: <span class="pl-c1">3</span><span class="pl-kos">,</span>
    <span class="pl-c1">y</span>: <span class="pl-c1">5</span><span class="pl-kos">,</span>
    <span class="pl-c1">z</span>: <span class="pl-c1">7</span><span class="pl-kos">,</span>
    <span class="pl-k">get</span> <span class="pl-en">average</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
        <span class="pl-k">return</span> <span class="pl-kos">(</span><span class="pl-smi">this</span><span class="pl-kos">.</span><span class="pl-c1">x</span> <span class="pl-c1">+</span> <span class="pl-smi">this</span><span class="pl-kos">.</span><span class="pl-c1">y</span> <span class="pl-c1">+</span> <span class="pl-smi">this</span><span class="pl-kos">.</span><span class="pl-c1">z</span><span class="pl-kos">)</span> <span class="pl-c1">/</span> <span class="pl-c1">3</span>
    <span class="pl-kos">}</span>
<span class="pl-kos">}</span>
<span class="pl-v">Object</span><span class="pl-kos">.</span><span class="pl-en">defineProperty</span><span class="pl-kos">(</span><span class="pl-s1">numObj</span><span class="pl-kos">,</span> <span class="pl-s">'sum'</span><span class="pl-kos">,</span> <span class="pl-kos">{</span>
    <span class="pl-c1">get</span>: <span class="pl-s1">sum</span><span class="pl-kos">,</span>
    <span class="pl-c1">enumerable</span>: <span class="pl-c1">true</span><span class="pl-kos">,</span>
    <span class="pl-c1">configurable</span>: <span class="pl-c1">true</span>
<span class="pl-kos">}</span><span class="pl-kos">)</span>
<span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-s1">numObj</span><span class="pl-kos">.</span><span class="pl-c1">average</span><span class="pl-kos">,</span> <span class="pl-s1">numObj</span><span class="pl-kos">.</span><span class="pl-c1">sum</span><span class="pl-kos">)</span> <span class="pl-c">// 5 15</span></pre></div>
<h3 dir="auto">Node.js</h3>
<p dir="auto">在node.js，<code class="notranslate">this</code>分成两种情况。在全局环境中，<code class="notranslate">this</code>指向全局对象<code class="notranslate">global</code>；在模块环境中，<code class="notranslate">this</code>指向<code class="notranslate">module.exports</code></p>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="// 全局环境中
this === global // true
// 模块环境中
this === module.exports // true"><pre><span class="pl-c">// 全局环境中</span>
<span class="pl-smi">this</span> <span class="pl-c1">===</span> <span class="pl-s1">global</span> <span class="pl-c">// true</span>
<span class="pl-c">// 模块环境中</span>
<span class="pl-smi">this</span> <span class="pl-c1">===</span> <span class="pl-smi">module</span><span class="pl-kos">.</span><span class="pl-c1">exports</span> <span class="pl-c">// true</span></pre></div>
<h2 dir="auto">使用注意事项(Note)</h2>
<h3 dir="auto">避免多层<code class="notranslate">this</code></h3>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="var o = {
    f1: function() {
        console.log(this) // f1
        var f2 = function() {
            console.log(this) // window
        }()
    }
}
o.f1()
// 解决办法:
var o2 = {
    f1: function() {
        console.log(this) // f1
        // 使用`that`对`this`进行固定
        var that = this
        var f2 = function() {
            // 使用`that`代替原来的`this`
            console.log(that) // f1
        }()
    }
}
o2.f1()"><pre><span class="pl-k">var</span> <span class="pl-s1">o</span> <span class="pl-c1">=</span> <span class="pl-kos">{</span>
    <span class="pl-en">f1</span>: <span class="pl-k">function</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
        <span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-smi">this</span><span class="pl-kos">)</span> <span class="pl-c">// f1</span>
        <span class="pl-k">var</span> <span class="pl-s1">f2</span> <span class="pl-c1">=</span> <span class="pl-k">function</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
            <span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-smi">this</span><span class="pl-kos">)</span> <span class="pl-c">// window</span>
        <span class="pl-kos">}</span><span class="pl-kos">(</span><span class="pl-kos">)</span>
    <span class="pl-kos">}</span>
<span class="pl-kos">}</span>
<span class="pl-s1">o</span><span class="pl-kos">.</span><span class="pl-en">f1</span><span class="pl-kos">(</span><span class="pl-kos">)</span>
<span class="pl-c">// 解决办法:</span>
<span class="pl-k">var</span> <span class="pl-s1">o2</span> <span class="pl-c1">=</span> <span class="pl-kos">{</span>
    <span class="pl-en">f1</span>: <span class="pl-k">function</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
        <span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-smi">this</span><span class="pl-kos">)</span> <span class="pl-c">// f1</span>
        <span class="pl-c">// 使用`that`对`this`进行固定</span>
        <span class="pl-k">var</span> <span class="pl-s1">that</span> <span class="pl-c1">=</span> <span class="pl-smi">this</span>
        <span class="pl-k">var</span> <span class="pl-s1">f2</span> <span class="pl-c1">=</span> <span class="pl-k">function</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
            <span class="pl-c">// 使用`that`代替原来的`this`</span>
            <span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-s1">that</span><span class="pl-kos">)</span> <span class="pl-c">// f1</span>
        <span class="pl-kos">}</span><span class="pl-kos">(</span><span class="pl-kos">)</span>
    <span class="pl-kos">}</span>
<span class="pl-kos">}</span>
<span class="pl-s1">o2</span><span class="pl-kos">.</span><span class="pl-en">f1</span><span class="pl-kos">(</span><span class="pl-kos">)</span></pre></div>
<h3 dir="auto">避免数组处理方法中的<code class="notranslate">this</code></h3>
<p dir="auto">数组的<code class="notranslate">map</code>, <code class="notranslate">reduce</code>, <code class="notranslate">some</code>, <code class="notranslate">filter</code>, <code class="notranslate">forEach</code>等方法，允许提供一个函数作为参数。这个函数内部不应该使用<code class="notranslate">this</code>。</p>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="var o = {
    a: 'hello',
    b: ['lencx', 'a1', 'a2'],
    fn: function() {
        this.b.map(function(item) {
            console.log(`${this.a}, ${item}`)
        })
    }
}
// undefined, lencx
// undefined, a1
// undefined, a2
o.fn()
// ------------------------------------------
// 解决办法一：
// 使用中间变量
var o2 = {
    a: 'hello',
    b: ['lencx', 'a1', 'a2'],
    fn: function() {
        var that = this
        this.b.map(function(item) {
            console.log(`${that.a}, ${item}`)
        })
    }
}
// hello, lencx
// hello, a1
// hello, a2
o2.f()
// ------------------------------------------
// 解决办法二：
// 将`this`当作`map`方法的第二个参数，固定它的运行环境
var o3 = {
    a: 'hello',
    b: ['lencx', 'a1', 'a2'],
    fn: function() {
        this.b.map(function(item) {
            console.log(`${this.a}, ${item}`)
        }, this)
    }
}
// hello, lencx
// hello, a1
// hello, a2
o3.fn()"><pre><span class="pl-k">var</span> <span class="pl-s1">o</span> <span class="pl-c1">=</span> <span class="pl-kos">{</span>
    <span class="pl-c1">a</span>: <span class="pl-s">'hello'</span><span class="pl-kos">,</span>
    <span class="pl-c1">b</span>: <span class="pl-kos">[</span><span class="pl-s">'lencx'</span><span class="pl-kos">,</span> <span class="pl-s">'a1'</span><span class="pl-kos">,</span> <span class="pl-s">'a2'</span><span class="pl-kos">]</span><span class="pl-kos">,</span>
    <span class="pl-en">fn</span>: <span class="pl-k">function</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
        <span class="pl-smi">this</span><span class="pl-kos">.</span><span class="pl-c1">b</span><span class="pl-kos">.</span><span class="pl-en">map</span><span class="pl-kos">(</span><span class="pl-k">function</span><span class="pl-kos">(</span><span class="pl-s1">item</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
            <span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-s">`<span class="pl-s1"><span class="pl-kos">${</span><span class="pl-smi">this</span><span class="pl-kos">.</span><span class="pl-c1">a</span><span class="pl-kos">}</span></span>, <span class="pl-s1"><span class="pl-kos">${</span><span class="pl-s1">item</span><span class="pl-kos">}</span></span>`</span><span class="pl-kos">)</span>
        <span class="pl-kos">}</span><span class="pl-kos">)</span>
    <span class="pl-kos">}</span>
<span class="pl-kos">}</span>
<span class="pl-c">// undefined, lencx</span>
<span class="pl-c">// undefined, a1</span>
<span class="pl-c">// undefined, a2</span>
<span class="pl-s1">o</span><span class="pl-kos">.</span><span class="pl-en">fn</span><span class="pl-kos">(</span><span class="pl-kos">)</span>
<span class="pl-c">// ------------------------------------------</span>
<span class="pl-c">// 解决办法一：</span>
<span class="pl-c">// 使用中间变量</span>
<span class="pl-k">var</span> <span class="pl-s1">o2</span> <span class="pl-c1">=</span> <span class="pl-kos">{</span>
    <span class="pl-c1">a</span>: <span class="pl-s">'hello'</span><span class="pl-kos">,</span>
    <span class="pl-c1">b</span>: <span class="pl-kos">[</span><span class="pl-s">'lencx'</span><span class="pl-kos">,</span> <span class="pl-s">'a1'</span><span class="pl-kos">,</span> <span class="pl-s">'a2'</span><span class="pl-kos">]</span><span class="pl-kos">,</span>
    <span class="pl-en">fn</span>: <span class="pl-k">function</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
        <span class="pl-k">var</span> <span class="pl-s1">that</span> <span class="pl-c1">=</span> <span class="pl-smi">this</span>
        <span class="pl-smi">this</span><span class="pl-kos">.</span><span class="pl-c1">b</span><span class="pl-kos">.</span><span class="pl-en">map</span><span class="pl-kos">(</span><span class="pl-k">function</span><span class="pl-kos">(</span><span class="pl-s1">item</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
            <span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-s">`<span class="pl-s1"><span class="pl-kos">${</span><span class="pl-s1">that</span><span class="pl-kos">.</span><span class="pl-c1">a</span><span class="pl-kos">}</span></span>, <span class="pl-s1"><span class="pl-kos">${</span><span class="pl-s1">item</span><span class="pl-kos">}</span></span>`</span><span class="pl-kos">)</span>
        <span class="pl-kos">}</span><span class="pl-kos">)</span>
    <span class="pl-kos">}</span>
<span class="pl-kos">}</span>
<span class="pl-c">// hello, lencx</span>
<span class="pl-c">// hello, a1</span>
<span class="pl-c">// hello, a2</span>
<span class="pl-s1">o2</span><span class="pl-kos">.</span><span class="pl-en">f</span><span class="pl-kos">(</span><span class="pl-kos">)</span>
<span class="pl-c">// ------------------------------------------</span>
<span class="pl-c">// 解决办法二：</span>
<span class="pl-c">// 将`this`当作`map`方法的第二个参数，固定它的运行环境</span>
<span class="pl-k">var</span> <span class="pl-s1">o3</span> <span class="pl-c1">=</span> <span class="pl-kos">{</span>
    <span class="pl-c1">a</span>: <span class="pl-s">'hello'</span><span class="pl-kos">,</span>
    <span class="pl-c1">b</span>: <span class="pl-kos">[</span><span class="pl-s">'lencx'</span><span class="pl-kos">,</span> <span class="pl-s">'a1'</span><span class="pl-kos">,</span> <span class="pl-s">'a2'</span><span class="pl-kos">]</span><span class="pl-kos">,</span>
    <span class="pl-en">fn</span>: <span class="pl-k">function</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
        <span class="pl-smi">this</span><span class="pl-kos">.</span><span class="pl-c1">b</span><span class="pl-kos">.</span><span class="pl-en">map</span><span class="pl-kos">(</span><span class="pl-k">function</span><span class="pl-kos">(</span><span class="pl-s1">item</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
            <span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-s">`<span class="pl-s1"><span class="pl-kos">${</span><span class="pl-smi">this</span><span class="pl-kos">.</span><span class="pl-c1">a</span><span class="pl-kos">}</span></span>, <span class="pl-s1"><span class="pl-kos">${</span><span class="pl-s1">item</span><span class="pl-kos">}</span></span>`</span><span class="pl-kos">)</span>
        <span class="pl-kos">}</span><span class="pl-kos">,</span> <span class="pl-smi">this</span><span class="pl-kos">)</span>
    <span class="pl-kos">}</span>
<span class="pl-kos">}</span>
<span class="pl-c">// hello, lencx</span>
<span class="pl-c">// hello, a1</span>
<span class="pl-c">// hello, a2</span>
<span class="pl-s1">o3</span><span class="pl-kos">.</span><span class="pl-en">fn</span><span class="pl-kos">(</span><span class="pl-kos">)</span></pre></div>
<h3 dir="auto">避免回调函数中的<code class="notranslate">this</code></h3>
<blockquote>
<p dir="auto">回调函数中的<code class="notranslate">this</code>往往会改变指向，最好避免使用</p>
</blockquote>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="var o = new Object()
o.f = function() {
    console.log(this === o)
}
o.f() // true
// `this`不再指向`o`对象，而是指向按钮的DOM对象
// 因为`f`方法是在按钮对象的环境中被调用的
document.querySelector('#btn').addEventListener('click', o.f)"><pre><span class="pl-k">var</span> <span class="pl-s1">o</span> <span class="pl-c1">=</span> <span class="pl-k">new</span> <span class="pl-v">Object</span><span class="pl-kos">(</span><span class="pl-kos">)</span>
<span class="pl-s1">o</span><span class="pl-kos">.</span><span class="pl-en">f</span> <span class="pl-c1">=</span> <span class="pl-k">function</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
    <span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-smi">this</span> <span class="pl-c1">===</span> <span class="pl-s1">o</span><span class="pl-kos">)</span>
<span class="pl-kos">}</span>
<span class="pl-s1">o</span><span class="pl-kos">.</span><span class="pl-en">f</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-c">// true</span>
<span class="pl-c">// `this`不再指向`o`对象，而是指向按钮的DOM对象</span>
<span class="pl-c">// 因为`f`方法是在按钮对象的环境中被调用的</span>
<span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">'#btn'</span><span class="pl-kos">)</span><span class="pl-kos">.</span><span class="pl-en">addEventListener</span><span class="pl-kos">(</span><span class="pl-s">'click'</span><span class="pl-kos">,</span> <span class="pl-s1">o</span><span class="pl-kos">.</span><span class="pl-c1">f</span><span class="pl-kos">)</span></pre></div>
<h2 dir="auto">固定<code class="notranslate">this</code>的方法(Fixed this)</h2>
<p dir="auto"><code class="notranslate">this</code>的动态切换，为JavaScript创造了巨大的灵活性，但也使编程变得困难和模糊。有时需要把<code class="notranslate">this</code>固定下来，避免出现意想不到的情况。JavaScript提供了<code class="notranslate">call</code>, <code class="notranslate">apply</code>, <code class="notranslate">bind</code>三个方法，来切换/固定<code class="notranslate">this</code>的指向。</p>
<h3 dir="auto"><code class="notranslate">call</code>方法</h3>
<blockquote>
<p dir="auto">Syntax: function.call(thisArg, arg1, arg2, ...)<br>
第一个参数<code class="notranslate">thisArg</code>就是<code class="notranslate">this</code>所要指向的对象，之后的参数<code class="notranslate">arg1, arg2, ...</code>则是函数调用时所需的参数。</p>
</blockquote>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="// 例1:
var o = {}
var f = function () {
    return this
}
f() === window // true
f.call(o) === o // true
// 例2:
var num = 111
var num2 = {num: 222}
function sayNum() {
    console.log(this.num)
}
sayNum.call() // 111
sayNum.call(window) // 111
sayNum.call(num2) // 222"><pre><span class="pl-c">// 例1:</span>
<span class="pl-k">var</span> <span class="pl-s1">o</span> <span class="pl-c1">=</span> <span class="pl-kos">{</span><span class="pl-kos">}</span>
<span class="pl-k">var</span> <span class="pl-en">f</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
    <span class="pl-k">return</span> <span class="pl-smi">this</span>
<span class="pl-kos">}</span>
<span class="pl-en">f</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-c1">===</span> <span class="pl-smi">window</span> <span class="pl-c">// true</span>
<span class="pl-en">f</span><span class="pl-kos">.</span><span class="pl-en">call</span><span class="pl-kos">(</span><span class="pl-s1">o</span><span class="pl-kos">)</span> <span class="pl-c1">===</span> <span class="pl-s1">o</span> <span class="pl-c">// true</span>
<span class="pl-c">// 例2:</span>
<span class="pl-k">var</span> <span class="pl-s1">num</span> <span class="pl-c1">=</span> <span class="pl-c1">111</span>
<span class="pl-k">var</span> <span class="pl-s1">num2</span> <span class="pl-c1">=</span> <span class="pl-kos">{</span><span class="pl-c1">num</span>: <span class="pl-c1">222</span><span class="pl-kos">}</span>
<span class="pl-k">function</span> <span class="pl-en">sayNum</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
    <span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-smi">this</span><span class="pl-kos">.</span><span class="pl-c1">num</span><span class="pl-kos">)</span>
<span class="pl-kos">}</span>
<span class="pl-s1">sayNum</span><span class="pl-kos">.</span><span class="pl-en">call</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-c">// 111</span>
<span class="pl-s1">sayNum</span><span class="pl-kos">.</span><span class="pl-en">call</span><span class="pl-kos">(</span><span class="pl-smi">window</span><span class="pl-kos">)</span> <span class="pl-c">// 111</span>
<span class="pl-s1">sayNum</span><span class="pl-kos">.</span><span class="pl-en">call</span><span class="pl-kos">(</span><span class="pl-s1">num2</span><span class="pl-kos">)</span> <span class="pl-c">// 222</span></pre></div>
<p dir="auto"><code class="notranslate">call</code>的应用：调用对象的原生方法</p>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="var obj = {}
obj.hasOwnProperty('map') // false
obj.hasOwnProperty = function() {
    return true
}
obj.hasOwnProperty('map') // true
Object.prototype.hasOwnProperty.call(obj, 'map') // false"><pre><span class="pl-k">var</span> <span class="pl-s1">obj</span> <span class="pl-c1">=</span> <span class="pl-kos">{</span><span class="pl-kos">}</span>
<span class="pl-s1">obj</span><span class="pl-kos">.</span><span class="pl-en">hasOwnProperty</span><span class="pl-kos">(</span><span class="pl-s">'map'</span><span class="pl-kos">)</span> <span class="pl-c">// false</span>
<span class="pl-s1">obj</span><span class="pl-kos">.</span><span class="pl-en">hasOwnProperty</span> <span class="pl-c1">=</span> <span class="pl-k">function</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
    <span class="pl-k">return</span> <span class="pl-c1">true</span>
<span class="pl-kos">}</span>
<span class="pl-s1">obj</span><span class="pl-kos">.</span><span class="pl-en">hasOwnProperty</span><span class="pl-kos">(</span><span class="pl-s">'map'</span><span class="pl-kos">)</span> <span class="pl-c">// true</span>
<span class="pl-v">Object</span><span class="pl-kos">.</span><span class="pl-c1">prototype</span><span class="pl-kos">.</span><span class="pl-c1">hasOwnProperty</span><span class="pl-kos">.</span><span class="pl-en">call</span><span class="pl-kos">(</span><span class="pl-s1">obj</span><span class="pl-kos">,</span> <span class="pl-s">'map'</span><span class="pl-kos">)</span> <span class="pl-c">// false</span></pre></div>
<p dir="auto"><code class="notranslate">hasOwnProperty</code>是<code class="notranslate">obj</code>对象继承的方法，如果这个方法一旦被覆盖，就得不到正确的结果。<code class="notranslate">call</code>方法则可以解决这个问题。它将<code class="notranslate">hasOwnProperty</code>方法的原始定义放到<code class="notranslate">obj</code>对象上执行，这样无论<code class="notranslate">obj</code>上有没有同名方法，都不会影响其结果。</p>
<h3 dir="auto"><code class="notranslate">apply</code>方法</h3>
<blockquote>
<p dir="auto">Syntax: func.apply(thisArg, [argsArray])<br>
<code class="notranslate">apply</code>方法与<code class="notranslate">call</code>类似，也是改变<code class="notranslate">this</code>指向，然后再调用该函数。唯一区别是，它接收一个数组作为函数执行时的参数。</p>
</blockquote>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="function sum(x, y) {
    console.log(x + y)
}
sum.call(null, 2, 4) // 6
sum.apply(null, [2, 4]) // 6
// --------------------------------------------------
// 对字符串中的单个字符进行重复操作
//Uncaught TypeError: &quot;abcd&quot;.map is not a function
'abcd'.map(i =&gt; console.log(i))
// aabbccdd
Array.prototype.map.call('abcd', i =&gt; i+i).join('')"><pre><span class="pl-k">function</span> <span class="pl-en">sum</span><span class="pl-kos">(</span><span class="pl-s1">x</span><span class="pl-kos">,</span> <span class="pl-s1">y</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
    <span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-s1">x</span> <span class="pl-c1">+</span> <span class="pl-s1">y</span><span class="pl-kos">)</span>
<span class="pl-kos">}</span>
<span class="pl-s1">sum</span><span class="pl-kos">.</span><span class="pl-en">call</span><span class="pl-kos">(</span><span class="pl-c1">null</span><span class="pl-kos">,</span> <span class="pl-c1">2</span><span class="pl-kos">,</span> <span class="pl-c1">4</span><span class="pl-kos">)</span> <span class="pl-c">// 6</span>
<span class="pl-s1">sum</span><span class="pl-kos">.</span><span class="pl-en">apply</span><span class="pl-kos">(</span><span class="pl-c1">null</span><span class="pl-kos">,</span> <span class="pl-kos">[</span><span class="pl-c1">2</span><span class="pl-kos">,</span> <span class="pl-c1">4</span><span class="pl-kos">]</span><span class="pl-kos">)</span> <span class="pl-c">// 6</span>
<span class="pl-c">// --------------------------------------------------</span>
<span class="pl-c">// 对字符串中的单个字符进行重复操作</span>
<span class="pl-c">//Uncaught TypeError: "abcd".map is not a function</span>
<span class="pl-s">'abcd'</span><span class="pl-kos">.</span><span class="pl-en">map</span><span class="pl-kos">(</span><span class="pl-s1">i</span> <span class="pl-c1">=&gt;</span> <span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-s1">i</span><span class="pl-kos">)</span><span class="pl-kos">)</span>
<span class="pl-c">// aabbccdd</span>
<span class="pl-v">Array</span><span class="pl-kos">.</span><span class="pl-c1">prototype</span><span class="pl-kos">.</span><span class="pl-c1">map</span><span class="pl-kos">.</span><span class="pl-en">call</span><span class="pl-kos">(</span><span class="pl-s">'abcd'</span><span class="pl-kos">,</span> <span class="pl-s1">i</span> <span class="pl-c1">=&gt;</span> <span class="pl-s1">i</span><span class="pl-c1">+</span><span class="pl-s1">i</span><span class="pl-kos">)</span><span class="pl-kos">.</span><span class="pl-en">join</span><span class="pl-kos">(</span><span class="pl-s">''</span><span class="pl-kos">)</span></pre></div>
<h4 dir="auto">应用(Use)</h4>
<ul dir="auto">
<li>找出数组中最大/最小的元素</li>
</ul>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="var a = [4, 7, 3, 9, 11, 1]
Math.max.apply(null, a) // 11
Math.min.apply(null, a) // 1"><pre><span class="pl-k">var</span> <span class="pl-s1">a</span> <span class="pl-c1">=</span> <span class="pl-kos">[</span><span class="pl-c1">4</span><span class="pl-kos">,</span> <span class="pl-c1">7</span><span class="pl-kos">,</span> <span class="pl-c1">3</span><span class="pl-kos">,</span> <span class="pl-c1">9</span><span class="pl-kos">,</span> <span class="pl-c1">11</span><span class="pl-kos">,</span> <span class="pl-c1">1</span><span class="pl-kos">]</span>
<span class="pl-v">Math</span><span class="pl-kos">.</span><span class="pl-c1">max</span><span class="pl-kos">.</span><span class="pl-en">apply</span><span class="pl-kos">(</span><span class="pl-c1">null</span><span class="pl-kos">,</span> <span class="pl-s1">a</span><span class="pl-kos">)</span> <span class="pl-c">// 11</span>
<span class="pl-v">Math</span><span class="pl-kos">.</span><span class="pl-c1">min</span><span class="pl-kos">.</span><span class="pl-en">apply</span><span class="pl-kos">(</span><span class="pl-c1">null</span><span class="pl-kos">,</span> <span class="pl-s1">a</span><span class="pl-kos">)</span> <span class="pl-c">// 1</span></pre></div>
<ul dir="auto">
<li>将数组的空元素变为<code class="notranslate">undefined</code>(数组遍历会跳过空元素，但是不会跳过undefined)</li>
</ul>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="Array.apply(null, [1, 2, , 3]) // [1, 2, undefined, 3]"><pre><span class="pl-v">Array</span><span class="pl-kos">.</span><span class="pl-en">apply</span><span class="pl-kos">(</span><span class="pl-c1">null</span><span class="pl-kos">,</span> <span class="pl-kos">[</span><span class="pl-c1">1</span><span class="pl-kos">,</span> <span class="pl-c1">2</span><span class="pl-kos">,</span> <span class="pl-kos">,</span> <span class="pl-c1">3</span><span class="pl-kos">]</span><span class="pl-kos">)</span> <span class="pl-c">// [1, 2, undefined, 3]</span></pre></div>
<ul dir="auto">
<li>转换类似数组的对象(被处理的对象必须有<code class="notranslate">length</code>属性，以及相对应的数字键)</li>
</ul>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="// 例1:
var o = {
    0: 1,
    1: 3,
    length: 2
}
Array.prototype.slice.apply(o) // [1, 3]
// 例2:
var o2 = {
    0: 1,
    1: 3
}
Array.prototype.slice.apply(o2) // []
// 例3:
var o3 = {
    0: 1,
    1: 3,
    length: 4
}
Array.prototype.slice.apply(o3) // [1, 3, empty × 2]
// 例4:
var o4 = {
    1: 1,
    a: 3,
    length: 2
}
Array.prototype.slice.apply(o4) // [empty, 1]"><pre><span class="pl-c">// 例1:</span>
<span class="pl-k">var</span> <span class="pl-s1">o</span> <span class="pl-c1">=</span> <span class="pl-kos">{</span>
    <span class="pl-c1">0</span>: <span class="pl-c1">1</span><span class="pl-kos">,</span>
    <span class="pl-c1">1</span>: <span class="pl-c1">3</span><span class="pl-kos">,</span>
    <span class="pl-c1">length</span>: <span class="pl-c1">2</span>
<span class="pl-kos">}</span>
<span class="pl-v">Array</span><span class="pl-kos">.</span><span class="pl-c1">prototype</span><span class="pl-kos">.</span><span class="pl-c1">slice</span><span class="pl-kos">.</span><span class="pl-en">apply</span><span class="pl-kos">(</span><span class="pl-s1">o</span><span class="pl-kos">)</span> <span class="pl-c">// [1, 3]</span>
<span class="pl-c">// 例2:</span>
<span class="pl-k">var</span> <span class="pl-s1">o2</span> <span class="pl-c1">=</span> <span class="pl-kos">{</span>
    <span class="pl-c1">0</span>: <span class="pl-c1">1</span><span class="pl-kos">,</span>
    <span class="pl-c1">1</span>: <span class="pl-c1">3</span>
<span class="pl-kos">}</span>
<span class="pl-v">Array</span><span class="pl-kos">.</span><span class="pl-c1">prototype</span><span class="pl-kos">.</span><span class="pl-c1">slice</span><span class="pl-kos">.</span><span class="pl-en">apply</span><span class="pl-kos">(</span><span class="pl-s1">o2</span><span class="pl-kos">)</span> <span class="pl-c">// []</span>
<span class="pl-c">// 例3:</span>
<span class="pl-k">var</span> <span class="pl-s1">o3</span> <span class="pl-c1">=</span> <span class="pl-kos">{</span>
    <span class="pl-c1">0</span>: <span class="pl-c1">1</span><span class="pl-kos">,</span>
    <span class="pl-c1">1</span>: <span class="pl-c1">3</span><span class="pl-kos">,</span>
    <span class="pl-c1">length</span>: <span class="pl-c1">4</span>
<span class="pl-kos">}</span>
<span class="pl-v">Array</span><span class="pl-kos">.</span><span class="pl-c1">prototype</span><span class="pl-kos">.</span><span class="pl-c1">slice</span><span class="pl-kos">.</span><span class="pl-en">apply</span><span class="pl-kos">(</span><span class="pl-s1">o3</span><span class="pl-kos">)</span> <span class="pl-c">// [1, 3, empty × 2]</span>
<span class="pl-c">// 例4:</span>
<span class="pl-k">var</span> <span class="pl-s1">o4</span> <span class="pl-c1">=</span> <span class="pl-kos">{</span>
    <span class="pl-c1">1</span>: <span class="pl-c1">1</span><span class="pl-kos">,</span>
    <span class="pl-c1">a</span>: <span class="pl-c1">3</span><span class="pl-kos">,</span>
    <span class="pl-c1">length</span>: <span class="pl-c1">2</span>
<span class="pl-kos">}</span>
<span class="pl-v">Array</span><span class="pl-kos">.</span><span class="pl-c1">prototype</span><span class="pl-kos">.</span><span class="pl-c1">slice</span><span class="pl-kos">.</span><span class="pl-en">apply</span><span class="pl-kos">(</span><span class="pl-s1">o4</span><span class="pl-kos">)</span> <span class="pl-c">// [empty, 1]</span></pre></div>
<ul dir="auto">
<li>绑定回调函数的对象(之前<a href="#%E9%81%BF%E5%85%8D%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E4%B8%AD%E7%9A%84this">绑定按钮点击事件</a>的例子)</li>
</ul>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="var o = new Object()
o.f = function() {
    console.log(this === o)
}
// `apply`或者`call`方法不仅绑定函数执行时所在的对象，还会立即执行函数。因此要把绑定语句写在一个函数体内。
var foo = function() {
    // o.f.call(o)
    o.f.apply(o)
}
// true
document.querySelector('#btn').addEventListener('click', foo)"><pre><span class="pl-k">var</span> <span class="pl-s1">o</span> <span class="pl-c1">=</span> <span class="pl-k">new</span> <span class="pl-v">Object</span><span class="pl-kos">(</span><span class="pl-kos">)</span>
<span class="pl-s1">o</span><span class="pl-kos">.</span><span class="pl-en">f</span> <span class="pl-c1">=</span> <span class="pl-k">function</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
    <span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-smi">this</span> <span class="pl-c1">===</span> <span class="pl-s1">o</span><span class="pl-kos">)</span>
<span class="pl-kos">}</span>
<span class="pl-c">// `apply`或者`call`方法不仅绑定函数执行时所在的对象，还会立即执行函数。因此要把绑定语句写在一个函数体内。</span>
<span class="pl-k">var</span> <span class="pl-en">foo</span> <span class="pl-c1">=</span> <span class="pl-k">function</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
    <span class="pl-c">// o.f.call(o)</span>
    <span class="pl-s1">o</span><span class="pl-kos">.</span><span class="pl-c1">f</span><span class="pl-kos">.</span><span class="pl-en">apply</span><span class="pl-kos">(</span><span class="pl-s1">o</span><span class="pl-kos">)</span>
<span class="pl-kos">}</span>
<span class="pl-c">// true</span>
<span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">'#btn'</span><span class="pl-kos">)</span><span class="pl-kos">.</span><span class="pl-en">addEventListener</span><span class="pl-kos">(</span><span class="pl-s">'click'</span><span class="pl-kos">,</span> <span class="pl-en">foo</span><span class="pl-kos">)</span></pre></div>
<h3 dir="auto"><code class="notranslate">bind</code>方法</h3>
<blockquote>
<p dir="auto">Syntax: fun.bind(thisArg[, arg1[, arg2[, ...]]])</p>
</blockquote>
<ul dir="auto">
<li><code class="notranslate">bind</code>方法用于将函数体内的<code class="notranslate">this</code>绑定到某个对象，然后返回一个新函数。</li>
</ul>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="var o = new Object()
o.name = 'lencx'
o.say = function() {
    console.log(this.name)
}
o.say() // lencx
var o2 = new Object()
o2.name = 'len'
o2.say = o.say
o2.say() // len
o2.say = o.say.bind(o)
o2.say() // lencx"><pre><span class="pl-k">var</span> <span class="pl-s1">o</span> <span class="pl-c1">=</span> <span class="pl-k">new</span> <span class="pl-v">Object</span><span class="pl-kos">(</span><span class="pl-kos">)</span>
<span class="pl-s1">o</span><span class="pl-kos">.</span><span class="pl-c1">name</span> <span class="pl-c1">=</span> <span class="pl-s">'lencx'</span>
<span class="pl-s1">o</span><span class="pl-kos">.</span><span class="pl-en">say</span> <span class="pl-c1">=</span> <span class="pl-k">function</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
    <span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-smi">this</span><span class="pl-kos">.</span><span class="pl-c1">name</span><span class="pl-kos">)</span>
<span class="pl-kos">}</span>
<span class="pl-s1">o</span><span class="pl-kos">.</span><span class="pl-en">say</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-c">// lencx</span>
<span class="pl-k">var</span> <span class="pl-s1">o2</span> <span class="pl-c1">=</span> <span class="pl-k">new</span> <span class="pl-v">Object</span><span class="pl-kos">(</span><span class="pl-kos">)</span>
<span class="pl-s1">o2</span><span class="pl-kos">.</span><span class="pl-c1">name</span> <span class="pl-c1">=</span> <span class="pl-s">'len'</span>
<span class="pl-s1">o2</span><span class="pl-kos">.</span><span class="pl-c1">say</span> <span class="pl-c1">=</span> <span class="pl-s1">o</span><span class="pl-kos">.</span><span class="pl-c1">say</span>
<span class="pl-s1">o2</span><span class="pl-kos">.</span><span class="pl-en">say</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-c">// len</span>
<span class="pl-s1">o2</span><span class="pl-kos">.</span><span class="pl-c1">say</span> <span class="pl-c1">=</span> <span class="pl-s1">o</span><span class="pl-kos">.</span><span class="pl-c1">say</span><span class="pl-kos">.</span><span class="pl-en">bind</span><span class="pl-kos">(</span><span class="pl-s1">o</span><span class="pl-kos">)</span>
<span class="pl-s1">o2</span><span class="pl-kos">.</span><span class="pl-en">say</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-c">// lencx</span></pre></div>
<ul dir="auto">
<li><code class="notranslate">bind</code>除了可以绑定<code class="notranslate">this</code>以外，还可以绑定原函数的参数</li>
</ul>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="var sum = function(x, y) {
    return x * this.a + y * this.b
}
var nums = {
    a: 3,
    b: 4
}
var newSum = sum.bind(nums, 3)
newSum(3)"><pre><span class="pl-k">var</span> <span class="pl-en">sum</span> <span class="pl-c1">=</span> <span class="pl-k">function</span><span class="pl-kos">(</span><span class="pl-s1">x</span><span class="pl-kos">,</span> <span class="pl-s1">y</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
    <span class="pl-k">return</span> <span class="pl-s1">x</span> <span class="pl-c1">*</span> <span class="pl-smi">this</span><span class="pl-kos">.</span><span class="pl-c1">a</span> <span class="pl-c1">+</span> <span class="pl-s1">y</span> <span class="pl-c1">*</span> <span class="pl-smi">this</span><span class="pl-kos">.</span><span class="pl-c1">b</span>
<span class="pl-kos">}</span>
<span class="pl-k">var</span> <span class="pl-s1">nums</span> <span class="pl-c1">=</span> <span class="pl-kos">{</span>
    <span class="pl-c1">a</span>: <span class="pl-c1">3</span><span class="pl-kos">,</span>
    <span class="pl-c1">b</span>: <span class="pl-c1">4</span>
<span class="pl-kos">}</span>
<span class="pl-k">var</span> <span class="pl-s1">newSum</span> <span class="pl-c1">=</span> <span class="pl-en">sum</span><span class="pl-kos">.</span><span class="pl-en">bind</span><span class="pl-kos">(</span><span class="pl-s1">nums</span><span class="pl-kos">,</span> <span class="pl-c1">3</span><span class="pl-kos">)</span>
<span class="pl-s1">newSum</span><span class="pl-kos">(</span><span class="pl-c1">3</span><span class="pl-kos">)</span></pre></div>
<h4 dir="auto">注意事项(Note)</h4>
<ul dir="auto">
<li>每次绑定都返回一个新函数</li>
</ul>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="// 点击事件绑定`bind`方法生成的一个匿名函数。会导致无法取消绑定。
element.addEventListener('click', o.say.bind(o))
// 因此下面的代码无效
element.removeEventListener('click', o.say.bind(o))
// 正确解法：
var _say = o.say.bind(o)
element.addEventListener('click', _say)
element.removeEventListener('click', _say)"><pre><span class="pl-c">// 点击事件绑定`bind`方法生成的一个匿名函数。会导致无法取消绑定。</span>
<span class="pl-s1">element</span><span class="pl-kos">.</span><span class="pl-en">addEventListener</span><span class="pl-kos">(</span><span class="pl-s">'click'</span><span class="pl-kos">,</span> <span class="pl-s1">o</span><span class="pl-kos">.</span><span class="pl-c1">say</span><span class="pl-kos">.</span><span class="pl-en">bind</span><span class="pl-kos">(</span><span class="pl-s1">o</span><span class="pl-kos">)</span><span class="pl-kos">)</span>
<span class="pl-c">// 因此下面的代码无效</span>
<span class="pl-s1">element</span><span class="pl-kos">.</span><span class="pl-en">removeEventListener</span><span class="pl-kos">(</span><span class="pl-s">'click'</span><span class="pl-kos">,</span> <span class="pl-s1">o</span><span class="pl-kos">.</span><span class="pl-c1">say</span><span class="pl-kos">.</span><span class="pl-en">bind</span><span class="pl-kos">(</span><span class="pl-s1">o</span><span class="pl-kos">)</span><span class="pl-kos">)</span>
<span class="pl-c">// 正确解法：</span>
<span class="pl-k">var</span> <span class="pl-s1">_say</span> <span class="pl-c1">=</span> <span class="pl-s1">o</span><span class="pl-kos">.</span><span class="pl-c1">say</span><span class="pl-kos">.</span><span class="pl-en">bind</span><span class="pl-kos">(</span><span class="pl-s1">o</span><span class="pl-kos">)</span>
<span class="pl-s1">element</span><span class="pl-kos">.</span><span class="pl-en">addEventListener</span><span class="pl-kos">(</span><span class="pl-s">'click'</span><span class="pl-kos">,</span> <span class="pl-s1">_say</span><span class="pl-kos">)</span>
<span class="pl-s1">element</span><span class="pl-kos">.</span><span class="pl-en">removeEventListener</span><span class="pl-kos">(</span><span class="pl-s">'click'</span><span class="pl-kos">,</span> <span class="pl-s1">_say</span><span class="pl-kos">)</span></pre></div>
<ul dir="auto">
<li><code class="notranslate">bind</code>方法的兼容(Polyfill)</li>
</ul>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind
if (!Function.prototype.bind) {
  Function.prototype.bind = function(oThis) {
    if (typeof this !== 'function') {
      // closest thing possible to the ECMAScript 5
      // internal IsCallable function
      throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');
    }
    var aArgs   = Array.prototype.slice.call(arguments, 1),
        fToBind = this,
        fNOP    = function() {},
        fBound  = function() {
          return fToBind.apply(this instanceof fNOP
                 ? this
                 : oThis,
                 aArgs.concat(Array.prototype.slice.call(arguments)));
        };
    if (this.prototype) {
      // Function.prototype doesn't have a prototype property
      fNOP.prototype = this.prototype;
    }
    fBound.prototype = new fNOP();
    return fBound;
  };
}"><pre><span class="pl-c">// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind</span>
<span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-c1">!</span><span class="pl-v">Function</span><span class="pl-kos">.</span><span class="pl-c1">prototype</span><span class="pl-kos">.</span><span class="pl-c1">bind</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
  <span class="pl-v">Function</span><span class="pl-kos">.</span><span class="pl-c1">prototype</span><span class="pl-kos">.</span><span class="pl-en">bind</span> <span class="pl-c1">=</span> <span class="pl-k">function</span><span class="pl-kos">(</span><span class="pl-s1">oThis</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
    <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-k">typeof</span> <span class="pl-smi">this</span> <span class="pl-c1">!==</span> <span class="pl-s">'function'</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
      <span class="pl-c">// closest thing possible to the ECMAScript 5</span>
      <span class="pl-c">// internal IsCallable function</span>
      <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-v">TypeError</span><span class="pl-kos">(</span><span class="pl-s">'Function.prototype.bind - what is trying to be bound is not callable'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
    <span class="pl-kos">}</span>
    <span class="pl-k">var</span> <span class="pl-s1">aArgs</span>   <span class="pl-c1">=</span> <span class="pl-v">Array</span><span class="pl-kos">.</span><span class="pl-c1">prototype</span><span class="pl-kos">.</span><span class="pl-c1">slice</span><span class="pl-kos">.</span><span class="pl-en">call</span><span class="pl-kos">(</span><span class="pl-smi">arguments</span><span class="pl-kos">,</span> <span class="pl-c1">1</span><span class="pl-kos">)</span><span class="pl-kos">,</span>
        <span class="pl-s1">fToBind</span> <span class="pl-c1">=</span> <span class="pl-smi">this</span><span class="pl-kos">,</span>
        <span class="pl-en">fNOP</span>    <span class="pl-c1">=</span> <span class="pl-k">function</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span><span class="pl-kos">}</span><span class="pl-kos">,</span>
        <span class="pl-en">fBound</span>  <span class="pl-c1">=</span> <span class="pl-k">function</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
          <span class="pl-k">return</span> <span class="pl-s1">fToBind</span><span class="pl-kos">.</span><span class="pl-en">apply</span><span class="pl-kos">(</span><span class="pl-smi">this</span> <span class="pl-k">instanceof</span> <span class="pl-en">fNOP</span>
                 ? <span class="pl-smi">this</span>
                 : <span class="pl-s1">oThis</span><span class="pl-kos">,</span>
                 <span class="pl-s1">aArgs</span><span class="pl-kos">.</span><span class="pl-en">concat</span><span class="pl-kos">(</span><span class="pl-v">Array</span><span class="pl-kos">.</span><span class="pl-c1">prototype</span><span class="pl-kos">.</span><span class="pl-c1">slice</span><span class="pl-kos">.</span><span class="pl-en">call</span><span class="pl-kos">(</span><span class="pl-smi">arguments</span><span class="pl-kos">)</span><span class="pl-kos">)</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
        <span class="pl-kos">}</span><span class="pl-kos">;</span>
    <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-smi">this</span><span class="pl-kos">.</span><span class="pl-c1">prototype</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
      <span class="pl-c">// Function.prototype doesn't have a prototype property</span>
      <span class="pl-en">fNOP</span><span class="pl-kos">.</span><span class="pl-c1">prototype</span> <span class="pl-c1">=</span> <span class="pl-smi">this</span><span class="pl-kos">.</span><span class="pl-c1">prototype</span><span class="pl-kos">;</span>
    <span class="pl-kos">}</span>
    <span class="pl-en">fBound</span><span class="pl-kos">.</span><span class="pl-c1">prototype</span> <span class="pl-c1">=</span> <span class="pl-k">new</span> <span class="pl-en">fNOP</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
    <span class="pl-k">return</span> <span class="pl-en">fBound</span><span class="pl-kos">;</span>
  <span class="pl-kos">}</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span></pre></div>
<ul dir="auto">
<li>结合<code class="notranslate">call</code>方法使用</li>
</ul>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="[1, 2, 3].slice(0, 1) // [1]
// 等同
Array.prototype.slice.call([1, 2, 3], 0, 1) // [1]
// `call`方法实质是调用`Function.prototype.call`方法
var slice = Function.prototype.call.bind(Array.prototype.slice)
slice([1, 2, 3], 0, 1) // [1]"><pre><span class="pl-kos">[</span><span class="pl-c1">1</span><span class="pl-kos">,</span> <span class="pl-c1">2</span><span class="pl-kos">,</span> <span class="pl-c1">3</span><span class="pl-kos">]</span><span class="pl-kos">.</span><span class="pl-en">slice</span><span class="pl-kos">(</span><span class="pl-c1">0</span><span class="pl-kos">,</span> <span class="pl-c1">1</span><span class="pl-kos">)</span> <span class="pl-c">// [1]</span>
<span class="pl-c">// 等同</span>
<span class="pl-v">Array</span><span class="pl-kos">.</span><span class="pl-c1">prototype</span><span class="pl-kos">.</span><span class="pl-c1">slice</span><span class="pl-kos">.</span><span class="pl-en">call</span><span class="pl-kos">(</span><span class="pl-kos">[</span><span class="pl-c1">1</span><span class="pl-kos">,</span> <span class="pl-c1">2</span><span class="pl-kos">,</span> <span class="pl-c1">3</span><span class="pl-kos">]</span><span class="pl-kos">,</span> <span class="pl-c1">0</span><span class="pl-kos">,</span> <span class="pl-c1">1</span><span class="pl-kos">)</span> <span class="pl-c">// [1]</span>
<span class="pl-c">// `call`方法实质是调用`Function.prototype.call`方法</span>
<span class="pl-k">var</span> <span class="pl-s1">slice</span> <span class="pl-c1">=</span> <span class="pl-v">Function</span><span class="pl-kos">.</span><span class="pl-c1">prototype</span><span class="pl-kos">.</span><span class="pl-c1">call</span><span class="pl-kos">.</span><span class="pl-en">bind</span><span class="pl-kos">(</span><span class="pl-v">Array</span><span class="pl-kos">.</span><span class="pl-c1">prototype</span><span class="pl-kos">.</span><span class="pl-c1">slice</span><span class="pl-kos">)</span>
<span class="pl-s1">slice</span><span class="pl-kos">(</span><span class="pl-kos">[</span><span class="pl-c1">1</span><span class="pl-kos">,</span> <span class="pl-c1">2</span><span class="pl-kos">,</span> <span class="pl-c1">3</span><span class="pl-kos">]</span><span class="pl-kos">,</span> <span class="pl-c1">0</span><span class="pl-kos">,</span> <span class="pl-c1">1</span><span class="pl-kos">)</span> <span class="pl-c">// [1]</span></pre></div>
<ul dir="auto">
<li>利用<code class="notranslate">bind</code>方法，将<code class="notranslate">[1, 2, 3].slice(0, 1)</code>变成了<code class="notranslate">slice([1, 2, 3], 0, 1)</code>的形式。这种改变也可以应用到其他数组方法。</li>
</ul>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="var pop = Function.prototype.call.bind(Array.prototype.pop)
var push = Function.prototype.call.bind(Array.prototype.push)
var shift = Function.prototype.call.bind(Array.prototype.shift)
var map = Function.prototype.call.bind(Array.prototype.map)
// ...
var a = [1, 2, 3]
pop(a) // [1, 2]
push(a, 5) // [1, 2, 5]
shift(a) // [2, 5]
map(a, i =&gt; i+1) // [3, 6]"><pre><span class="pl-k">var</span> <span class="pl-s1">pop</span> <span class="pl-c1">=</span> <span class="pl-v">Function</span><span class="pl-kos">.</span><span class="pl-c1">prototype</span><span class="pl-kos">.</span><span class="pl-c1">call</span><span class="pl-kos">.</span><span class="pl-en">bind</span><span class="pl-kos">(</span><span class="pl-v">Array</span><span class="pl-kos">.</span><span class="pl-c1">prototype</span><span class="pl-kos">.</span><span class="pl-c1">pop</span><span class="pl-kos">)</span>
<span class="pl-k">var</span> <span class="pl-s1">push</span> <span class="pl-c1">=</span> <span class="pl-v">Function</span><span class="pl-kos">.</span><span class="pl-c1">prototype</span><span class="pl-kos">.</span><span class="pl-c1">call</span><span class="pl-kos">.</span><span class="pl-en">bind</span><span class="pl-kos">(</span><span class="pl-v">Array</span><span class="pl-kos">.</span><span class="pl-c1">prototype</span><span class="pl-kos">.</span><span class="pl-c1">push</span><span class="pl-kos">)</span>
<span class="pl-k">var</span> <span class="pl-s1">shift</span> <span class="pl-c1">=</span> <span class="pl-v">Function</span><span class="pl-kos">.</span><span class="pl-c1">prototype</span><span class="pl-kos">.</span><span class="pl-c1">call</span><span class="pl-kos">.</span><span class="pl-en">bind</span><span class="pl-kos">(</span><span class="pl-v">Array</span><span class="pl-kos">.</span><span class="pl-c1">prototype</span><span class="pl-kos">.</span><span class="pl-c1">shift</span><span class="pl-kos">)</span>
<span class="pl-k">var</span> <span class="pl-s1">map</span> <span class="pl-c1">=</span> <span class="pl-v">Function</span><span class="pl-kos">.</span><span class="pl-c1">prototype</span><span class="pl-kos">.</span><span class="pl-c1">call</span><span class="pl-kos">.</span><span class="pl-en">bind</span><span class="pl-kos">(</span><span class="pl-v">Array</span><span class="pl-kos">.</span><span class="pl-c1">prototype</span><span class="pl-kos">.</span><span class="pl-c1">map</span><span class="pl-kos">)</span>
<span class="pl-c">// ...</span>
<span class="pl-k">var</span> <span class="pl-s1">a</span> <span class="pl-c1">=</span> <span class="pl-kos">[</span><span class="pl-c1">1</span><span class="pl-kos">,</span> <span class="pl-c1">2</span><span class="pl-kos">,</span> <span class="pl-c1">3</span><span class="pl-kos">]</span>
<span class="pl-s1">pop</span><span class="pl-kos">(</span><span class="pl-s1">a</span><span class="pl-kos">)</span> <span class="pl-c">// [1, 2]</span>
<span class="pl-s1">push</span><span class="pl-kos">(</span><span class="pl-s1">a</span><span class="pl-kos">,</span> <span class="pl-c1">5</span><span class="pl-kos">)</span> <span class="pl-c">// [1, 2, 5]</span>
<span class="pl-s1">shift</span><span class="pl-kos">(</span><span class="pl-s1">a</span><span class="pl-kos">)</span> <span class="pl-c">// [2, 5]</span>
<span class="pl-s1">map</span><span class="pl-kos">(</span><span class="pl-s1">a</span><span class="pl-kos">,</span> <span class="pl-s1">i</span> <span class="pl-c1">=&gt;</span> <span class="pl-s1">i</span><span class="pl-c1">+</span><span class="pl-c1">1</span><span class="pl-kos">)</span> <span class="pl-c">// [3, 6]</span></pre></div>
<ul dir="auto">
<li>将<code class="notranslate">Function.prototype.call</code>绑定到<code class="notranslate">Function.prototype.bind</code>对象，<code class="notranslate">bind</code>的调用形式也可以被改写</li>
</ul>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="function foo() {
    console.log(this.name)
}
var o = {name: 'lencx'}
var bind = Function.prototype.call.bind(Function.prototype.bind)
bind(foo, o)() // lencx"><pre><span class="pl-k">function</span> <span class="pl-en">foo</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
    <span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-smi">this</span><span class="pl-kos">.</span><span class="pl-c1">name</span><span class="pl-kos">)</span>
<span class="pl-kos">}</span>
<span class="pl-k">var</span> <span class="pl-s1">o</span> <span class="pl-c1">=</span> <span class="pl-kos">{</span><span class="pl-c1">name</span>: <span class="pl-s">'lencx'</span><span class="pl-kos">}</span>
<span class="pl-k">var</span> <span class="pl-s1">bind</span> <span class="pl-c1">=</span> <span class="pl-v">Function</span><span class="pl-kos">.</span><span class="pl-c1">prototype</span><span class="pl-kos">.</span><span class="pl-c1">call</span><span class="pl-kos">.</span><span class="pl-en">bind</span><span class="pl-kos">(</span><span class="pl-v">Function</span><span class="pl-kos">.</span><span class="pl-c1">prototype</span><span class="pl-kos">.</span><span class="pl-c1">bind</span><span class="pl-kos">)</span>
<span class="pl-s1">bind</span><span class="pl-kos">(</span><span class="pl-s1">foo</span><span class="pl-kos">,</span> <span class="pl-s1">o</span><span class="pl-kos">)</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-c">// lencx</span></pre></div>
<h2 dir="auto">参考资料</h2>
<ul dir="auto">
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this" rel="nofollow">[MDN] this</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" rel="nofollow">[MDN] defineProperty</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call" rel="nofollow">[MDN] call</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" rel="nofollow">[MDN] bind</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply" rel="nofollow">[MDN] apply</a></li>
</ul>]]></description>
</item>
<item>
  <title><![CDATA[Awesome Book]]></title>
  <link>https://github.com/lencx/dev/discussions/18</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/18</guid>
  <pubDate>2022-05-10</pubDate>
  <description><![CDATA[<ul dir="auto">
<li><a href="https://github.com/EbookFoundation/free-programming-books">List of Free Learning Resources In Many Languages</a> - <g-emoji class="g-emoji" alias="books" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png">📚</g-emoji> Freely available programming books</li>
</ul>
<h2 dir="auto">FE</h2>
<ul dir="auto">
<li><a href="https://github.com/getify/You-Dont-Know-JS">You Don't Know JS Yet (book series) - 2nd Edition</a> - This is a series of books diving deep into the core mechanisms of the JavaScript language.</li>
<li><a href="https://exploringjs.com/impatient-js/index.html" rel="nofollow">JavaScript for impatient programmers (ES2022 edition)</a> - This book makes JavaScript less challenging to learn for newcomers, by offering a modern view that is as consistent as possible.</li>
<li><a href="http://speakingjs.com/" rel="nofollow">Speaking JavaScript: An In-Depth Guide for Programmers</a> - This book has been written for programmers, by a programmer. The book’s target audience is programmers who want to learn JavaScript quickly and properly, and JavaScript programmers who want to deepen their skills and/or look up specific topics.</li>
</ul>]]></description>
</item>
<item>
  <title><![CDATA[异常处理：Use of deprecated folder mapping "./" in the "exports" field]]></title>
  <link>https://github.com/lencx/dev/discussions/17</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/17</guid>
  <pubDate>2022-03-30</pubDate>
  <description><![CDATA[<p dir="auto">node version: <code class="notranslate">v16.10.0</code></p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# 具体原因可以查看：https://github.com/microsoft/tslib/issues/134

(node:85486) [DEP0148] DeprecationWarning: Use of deprecated folder mapping &quot;./&quot; in the
 &quot;exports&quot; field module resolution of the package at
/Users/lencx/github/dev/node_modules/tslib/package.json.
Update this package.json to use a subpath pattern like &quot;./*&quot;.
(Use `node --trace-deprecation ...` to show where the warning was created)"><pre><span class="pl-c"><span class="pl-c">#</span> 具体原因可以查看：https://github.com/microsoft/tslib/issues/134</span>

(node:85486) [DEP0148] DeprecationWarning: Use of deprecated folder mapping <span class="pl-s"><span class="pl-pds">"</span>./<span class="pl-pds">"</span></span> <span class="pl-k">in</span> the
 <span class="pl-s"><span class="pl-pds">"</span>exports<span class="pl-pds">"</span></span> field module resolution of the package at
/Users/lencx/github/dev/node_modules/tslib/package.json.
Update this package.json to use a subpath pattern like <span class="pl-s"><span class="pl-pds">"</span>./*<span class="pl-pds">"</span></span>.
(Use <span class="pl-s"><span class="pl-pds">`</span>node --trace-deprecation ...<span class="pl-pds">`</span></span> to show where the warning was created)</pre></div>
<p dir="auto">解决办法：<code class="notranslate">不使用 node v16.x，如 v17.x 即可解决</code>。</p>]]></description>
</item>
<item>
  <title><![CDATA[并发控制]]></title>
  <link>https://github.com/lencx/dev/discussions/16</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/16</guid>
  <pubDate>2022-07-18</pubDate>
  <description><![CDATA[<p dir="auto">在计算机科学，特别是程序设计、操作系统、多处理机和数据库等领域，并发控制（Concurrency control）是确保及时纠正由并发操作导致的错误的一种机制。</p>
<p dir="auto">并发控制的主要技术手段有：</p>
<ul dir="auto">
<li><strong>封锁</strong>：是一种多用户同时访问数据库的技术，实现并发的一项重要手段，能够防止当多用户改写数据库时造成数据不一致与冲突。当有一个用户对数据库内的数据进行操作时，在读取数据前先锁住数据，这样其他用户就无法访问和修改该数据，当数据修改并写回数据库后封锁解除。
<ul dir="auto">
<li>按粒度划分：
<ul dir="auto">
<li>表锁（文件锁）</li>
<li>页锁（page-level lock）</li>
<li>记录锁（行锁，SQL标准使用"行"的表述）</li>
</ul>
</li>
<li>使用方式划分：
<ul dir="auto">
<li>互斥锁（exclusive lock，写锁）</li>
<li>共享锁（sharing lock，读锁）</li>
</ul>
</li>
</ul>
</li>
<li><strong>时间戳</strong>：时间标记（timestamp），国际标准为 <a href="https://zh.wikipedia.org/wiki/ISO_8601" rel="nofollow">ISO 8601</a></li>
<li>乐观并发控制</li>
<li>悲观并发控制</li>
</ul>
<hr>
<h3 dir="auto">参考资料</h3>
<ul dir="auto">
<li><a href="https://zh.wikipedia.org/wiki/%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6" rel="nofollow">[wiki] 并发控制</a></li>
</ul>]]></description>
</item>
<item>
  <title><![CDATA[Web 缓存]]></title>
  <link>https://github.com/lencx/dev/discussions/5</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/5</guid>
  <pubDate>2022-03-21</pubDate>
  <description><![CDATA[<p dir="auto">Web 缓存（HTTP 缓存）是用于临时存储 Web 文档，以减少服务器延迟的一种信息技术。</p>
<h3 dir="auto">缓存控制</h3>
<p dir="auto">HTTP 定义了三种控制缓存的基本机制：</p>
<ol dir="auto">
<li><strong>新鲜度</strong>：允许不在源服务器上重新检查的情况下使用一个响应，并且可以由服务器和客户端来控制
<ul dir="auto">
<li><code class="notranslate">Expires</code> 响应头给出文档失效时间</li>
<li><code class="notranslate">Cache-Control: max-age</code> 指示告诉缓存该响应在多少秒内保持新鲜度</li>
</ul>
</li>
<li><strong>验证</strong>：检查缓存的响应过期后是否仍然有效
<ul dir="auto">
<li>若响应有 <code class="notranslate">Last-Modified</code> 头，缓存可以使用 <code class="notranslate">If-Modified-Since</code> 头来发出一个请求，来查看它是否已经改变</li>
<li><code class="notranslate">ETag</code>（实体标签）机制还允许强弱验证</li>
</ul>
</li>
<li><strong>失效</strong>：通常是另一个请求通过缓存的一个结果
<ul dir="auto">
<li>如果与缓存的响应关联的 URL 随后获得 POST、PUT 或 DELETE 请求，则缓存的响应将失效</li>
</ul>
</li>
</ol>
<hr>
<h2 dir="auto">参考资料</h2>
<ul dir="auto">
<li><a href="https://developers.google.com/web/fundamentals/performance/get-started/httpcaching-6" rel="nofollow">HTTP Caching</a></li>
<li><a href="https://calendar.perfplanet.com/2016/a-tale-of-four-caches/" rel="nofollow">A Tale of Four Caches</a></li>
<li><a href="https://medium.com/@codebyamir/a-web-developers-guide-to-browser-caching-cc41f3b73e7c" rel="nofollow">A Web Developer’s Guide to Browser Caching</a></li>
</ul>]]></description>
</item>
<item>
  <title><![CDATA[父容器高度不固定，内部元素怎样才可以滚动？]]></title>
  <link>https://github.com/lencx/dev/discussions/15</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/15</guid>
  <pubDate>2022-06-27</pubDate>
  <description><![CDATA[<p dir="auto">当滚动内容高度小于 300px 时，父容器高度等于滚动容器高度；当滚动容器高度大于 300px 时，滚动容器应该滚动，但是以下实现未滚动，应该如何解决？</p>
<p dir="auto"><a href="https://codepen.io/lencx/pen/XWzLjPP" rel="nofollow">CodePen Demo</a></p>
<div class="highlight highlight-source-css notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content=".parent {
  max-height: 300px;
  overflow: hidden;
}

.scroll {
  overflow-y: auto;
}"><pre>.<span class="pl-c1">parent</span> {
  <span class="pl-c1">max-height</span><span class="pl-kos">:</span> <span class="pl-c1">300<span class="pl-smi">px</span></span>;
  <span class="pl-c1">overflow</span><span class="pl-kos">:</span> hidden;
}

.<span class="pl-c1">scroll</span> {
  <span class="pl-c1">overflow-y</span><span class="pl-kos">:</span> auto;
}</pre></div>
<div class="highlight highlight-text-html-basic notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="&lt;div class=&quot;parent&quot;&gt;
  &lt;div class=&quot;scroll&quot;&gt;
    &lt;!-- &lt;p&gt; text 1 &lt;/p&gt; --&gt;
    &lt;p&gt; text .. &lt;/p&gt;
    &lt;!-- &lt;p&gt; text n &lt;/p&gt; --&gt;
  &lt;div&gt;
&lt;div&gt;"><pre><span class="pl-kos">&lt;</span><span class="pl-ent">div</span> <span class="pl-c1">class</span>="<span class="pl-s">parent</span>"<span class="pl-kos">&gt;</span>
  <span class="pl-kos">&lt;</span><span class="pl-ent">div</span> <span class="pl-c1">class</span>="<span class="pl-s">scroll</span>"<span class="pl-kos">&gt;</span>
    <span class="pl-c">&lt;!-- &lt;p&gt; text 1 &lt;/p&gt; --&gt;</span>
    <span class="pl-kos">&lt;</span><span class="pl-ent">p</span><span class="pl-kos">&gt;</span> text .. <span class="pl-kos">&lt;/</span><span class="pl-ent">p</span><span class="pl-kos">&gt;</span>
    <span class="pl-c">&lt;!-- &lt;p&gt; text n &lt;/p&gt; --&gt;</span>
  <span class="pl-kos">&lt;</span><span class="pl-ent">div</span><span class="pl-kos">&gt;</span>
<span class="pl-kos">&lt;</span><span class="pl-ent">div</span><span class="pl-kos">&gt;</span></pre></div>]]></description>
</item>
<item>
  <title><![CDATA[JS 深拷贝与浅拷贝]]></title>
  <link>https://github.com/lencx/dev/discussions/14</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/14</guid>
  <pubDate>2022-05-10</pubDate>
  <description><![CDATA[<ol dir="auto">
<li>深拷贝（Deep Copy）与浅拷贝（Shallow Copy）的区别是什么？</li>
<li>实现深拷贝有几种方式？</li>
</ol>]]></description>
</item>
<item>
  <title><![CDATA[创建一个 A-Z 的数组有多少种方式？]]></title>
  <link>https://github.com/lencx/dev/discussions/13</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/13</guid>
  <pubDate>2022-06-15</pubDate>
  <description><![CDATA[<p dir="auto">数组初始化数据的方式有哪些？</p>]]></description>
</item>
<item>
  <title><![CDATA[pnpm 使用及相关问题]]></title>
  <link>https://github.com/lencx/dev/discussions/12</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/12</guid>
  <pubDate>2022-07-04</pubDate>
  <description><![CDATA[<p dir="auto"><a href="https://pnpm.io/" rel="nofollow">pnpm</a> - 快速的，节省磁盘空间的包管理工具</p>
<h2 dir="auto">使用</h2>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# 安装
npm install -g pnpm

# 升级
pnpm add -g pnpm

# 卸载
npm rm -g pnpm

# 删除全局存储
rm -rf ~/.pnpm-store"><pre><span class="pl-c"><span class="pl-c">#</span> 安装</span>
npm install -g pnpm

<span class="pl-c"><span class="pl-c">#</span> 升级</span>
pnpm add -g pnpm

<span class="pl-c"><span class="pl-c">#</span> 卸载</span>
npm rm -g pnpm

<span class="pl-c"><span class="pl-c">#</span> 删除全局存储</span>
rm -rf <span class="pl-k">~</span>/.pnpm-store</pre></div>]]></description>
</item>
<item>
  <title><![CDATA[Rust 开发环境配置及常见问题]]></title>
  <link>https://github.com/lencx/dev/discussions/11</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/11</guid>
  <pubDate>2022-06-11</pubDate>
  <description><![CDATA[<h2 dir="auto">VS Code 常见问题</h2>
<h3 dir="auto">插件冲突</h3>
<ol dir="auto">
<li><a href="https://marketplace.visualstudio.com/publishers/rust-lang" rel="nofollow">Rust</a> - The Rust Programming Language</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=matklad.rust-analyzer" rel="nofollow">rust-analyzer</a> - An alternative rust language server to the RLS</li>
</ol>
<p dir="auto">同时安装 1，2 两个插件则会报以下错误，关闭 1 插件即可解决。</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="You have both the rust-analyzer (matklad.rust-analyzer) and Rust (rust-lang.rust) plugins enabled.
These are known to conflict and cause various functions of both plugins to not work correctly.
You should disable one of them.You have both the rust-analyzer (matklad.rust-analyzer) and 
Rust (rust-lang.rust) plugins enabled. These are known to conflict and cause various functions 
of both plugins to not work correctly. You should disable one of them."><pre class="notranslate"><code>You have both the rust-analyzer (matklad.rust-analyzer) and Rust (rust-lang.rust) plugins enabled.
These are known to conflict and cause various functions of both plugins to not work correctly.
You should disable one of them.You have both the rust-analyzer (matklad.rust-analyzer) and 
Rust (rust-lang.rust) plugins enabled. These are known to conflict and cause various functions 
of both plugins to not work correctly. You should disable one of them.
</code></pre></div>
<h3 dir="auto">Couldn’t start client Rust Language Server</h3>
<p dir="auto">vscode 无法找到 <code class="notranslate">rustup</code> 可执行文件的路径，可以通过手动配置 <code class="notranslate">settings.json</code> 来解决。</p>
<div class="highlight highlight-source-json notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="&quot;rust-client.rustupPath&quot;: &quot;$HOME/.cargo/bin/rustup&quot;"><pre><span class="pl-ent">"rust-client.rustupPath"</span>: <span class="pl-s"><span class="pl-pds">"</span>$HOME/.cargo/bin/rustup<span class="pl-pds">"</span></span></pre></div>
<hr>
<h2 dir="auto">参考资料</h2>
<ul dir="auto">
<li><a href="https://stackoverflow.com/questions/60816886/how-do-i-solve-couldnt-start-client-rust-language-server-with-the-rust-vs-cod" rel="nofollow">How do I solve "Couldn't start client Rust Language Server" with the Rust VS Code extension?</a></li>
</ul>]]></description>
</item>
<item>
  <title><![CDATA[图片与文字对齐问题]]></title>
  <link>https://github.com/lencx/dev/discussions/10</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/10</guid>
  <pubDate>2022-06-15</pubDate>
  <description><![CDATA[<p dir="auto">当图片与文字在同一行显示时，会发现文字与图片会产生错位，出现问题的原因是什么？该如何解决？</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/16164244/156513869-b0287d14-f1fe-4597-92a8-315e5cc59db0.png"><img width="400" src="https://user-images.githubusercontent.com/16164244/156513869-b0287d14-f1fe-4597-92a8-315e5cc59db0.png" style="max-width: 100%;"></a></p>]]></description>
</item>
<item>
  <title><![CDATA[JS 模块化]]></title>
  <link>https://github.com/lencx/dev/discussions/8</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/8</guid>
  <pubDate>2022-03-21</pubDate>
  <description><![CDATA[<p dir="auto">随着我们的应用程序变得越来越大，我们希望将其拆分为多个文件，即所谓的“模块”。一个模块可能包含一个用于特定目的的类或函数库。</p>
<ul dir="auto">
<li>AMD</li>
<li>CommonJS</li>
<li>UMD</li>
<li>ES6 import / export</li>
</ul>]]></description>
</item>
<item>
  <title><![CDATA[Awesome Vue]]></title>
  <link>https://github.com/lencx/dev/discussions/34</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/34</guid>
  <pubDate>2022-06-05</pubDate>
  <description><![CDATA[<h3 dir="auto">UI &amp; Components</h3>
<ul dir="auto">
<li><a href="https://github.com/vuetifyjs/vuetify">Vuetify</a> - <g-emoji class="g-emoji" alias="dragon" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f409.png">🐉</g-emoji> Material Component Framework for Vue</li>
<li><a href="https://github.com/youzan/vant">Vant</a> - Lightweight Mobile UI Components built on Vue</li>
<li><a href="https://github.com/vueComponent/ant-design-vue">Ant Design Vue</a> - <g-emoji class="g-emoji" alias="rainbow" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f308.png">🌈</g-emoji> An enterprise-class UI components based on Ant Design and Vue. <g-emoji class="g-emoji" alias="ant" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f41c.png">🐜</g-emoji></li>
<li><a href="https://github.com/ElemeFE/element">Element</a> - A Vue.js 2.0 UI Toolkit for Web
<ul dir="auto">
<li><a href="https://github.com/element-plus/element-plus">Element Plus</a> - <g-emoji class="g-emoji" alias="tada" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png">🎉</g-emoji> A Vue.js 3.0 UI Library made by Element team</li>
</ul>
</li>
<li><a href="https://github.com/jdf2e/nutui">NutUI 3</a> - 京东风格移动端 Vue2、Vue3 组件库 (A Vue.js UI Toolkit for Mobile Web)</li>
<li><a href="https://github.com/pikax/vue-composable">vue-composable</a> - Vue composition-api composable components. i18n, validation, pagination, fetch, etc. +50 different composables</li>
<li><a href="https://github.com/lusaxweb/vuesax">vuesax</a> - New Framework Components for Vue.js 2</li>
<li><a href="https://github.com/troisjs/trois">trois</a> - <g-emoji class="g-emoji" alias="sparkles" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2728.png">✨</g-emoji> ThreeJS + VueJS 3 + ViteJS <g-emoji class="g-emoji" alias="zap" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a1.png">⚡</g-emoji></li>
</ul>
<h3 dir="auto">Hooks</h3>
<ul dir="auto">
<li><a href="https://github.com/vueuse/vueuse">VueUse</a> - Collection of essential Vue Composition Utilities for Vue 2 and 3</li>
</ul>]]></description>
</item>
<item>
  <title><![CDATA[TCP 与 UDP 之间的区别]]></title>
  <link>https://github.com/lencx/dev/discussions/6</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/6</guid>
  <pubDate>2022-06-17</pubDate>
  <description><![CDATA[<blockquote>
<p dir="auto">数据能否快速完整地传输取决于你使用的网络协议，是 UDP 还是 TCP。它们都做同样的工作，但方式不同。TCP 更可靠，UDP 更快。</p>
</blockquote>
<h2 dir="auto">举例</h2>
<h3 dir="auto">例一</h3>
<p dir="auto">在 A，B 两地之间存在一条河，现在需要将信件从 A 地送达 B 地，应该如何发送信件？</p>
<ul dir="auto">
<li><strong>在河上建一座桥，然后将信件送达</strong> - TCP，必须建立连接（桥接）才能传递数据（信件），数据是可靠的，因为它将直接到达另一端而不会丢失数据或错误。</li>
<li><strong>通过鸽子送达</strong> - UDP，发送数据不需要连接，与 TCP 相比，这个过程更快。但是数据并不可靠。我们不知道鸽子是否会朝着正确的方向飞行，途中掉信，或者遇到其他一些问题。</li>
</ul>
<h3 dir="auto">例二</h3>
<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/16164244/154880460-af61b88b-1828-4b90-996e-8da8cb822537.png"><img width="400" alt="TCP vs UDP" src="https://user-images.githubusercontent.com/16164244/154880460-af61b88b-1828-4b90-996e-8da8cb822537.png" style="max-width: 100%;"></a></p>
<p dir="auto">来自于 <a href="https://www.reddit.com/r/ProgrammerHumor/comments/9gcwgw/comment/e63axmd/?utm_source=share&amp;utm_medium=web2x&amp;context=3" rel="nofollow">noruthwhatsoever</a> 的回答：</p>
<ul dir="auto">
<li>如果 TCP 瓶子由其他人拿着并且他们要求从中喝水，这将更加准确。 对话会是这样的：
<ul dir="auto">
<li>“喂，我想喝点水。”</li>
<li>“好，你想喝点水。”</li>
<li>“是的，我想喝点水。”</li>
<li>“好，你准备好喝水了吗？”</li>
<li>“是的，我准备喝点水。”</li>
<li>“好，我给你倒水。”</li>
<li>“好，我准备好接水了。”</li>
<li>“好，这里有水。 喝水了吗？”</li>
<li>“是的，我有水。”</li>
<li>“好吧，你拿到水了。 再见”</li>
</ul>
</li>
<li>UDP 只是一个拿着软管试图向你张开的嘴里喷水的人</li>
</ul>
<h2 dir="auto">基础知识</h2>
<h3 dir="auto">名词解释</h3>
<ul dir="auto">
<li><strong>IPS</strong> - 互联网协议套件（Internet Protocol Suite）是网络通讯模型，以及整个网络传输协议家族，为网际网络的基础通讯架构。它常通称为 TCP/IP 协议族（TCP/IP Protocol Suite，或TCP/IP Protocols），简称 TCP/IP。因为该协定家族的两个核心协定：TCP（传输控制协议）和 IP（网际协议），为该家族中最早通过的标准。由于在网络通讯协议普遍采用分层的结构，当多个层次的协议共同工作时，类似计算机科学中的堆栈，因此又称为 TCP/IP 协议栈（TCP/IP Protocol Stack）。</li>
<li><strong>TCP</strong> -  传输控制协议（Transmission Control Protocol）是一种面向连接的、可靠的、基于<a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AF%80%E6%B5%81" rel="nofollow">字节流</a>的<a href="https://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E5%B1%82" rel="nofollow">传输层</a>通信协议，由 <a href="https://zh.wikipedia.org/wiki/IETF" rel="nofollow">IETF</a> 的 <a href="https://zh.wikipedia.org/wiki/RFC" rel="nofollow">RFC</a> <a href="https://tools.ietf.org/html/rfc793" rel="nofollow">793</a> 定义。在简化的计算机网络 <a href="https://zh.wikipedia.org/wiki/OSI%E6%A8%A1%E5%9E%8B" rel="nofollow">OSI 模型</a>中，它完成第四层传输层所指定的功能。<a href="https://zh.wikipedia.org/wiki/%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE%E6%8A%A5%E5%8D%8F%E8%AE%AE" rel="nofollow">用户数据报协议</a>（UDP）是同一层内另一个重要的传输协议。</li>
<li><strong>UDP</strong> - 用户资料包协议（User Datagram Protocol）是一个简单的面向资料包的<a href="https://zh.wikipedia.org/wiki/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE" rel="nofollow">通信协议</a>，位于 <a href="https://zh.wikipedia.org/wiki/OSI%E6%A8%A1%E5%9E%8B" rel="nofollow">OSI 模型</a>的<a href="https://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E5%B1%82" rel="nofollow">传输层</a>。该协议由 <a href="https://zh.wikipedia.org/w/index.php?title=David_P._Reed&amp;action=edit&amp;redlink=1" rel="nofollow">David P. Reed</a> 在 1980 年设计且在 <a href="https://tools.ietf.org/html/rfc768" rel="nofollow">RFC 768</a> 中被规范。典型网络上的众多使用 UDP 协议的关键应用在一定程度上是相似的。</li>
<li><strong>OSI 模型</strong> - 开放式系统互联模型（Open System Interconnection Model）是一种概念模型，由<a href="https://zh.wikipedia.org/wiki/%E5%9B%BD%E9%99%85%E6%A0%87%E5%87%86%E5%8C%96%E7%BB%84%E7%BB%87" rel="nofollow">国际标准化组织</a>提出，一个试图使各种计算机在世界范围内互连为网络的标准框架。定义于 ISO/IEC 7498-1。该模型将通信系统中的数据流划分为七个层，从分布式应用程序数据的最高层表示到跨通信介质传输数据的物理实现。每个中间层为其上一层提供功能，其自身功能则由其下一层提供。功能的类别通过标准的通信协议在软件中实现。
<ul dir="auto">
<li>「七」 <strong>应用层（Application Layer）</strong> - 提供为应用软件而设计的接口，以设定与另一应用软件之间的通讯。例如：HTTP、HTTPS、FTP、Telnet、SSH、SMTP、POP3 等。</li>
<li>「六」 <strong>表示层（Presentation Layer）</strong> - 把数据转换为能与接收者的系统格式兼容并适合传输的格式。</li>
<li>「五」 <strong>会话层（Session Layer）</strong> - 负责在数据传输中设定和维护计算机网络中两台计算机之间的通讯连接。</li>
<li>「四」 <strong>传输层（Transport Layer）</strong> - 把传输表头（TH）加至资料以形成封包。传输表头包含了所使用的协定等传送资讯。例如：传输控制协议（TCP）等。</li>
<li>「三」 <strong>网络层（Network Layer）</strong> - 决定数据的路径选择和转寄，将网络表头（NH）加至数据包，以形成封包。网络表头包含了网络资料。例如：互联网协议（IP）等。</li>
<li>「二」 <strong>数据链路层（Data Link Layer）</strong> - 负责网络寻址、错误侦测和改错。当表头和表尾被加至数据包时，会形成资讯框（Data Frame）。数据链表头（DLH）是包含了实体位址和错误侦测及改错的方法。数据链表尾（DLT）是一串指示数据包末端的字符串。例如乙太网、无线局域网（Wi-Fi）和通用分组无线服务（GPRS）等。分为两个子层：逻辑链路控制（logical link control，LLC）子层和介质访问控制（Media access control，MAC）子层。</li>
<li>「一」<strong>物理层（Physical Layer）</strong> - 在区域网络上传送数据帧（Data Frame），它负责管理电脑通讯设备和网络媒体之间的互通。包括了针脚、电压、线缆规范、集线器、中继器、网卡、主机介面卡等。</li>
</ul>
</li>
</ul>
<h3 dir="auto">TCP / UDP</h3>
<table role="table">
<thead>
<tr>
<th>特征 (Feature)</th>
<th>传输控制协议 (TCP)</th>
<th>用户数据报协议 (UDP)</th>
</tr>
</thead>
<tbody>
<tr>
<td>服务类型 (Type of Service)</td>
<td>面向连接的协议：通信设备在传输数据之前应该建立连接，在传输数据之后应该关闭连接</td>
<td>面向数据报的协议：打开连接、维护连接和终止连接没有开销，对于广播和多播类型的网络传输非常有效</td>
</tr>
<tr>
<td>可靠性 (Reliability)</td>
<td>可靠：保证将数据传送到目标路由器</td>
<td>不可靠：无法保证将数据传送到目的地</td>
</tr>
<tr>
<td>顺序 (Sequence)</td>
<td>数据包按顺序到达接收器</td>
<td>没有数据排序，如果需要排序，则必须由应用层处理</td>
</tr>
<tr>
<td>错误检查 (Error checking mechanism)</td>
<td>广泛的错误检查机制，因为它提供了数据流控制和确认</td>
<td>使用校验和的基本错误检查机制</td>
</tr>
<tr>
<td>重传 (Retransmission)</td>
<td>可以重传丢失的数据包</td>
<td>不重传丢失的数据包</td>
</tr>
<tr>
<td>流类型 (Stream Type)</td>
<td>字节流</td>
<td>消息流</td>
</tr>
<tr>
<td>速度 (Speed)</td>
<td>比 UDP 慢</td>
<td>比 TCP 更快、更简单、更高效</td>
</tr>
<tr>
<td>首部长度 (Header Length)</td>
<td>20-60 字节的可变长度</td>
<td>8 字节的固定长度</td>
</tr>
<tr>
<td>握手技巧 (Handshaking Techniques)</td>
<td>使用 SYN、ACK、SYN-ACK 等握手</td>
<td>无连接协议，即没有握手</td>
</tr>
<tr>
<td>致谢 (Acknowledgment)</td>
<td>存在确认段</td>
<td>没有确认段</td>
</tr>
<tr>
<td>重量 (Weight)</td>
<td>重量级</td>
<td>轻量级</td>
</tr>
<tr>
<td>广播 (Broadcasting)</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>协议 (Protocols)</td>
<td>被 HTTP、HTTPS、FTP、SMTP 和 Telnet 使用</td>
<td>被 DNS、DHCP、TFTP、SNMP、RIP 和 VoIP 使用</td>
</tr>
</tbody>
</table>
<p dir="auto">互联网是连接设备的网络，每个设备（手机，电脑，服务器等）都通过互联网协议套件（Internet Protocol Suite，IPS）进行通信。TCP 和 UDP 是套件中的主要协议：<a href="https://www.sciencedirect.com/topics/computer-science/internet-protocol-suite" rel="nofollow">图片来源</a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/16164244/154881828-203089a7-2df1-48af-855b-0a24602acf8e.png"><img src="https://user-images.githubusercontent.com/16164244/154881828-203089a7-2df1-48af-855b-0a24602acf8e.png" alt="protocols" style="max-width: 100%;"></a></p>
<p dir="auto">每台连接到互联网的设备都有一个唯一的 IP 地址。两台设备进行通信时，可能使用 TCP 或 UDP 来进行。</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/16164244/154935179-287b9ac3-3c3a-4340-936d-e3ce7c8f424b.png"><img src="https://user-images.githubusercontent.com/16164244/154935179-287b9ac3-3c3a-4340-936d-e3ce7c8f424b.png" alt="tcp vs udp" style="max-width: 100%;"></a></p>
<hr>
<h2 dir="auto">参考资料</h2>
<ul dir="auto">
<li><a href="https://www.reddit.com/r/ProgrammerHumor/comments/9gcwgw/tcp_vs_udp/" rel="nofollow">TCP vs. UDP</a></li>
<li><a href="https://www.khanacademy.org/computing/computers-and-internet/xcae6f4a7ff015e7d:the-internet/xcae6f4a7ff015e7d:transporting-packets/a/transmission-control-protocol--tcp" rel="nofollow">Transmission Control Protocol (TCP)</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE%E6%8A%A5%E5%8D%8F%E8%AE%AE" rel="nofollow">wiki 用户数据报协议</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE" rel="nofollow">wiki 传输控制协议</a></li>
</ul>]]></description>
</item>
<item>
  <title><![CDATA[Where ‘this’ executes？]]></title>
  <link>https://github.com/lencx/dev/discussions/3</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/3</guid>
  <pubDate>2022-05-10</pubDate>
  <description><![CDATA[<p dir="auto">What will each output？</p>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="let name = 'global';
const obj = {
    name:'obj',
    test:function(){
        let name = 'scope';
        console.log(this.name);
    }
}
const test = obj.test;
test(); 
obj.test(); "><pre><span class="pl-k">let</span> <span class="pl-s1">name</span> <span class="pl-c1">=</span> <span class="pl-s">'global'</span><span class="pl-kos">;</span>
<span class="pl-k">const</span> <span class="pl-s1">obj</span> <span class="pl-c1">=</span> <span class="pl-kos">{</span>
    <span class="pl-c1">name</span>:<span class="pl-s">'obj'</span><span class="pl-kos">,</span>
    <span class="pl-en">test</span>:<span class="pl-k">function</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">{</span>
        <span class="pl-k">let</span> <span class="pl-s1">name</span> <span class="pl-c1">=</span> <span class="pl-s">'scope'</span><span class="pl-kos">;</span>
        <span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-smi">this</span><span class="pl-kos">.</span><span class="pl-c1">name</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
    <span class="pl-kos">}</span>
<span class="pl-kos">}</span>
<span class="pl-k">const</span> <span class="pl-s1">test</span> <span class="pl-c1">=</span> <span class="pl-s1">obj</span><span class="pl-kos">.</span><span class="pl-c1">test</span><span class="pl-kos">;</span>
<span class="pl-s1">test</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">;</span> 
<span class="pl-s1">obj</span><span class="pl-kos">.</span><span class="pl-en">test</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">;</span> </pre></div>]]></description>
</item>
<item>
  <title><![CDATA[js-macro micro tasks]]></title>
  <link>https://github.com/lencx/dev/discussions/2</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/2</guid>
  <pubDate>2022-05-10</pubDate>
  <description><![CDATA[<p dir="auto">What is printout order?</p>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="console.log('script start');

async function asyncA() {
    await asyncB();
    console.log('asyncA end');
};

async function asyncB() {
    console.log('asyncB end');
};

asyncA()

setTimeout(() =&gt; {
    console.log('setTimeout')
}, 0)

new Promise((resolve, reject) =&gt; {
    console.log('promise start');
    resolve()
})
.then(() =&gt; {
console.log('promise end')
})

console.log('script end')"><pre><span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-s">'script start'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>

<span class="pl-k">async</span> <span class="pl-k">function</span> <span class="pl-en">asyncA</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
    <span class="pl-k">await</span> <span class="pl-en">asyncB</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
    <span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-s">'asyncA end'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span><span class="pl-kos">;</span>

<span class="pl-k">async</span> <span class="pl-k">function</span> <span class="pl-en">asyncB</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
    <span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-s">'asyncB end'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span><span class="pl-kos">;</span>

<span class="pl-en">asyncA</span><span class="pl-kos">(</span><span class="pl-kos">)</span>

<span class="pl-en">setTimeout</span><span class="pl-kos">(</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-c1">=&gt;</span> <span class="pl-kos">{</span>
    <span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-s">'setTimeout'</span><span class="pl-kos">)</span>
<span class="pl-kos">}</span><span class="pl-kos">,</span> <span class="pl-c1">0</span><span class="pl-kos">)</span>

<span class="pl-k">new</span> <span class="pl-v">Promise</span><span class="pl-kos">(</span><span class="pl-kos">(</span><span class="pl-s1">resolve</span><span class="pl-kos">,</span> <span class="pl-s1">reject</span><span class="pl-kos">)</span> <span class="pl-c1">=&gt;</span> <span class="pl-kos">{</span>
    <span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-s">'promise start'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
    <span class="pl-s1">resolve</span><span class="pl-kos">(</span><span class="pl-kos">)</span>
<span class="pl-kos">}</span><span class="pl-kos">)</span>
<span class="pl-kos">.</span><span class="pl-en">then</span><span class="pl-kos">(</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-c1">=&gt;</span> <span class="pl-kos">{</span>
<span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-s">'promise end'</span><span class="pl-kos">)</span>
<span class="pl-kos">}</span><span class="pl-kos">)</span>

<span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-s">'script end'</span><span class="pl-kos">)</span></pre></div>]]></description>
</item>
<item>
  <title><![CDATA[CheatSheets for Developers]]></title>
  <link>https://github.com/lencx/dev/discussions/21</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/21</guid>
  <pubDate>2022-03-30</pubDate>
  <description><![CDATA[<p dir="auto">随着网络编程技术的飞速发展，我们需要学习的知识量也在不断增加。有时您将无法记住编程语言或框架的所有语法、方法...... 为了解决上述问题，Cheat Sheet 应运而生。它将以系统和直观的方式综合所有语法、概念......，使您可以轻松找到在开发过程中应用的内容。</p>

<hr>
<ul dir="auto">
<li><a href="http://www.cheat-sheets.org/" rel="nofollow">Cheat-Sheets.org</a> - All cheat sheets, round-ups, quick reference cards, quick reference guides and quick reference sheets in one page. The only one you need.</li>
<li><a href="https://github.com/LeCoupa/awesome-cheatsheets">Awesome Cheatsheets</a> - <g-emoji class="g-emoji" alias="woman_technologist" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f4bb.png">👩‍💻</g-emoji><g-emoji class="g-emoji" alias="man_technologist" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f4bb.png">👨‍💻</g-emoji> Awesome cheatsheets for popular programming languages, frameworks and development tools. They include everything you should know in one single file.</li>
<li><a href="https://cheatography.com/" rel="nofollow">1540 Programming Cheat Sheets - Cheatography.com: Cheat Sheets For Every Occasion</a> - Over 4,000 Free Cheat Sheets, Revision Aids and Quick References!</li>
<li><a href="https://devhints.io/" rel="nofollow">Devhints — TL;DR for developer documentation</a> - A ridiculous collection of web development cheatsheets · One-page guide to</li>
<li><a href="https://github.com/yangshun/tech-interview-handbook">Tech Interview Handbook</a> - <g-emoji class="g-emoji" alias="100" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png">💯</g-emoji> Curated interview preparation materials for busy engineers</li>
<li><a href="https://overapi.com/" rel="nofollow">OverAPI.com | Collecting all the cheat sheets</a> - OverAPI.com is a site collecting all the cheatsheets,all!</li>
</ul>
<h2 dir="auto">Front-end</h2>
<ul dir="auto">
<li><a href="https://github.com/mechaniac/Map-of-Javascript">map of javascript</a> - Javascript on one sheet. (and one for algorithms)</li>
<li><a href="http://www.cheat-sheets.org/sites/javascript.su/" rel="nofollow">JavaScript in one page</a></li>
<li><a href="https://github.com/carltheperson/magic-typescript">Magic TypeScript</a> - A cheat sheet of TypeScript’s most important/magic features</li>
</ul>
<h2 dir="auto">Rust</h2>
<ul dir="auto">
<li><a href="https://github.com/usagi/rust-memory-container-cs">Rust Memory Container Cheat-sheet</a></li>
</ul>
<hr>
<p dir="auto">[更新中...]</p>]]></description>
</item>
<item>
  <title><![CDATA[Awesome CSS]]></title>
  <link>https://github.com/lencx/dev/discussions/35</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/35</guid>
  <pubDate>2022-06-20</pubDate>
  <description><![CDATA[<h2 dir="auto">Guide</h2>
<ul dir="auto">
<li><a href="https://web.dev/learn/css" rel="nofollow">Learn CSS</a> - An evergreen CSS course and reference to level up your web styling expertise.</li>
<li><a href="https://github.com/chokcoco/iCSS">iCSS</a> - CSS 奇技淫巧</li>
<li><a href="https://css-tricks.com" rel="nofollow">CSS-Tricks</a> - Daily articles about CSS, HTML, JavaScript, and all things related to web design and development.</li>
<li><a href="https://css-weekly.com/archives" rel="nofollow">CSS Weekly</a> - An archive of all previously released newsletter issues.</li>
<li><a href="https://www.joshwcomeau.com/" rel="nofollow">Josh W Comeau</a> - Friendly tutorials for developers. Focus on React, CSS, Animation, and more!</li>
</ul>
<h2 dir="auto">Post</h2>
<ul dir="auto">
<li>:is
<ul dir="auto">
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:is" rel="nofollow">[MDN] :is() (:matches(), :any())</a></li>
<li><a href="https://web.dev/css-is-and-where" rel="nofollow">New CSS functional pseudo-class selectors :is() and :where()</a></li>
<li><a href="https://css-tricks.com/almanac/selectors/i/is" rel="nofollow">[CSS-TRICKS] :is</a></li>
</ul>
</li>
</ul>]]></description>
</item>
<item>
  <title><![CDATA[Awesome Node.js]]></title>
  <link>https://github.com/lencx/dev/discussions/23</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/23</guid>
  <pubDate>2022-06-22</pubDate>
  <description><![CDATA[<ul dir="auto">
<li><a href="https://github.com/cacjs/cac">cac</a> - Simple yet powerful framework for building command-line apps.</li>
<li><a href="https://github.com/chalk/chalk">chalk</a> - <g-emoji class="g-emoji" alias="crayon" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f58d.png">🖍</g-emoji> Terminal string styling done right
<ul dir="auto">
<li><a href="https://github.com/marvinhagemeister/kolorist">kolorist</a> - Tiny library to put colors into stdin/stdout <g-emoji class="g-emoji" alias="tada" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png">🎉</g-emoji></li>
</ul>
</li>
<li><a href="https://github.com/sindresorhus/ora">ora</a> - Elegant terminal spinner
<ul dir="auto">
<li><a href="https://github.com/jcarpanelli/spinnies">spinnies</a> - Node.js module to create and manage multiple spinners in command-line interface programs</li>
</ul>
</li>
<li><a href="https://github.com/enquirer/enquirer">enquirer</a> - Stylish, intuitive and user-friendly prompts, for Node.js. Used by eslint, webpack, Generate, lint-staged, pm2, gluegun, hygen, GitHub Actions Toolkit, @airbnb/nimbus, and many others!</li>
<li><a href="https://github.com/google/zx">zx</a> - A tool for writing better scripts</li>
<li><a href="https://github.com/substack/minimist">minimist</a> - parse argument options
<ul dir="auto">
<li><a href="https://github.com/vercel/arg">arg</a> - arg is an unopinionated, no-frills CLI argument parser.</li>
</ul>
</li>
<li><a href="https://github.com/visionmedia/debug">debug</a> - A tiny JavaScript debugging utility modelled after Node.js core's debugging technique. Works in Node.js and web browsers</li>
<li><a href="https://github.com/sindresorhus/execa">execa</a> - Process execution for humans</li>
<li><a href="https://github.com/npm/node-semver">node-semver</a> - The semver parser for node (the one npm uses)</li>
<li><a href="https://github.com/unjs/consola">consola</a> - Elegant Console Logger for Node.js and Browser <g-emoji class="g-emoji" alias="koala" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f428.png">🐨</g-emoji></li>
<li><a href="https://github.com/antfu/esno">esno</a> - TypeScript / ESNext node runtime powered by esbuild</li>
<li><a href="https://github.com/antfu/ni">ni</a> - <g-emoji class="g-emoji" alias="bulb" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a1.png">💡</g-emoji> Use the right package manager</li>
<li><a href="https://github.com/lukeed/sade">sade</a> - Sade is a small but powerful tool for building command-line interface (CLI) applications for Node.js that are fast, responsive, and helpful!</li>
</ul>
<h3 dir="auto">fs</h3>
<ul dir="auto">
<li><a href="https://github.com/isaacs/rimraf">rimraf</a> - A <code class="notranslate">rm -rf</code> util for nodejs
<ul dir="auto">
<li><a href="https://github.com/sindresorhus/del">del</a> - Delete files and directories</li>
</ul>
</li>
<li><a href="https://github.com/substack/node-mkdirp">mkdirp</a> - Recursively mkdir, like <code class="notranslate">mkdir -p</code>, but in node.js</li>
<li><a href="https://github.com/jprichardson/node-fs-extra">Node.js: fs-extra</a> - Node.js: extra methods for the fs object like copy(), remove(), mkdirs()</li>
<li><a href="https://github.com/mrmlnc/fast-glob">fast-glob</a> - <g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji> It's a very fast and efficient glob library for Node.js
<ul dir="auto">
<li><a href="https://github.com/sindresorhus/globby">globby</a> - User-friendly glob matching</li>
</ul>
</li>
</ul>]]></description>
</item>
<item>
  <title><![CDATA[Awesome WebAssembly]]></title>
  <link>https://github.com/lencx/dev/discussions/41</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/41</guid>
  <pubDate>2022-06-13</pubDate>
  <description><![CDATA[<h2 dir="auto">Guide</h2>
<ul dir="auto">
<li><a href="https://developer.mozilla.org/zh-CN/docs/WebAssembly" rel="nofollow">MDN WebAssembly</a></li>
<li><a href="https://hacks.mozilla.org/category/webassembly/" rel="nofollow">[Mozilla Hacks] WebAssembly Articles</a> - Articles posted in WebAssembly</li>
<li><a href="https://webassembly.org" rel="nofollow">webassembly.org</a> - WebAssembly (abbreviated Wasm) is a binary instruction format for a stack-based virtual machine. Wasm is designed as a portable compilation target for programming languages, enabling deployment on the web for client and server applications.</li>
<li><a href="https://bytecodealliance.org/articles/" rel="nofollow">Bytecode Alliance</a> - The Bytecode Alliance is a nonprofit organization dedicated to creating secure new software foundations, building on standards such as WebAssembly and WebAssembly System Interface (WASI).</li>
<li><a href="https://rustwasm.github.io/docs/book" rel="nofollow">Rust <g-emoji class="g-emoji" alias="crab" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f980.png">🦀</g-emoji>   and WebAssembly <g-emoji class="g-emoji" alias="spider_web" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f578.png">🕸</g-emoji>   </a> - This small book describes how to use Rust and WebAssembly together.</li>
<li><a href="https://github.com/appcypher/awesome-wasm-langs">Awesome WebAssembly Languages</a> - <g-emoji class="g-emoji" alias="sunglasses" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60e.png">😎</g-emoji>  A curated list of languages that compile directly to or have their VMs in WebAssembly</li>
<li><a href="https://wasmweekly.news" rel="nofollow">WebAssembly Weekly</a> - A weekly newsletter for keeping on top of what's new in the world of WebAssembly, with tutorials, examples, articles, and more.</li>
<li><a href="https://github.com/mbasso/awesome-wasm">Awesome Wasm</a> - <g-emoji class="g-emoji" alias="sunglasses" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60e.png">😎</g-emoji>  Curated list of awesome things regarding WebAssembly (wasm) ecosystem.</li>
<li><a href="https://wasmbyexample.dev/home.en-us.html" rel="nofollow">Wasm By Example</a> - A hands-on introduction into WebAssembly ( Wasm ). Containing simple wasm examples and wasm tutorials on how to implement concepts and various tasks using WebAssembly.</li>
</ul>
<h2 dir="auto">WASI &amp; VM &amp; VDOM</h2>
<ul dir="auto">
<li><a href="https://github.com/bytecodealliance/wasmtime">wasmtime</a> - Standalone JIT-style runtime for WebAssembly, using Cranelift</li>
<li><a href="https://github.com/wasm3/wasm3">Wasm3</a> - <g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji>  The fastest WebAssembly interpreter, and the most universal runtime</li>
<li><a href="https://github.com/wasmerio/wasmer">Wasmer</a> - <g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji>  The leading WebAssembly Runtime supporting WASI and Emscripten.</li>
<li><a href="https://github.com/bytecodealliance/lucet">Lucet</a> - Lucet, the Sandboxing WebAssembly Compiler.</li>
<li><a href="https://github.com/WasmEdge/WasmEdge">WasmEdge</a> - WasmEdge Runtime is a high-performance, extensible, and hardware optimized WebAssembly Virtual Machine for automotive, cloud, AI, and blockchain applications.</li>
<li><a href="https://github.com/mbasso/asm-dom">asm-dom</a> - A minimal WebAssembly virtual DOM to build C++ SPA (Single page applications)</li>
</ul>
<h2 dir="auto">Tools</h2>
<ul dir="auto">
<li><a href="https://wapm.io" rel="nofollow">wapm</a> - <code class="notranslate">WAPM</code> is the WebAssembly Package Manager.</li>
<li><a href="https://github.com/thedodd/trunk">trunk</a> - Build, bundle &amp; ship your Rust WASM application to the web.</li>
<li><a href="https://github.com/bytecodealliance/wasm-tools">wasm-tools</a> - Rust tooling for low-level manipulation of WebAssembly modules.</li>
<li><a href="https://github.com/rustwasm/wasm-pack">wasm-pack</a> - <g-emoji class="g-emoji" alias="package" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4e6.png">📦</g-emoji>  <g-emoji class="g-emoji" alias="sparkles" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2728.png">✨</g-emoji>  your favorite rust -&gt; wasm workflow tool!</li>
</ul>
<h2 dir="auto">Optimizing</h2>
<ul dir="auto">
<li><a href="https://rustwasm.github.io/book/reference/code-size.html" rel="nofollow">Shrinking <code class="notranslate">.wasm</code> Code Size</a>
<ul dir="auto">
<li><a href="https://github.com/WebAssembly/binaryen">Binaryen</a> - Binaryen is a compiler and toolchain infrastructure library for WebAssembly, written in C++. It aims to make compiling to WebAssembly easy, fast, and effective.</li>
<li><a href="https://github.com/rustwasm/twiggy">Twiggy</a> - Twiggy <g-emoji class="g-emoji" alias="seedling" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f331.png">🌱</g-emoji>  is a code size profiler</li>
</ul>
</li>
<li><a href="https://emscripten.org/docs/optimizing/Optimizing-Code.html" rel="nofollow">Optimizing Code (<code class="notranslate">cpp</code>)</a></li>
<li><a href="https://arxiv.org/pdf/2002.10213.pdf" rel="nofollow">Superoptimization of WebAssembly Bytecode</a></li>
</ul>
<h2 dir="auto">Open Source</h2>
<ul dir="auto">
<li><a href="https://github.com/lencx/vite-plugin-rsw">vite-plugin-rsw</a> - <g-emoji class="g-emoji" alias="crab" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f980.png">🦀</g-emoji>  wasm-pack plugin for Vite</li>
<li><a href="https://github.com/lencx/rsw-node">rsw-node</a> - <g-emoji class="g-emoji" alias="white_circle" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26aa.png">⚪️</g-emoji>  <code class="notranslate">wasm-pack build</code> executed in remote deployment</li>
<li><a href="https://github.com/GoogleChromeLabs/wasi-fs-access">wasi-fs-access</a> - This is a demo shell powered by WebAssembly, WASI, Asyncify and File System Access API.</li>
<li><a href="https://ffmpegwasm.github.io" rel="nofollow">FFMPEG.WASM</a> - ffmpeg.wasm is a pure WebAssembly / JavaScript port of FFmpeg. It enables video &amp; audio record, convert and stream right inside browsers.</li>
<li><a href="https://github.com/ColinEberhardt/wasm-rust-chip8">wasm-rust-chip8</a> - A WebAssembly CHIP-8 emulator written with Rust</li>
<li><a href="https://bbodi.github.io/notecalc3" rel="nofollow">NoteCalc</a> -  is a handy notepad with a smart builtin calculator.</li>
<li><a href="https://github.com/GraphiteEditor/Graphite">Graphite</a> - Powerful 2D vector and raster editing: procedural and nondestructive. (Photoshop + Illustrator + Houdini = Graphite)</li>
<li><a href="https://github.com/PaddiM8/kalker">Kalker/kalk</a> - is a calculator with math syntax that supports user-defined variables and functions, complex numbers, and estimation of derivatives and integrals</li>
<li><a href="https://github.com/torch2424/wasmboy">wasmboy</a> - Game Boy / Game Boy Color Emulator Library, <g-emoji class="g-emoji" alias="video_game" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f3ae.png">🎮</g-emoji>   written for WebAssembly using AssemblyScript. <g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji>  Demos built with Preact and Svelte. <g-emoji class="g-emoji" alias="atom_symbol" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/269b.png">⚛️</g-emoji></li>
<li><a href="https://github.com/38/plotters">Plotters</a> - A rust drawing library for high quality data plotting for both WASM and native, statically and realtimely <g-emoji class="g-emoji" alias="crab" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f980.png">🦀</g-emoji>   <g-emoji class="g-emoji" alias="chart_with_upwards_trend" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4c8.png">📈</g-emoji>  <g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji></li>
<li><a href="https://github.com/tomaka/redshirt">redshirt</a> - The redshirt operating system is an experiment to build some kind of operating-system-like environment where executables are all in Wasm and are loaded from an IPFS-like decentralized network.</li>
<li><a href="https://github.com/silvia-odwyer/photon">Photon</a> - <g-emoji class="g-emoji" alias="zap" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a1.png">⚡</g-emoji>  Rust/WebAssembly image processing library</li>
<li><a href="https://github.com/rsms/markdown-wasm">markdown-wasm</a> - Markdown parser and HTML generator implemented in WebAssembly, based on md4c.</li>
<li><a href="https://github.com/Daninet/hash-wasm">hash-wasm</a> - Hash-WASM is a <g-emoji class="g-emoji" alias="zap" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a1.png">⚡</g-emoji>  lightning fast<g-emoji class="g-emoji" alias="zap" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a1.png">⚡</g-emoji>  hash function library for browsers and Node.js. It is using hand-tuned WebAssembly binaries to calculate the hash faster than other libraries.</li>
<li><a href="https://github.com/cloudflare/serde-wasm-bindgen">serde-wasm-bindgen</a> - Native integration of <a href="https://serde.rs" rel="nofollow">Serde</a> with <a href="https://github.com/rustwasm/wasm-bindgen">wasm-bindgen</a></li>
<li><a href="https://github.com/sycamore-rs/sycamore">sycamore</a> - A reactive DOM library for Rust in WASM.</li>
<li><a href="https://github.com/samthor/gumnut">gumnut</a> - JS parser in Web Assembly / C.</li>
<li><a href="https://github.com/Birch-san/box2d-wasm">box2d-wasm</a> - Box2D physics engine compiled to WebAssembly. Supports TypeScript and ES modules.</li>
<li><a href="https://github.com/tensorflow/tfjs">TensorFlow.js</a> - A WebGL accelerated JavaScript library for training and deploying ML models.</li>
</ul>
<h2 dir="auto">Article</h2>
<ul dir="auto">
<li><a href="https://medium.com/@alshdavid/a-vision-for-future-web-technologies-wasm-pwas-9f8c6e1fe6b0" rel="nofollow">A vision for future Web Technologies — WASM &amp; PWAs</a></li>
<li><a href="https://thenewstack.io/the-three-pillars-of-webassembly/" rel="nofollow">The Three Pillars of WebAssembly</a></li>
<li><a href="https://www.cloudsavvyit.com/13696/why-webassembly-frameworks-are-the-future-of-the-web/" rel="nofollow">Why WebAssembly Frameworks Are the Future of the Web</a></li>
<li><a href="https://lencx.github.io/book/wasm/rust_wasm_frontend.html" rel="nofollow">WebAssembly入门</a></li>
<li><a href="https://www.yuque.com/kiwenlau/blog/zg3349" rel="nofollow">十年磨一剑，WebAssembly是如何诞生的？</a></li>
<li><a href="https://blog.scottlogic.com/2021/06/21/state-of-wasm.html" rel="nofollow">The State of WebAssembly 2021</a></li>
<li><a href="https://web.dev/webassembly-threads/" rel="nofollow">Using WebAssembly threads from C, C++ and Rust</a></li>
<li><a href="https://blog.discourse.org/2021/07/faster-user-uploads-on-discourse-with-rust-webassembly-and-mozjpeg/" rel="nofollow">Faster (and smaller) uploads in Discourse with Rust, WebAssembly and MozJPEG</a></li>
<li><a href="https://wasmbook.com/" rel="nofollow">WasmBook</a> - Rick Battagline's WebAssembly Playground</li>
<li><a href="https://surma.dev/things/js-to-asc/" rel="nofollow">Is WebAssembly magic performance pixie dust?</a></li>
<li><a href="https://www.edx.org/course/webassembly-actors-from-cloud-to-edge" rel="nofollow">WebAssembly Actors: From Cloud to Edge</a> - Embrace the actor model to build portable, secure, lightweight WebAssembly modules that thrive in the cloud, at the edge, and anywhere in between.</li>
<li><a href="https://blog.ttulka.com/learning-webassembly-series" rel="nofollow">Learning WebAssembly Series</a> - A series of learning texts covering the first steps with WebAssembly for complete beginners.</li>
<li><a href="https://blog.scottlogic.com/2020/11/23/ffmpeg-webassembly.html" rel="nofollow">In-browser transcoding of video files with FFmpeg and WebAssembly</a></li>
<li><a href="https://hacks.mozilla.org/2019/03/standardizing-wasi-a-webassembly-system-interface" rel="nofollow">Standardizing WASI: A system interface to run WebAssembly outside the web</a></li>
<li><a href="https://paulbutler.org/2020/the-webassembly-app-gap" rel="nofollow">The WebAssembly App Gap</a></li>
<li><a href="https://developer.ibm.com/articles/why-webassembly-and-rust-together-improve-nodejs-performance" rel="nofollow">Why using WebAssembly and Rust together improves Node.js performance</a></li>
<li><a href="https://v8.dev/docs/wasm-compilation-pipeline" rel="nofollow">[V8] WebAssembly compilation pipeline</a></li>
<li><a href="https://pspdfkit.com/blog/2018/optimize-webassembly-startup-performance/" rel="nofollow">Optimizing WebAssembly Startup Time</a></li>
<li><a href="https://www.cs.cornell.edu/courses/cs6120/2019fa/blog/wasm/" rel="nofollow">Bringing You Up to Speed on How Compiling WebAssembly is Faster</a></li>
<li><a href="https://mrale.ph/blog/2018/02/03/maybe-you-dont-need-rust-to-speed-up-your-js.html#getting-the-code" rel="nofollow">Maybe you don't need Rust and WASM to speed up your JS</a></li>
<li><a href="https://thenewstack.io/using-web-assembly-written-in-rust-on-the-server-side/" rel="nofollow">Using WebAssembly Written in Rust on the Server-Side</a></li>
<li><a href="https://thenewstack.io/the-pain-of-debugging-webassembly/" rel="nofollow">The Pain of Debugging WebAssembly</a></li>
<li><a href="https://thenewstack.io/kubecon-eu-why-webassembly-is-more-than-a-javascript-replacement/" rel="nofollow">KubeCon EU: WebAssembly Is More Than a JavaScript Replacement</a></li>
<li><a href="https://thenewstack.io/why-webassembly-modules-could-be-the-new-de-facto-unit-of-compute/" rel="nofollow">Why WebAssembly Modules Could Be the New de Facto Unit of Compute</a></li>
<li><a href="https://www.infinyon.com/blog/2021/08/smartstream-aggregates/" rel="nofollow">Aggregate streaming data in real-time with WebAssembly</a></li>
<li><a href="https://blog.logrocket.com/full-stack-rust-a-complete-tutorial-with-examples/" rel="nofollow">Full-stack Rust: A complete tutorial with examples</a></li>
</ul>]]></description>
</item>
<item>
  <title><![CDATA[Awesome GitHub]]></title>
  <link>https://github.com/lencx/dev/discussions/30</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/30</guid>
  <pubDate>2022-07-06</pubDate>
  <description><![CDATA[<p dir="auto">GitHub 全球最大的代码社区，这里有大量优秀的项目及源代码。下面这些插件针对 GitHub 做了很多功能优化，可以提高效率。</p>
<hr>
<ul dir="auto">
<li><a href="https://github.com/EnixCoda/Gitako">Gitako</a> - <g-emoji class="g-emoji" alias="octopus" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f419.png">🐙</g-emoji> File tree extension for GitHub on Chrome &amp; Firefox &amp; Edge
<ul dir="auto">
<li><a href="https://www.octotree.io/" rel="nofollow">Octotree</a> - GitHub on steroids</li>
</ul>
</li>
<li><a href="https://github.com/zenorocha/codecopy">CodeCopy</a> - A browser extension that adds copy to clipboard buttons on every code block</li>
<li><a href="https://github.com/softvar/enhanced-github">Enhanced GitHub</a> - <g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji> Browser extension to display size of each file, download link and copy file contents directly to the clipboard</li>
<li><a href="https://github.com/homerchen19/github-file-icons">File Icons for GitHub and GitLab</a> - <g-emoji class="g-emoji" alias="rainbow" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f308.png">🌈</g-emoji> <g-emoji class="g-emoji" alias="card_index_dividers" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f5c2.png">🗂</g-emoji> A browser extension which gives different filetypes different icons to GitHub, GitLab, gitea and gogs.</li>
<li><a href="https://github.com/OctoLinker/OctoLinker">OctoLinker</a> - Links together, what belongs together</li>
<li><a href="https://github.com/sindresorhus/refined-github">Refined GitHub</a> - <img class="emoji" title=":octocat:" alt=":octocat:" src="https://github.githubassets.com/images/icons/emoji/octocat.png" height="20" width="20" align="absmiddle"> Browser extension that simplifies the GitHub interface and adds useful features</li>
<li><a href="https://github.com/kamranahmedse/githunt">GitHunt</a> - Hunt the most starred projects on any date on GitHub</li>
<li><a href="">Sourcegraph - Universal Code Search</a> - Find and fix things across all of your code with Sourcegraph universal code search.
<ul dir="auto">
<li><a href="https://chrome.google.com/webstore/detail/sourcegraph/dgjhfomjieaadpoljlnidmbgkdffpack" rel="nofollow">chrome extensions</a></li>
</ul>
</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=GitHub.remotehub" rel="nofollow">[vscode] Remote Repositories</a> - Remotely browse and edit a GitHub repository</li>
</ul>]]></description>
</item>
<item>
  <title><![CDATA[Awesome WebGL]]></title>
  <link>https://github.com/lencx/dev/discussions/39</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/39</guid>
  <pubDate>2022-06-20</pubDate>
  <description><![CDATA[<h2 dir="auto">Guide</h2>
<ul dir="auto">
<li>Modern WebGL tutorials that teach WebGL from basic principles
<ul dir="auto">
<li><a href="https://webglfundamentals.org" rel="nofollow">WebGL Fundamentals</a></li>
<li><a href="https://webgl2fundamentals.org" rel="nofollow">WebGL2 Fundamentals</a></li>
</ul>
</li>
<li><a href="https://get.webgl.org" rel="nofollow">Your browser supports WebGL?</a>
<ul dir="auto">
<li><a href="https://www.khronos.org/webgl" rel="nofollow">WebGL Overview</a>: WebGL is a cross-platform, royalty-free web standard for a low-level 3D graphics API based on OpenGL ES, exposed to ECMAScript via the HTML5 Canvas element. Developers familiar with OpenGL ES 2.0 will recognize WebGL as a Shader-based API…</li>
</ul>
</li>
<li><a href="https://github.com/akira-cn/ICG-WebGL">ICG-WebGL</a>: 交互式计算机图形学——基于WebGL的自顶向下方法（第七版）的例子与练习题</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API" rel="nofollow">WebGL: 2D and 3D graphics for the web</a>: WebGL (Web Graphics Library) is a JavaScript API for rendering high-performance interactive 3D and 2D graphics within any compatible web browser without the use of plug-ins.</li>
</ul>
<h2 dir="auto">Open Source</h2>
<ul dir="auto">
<li><a href="https://d3js.org/" rel="nofollow">D3.js - Data-Driven Documents</a> - D3 is a JavaScript library for visualizing data with HTML, SVG, and CSS.</li>
<li><a href="https://threejs.org/" rel="nofollow">Three.js</a> - JavaScript 3D Library</li>
<li><a href="https://github.com/oframe/ogl">ogl</a> - Minimal WebGL Library</li>
<li><a href="https://github.com/oasis-engine/engine">oasis-engine</a> - Oasis Engine is a web-first and mobile-first high-performance real-time development platform.</li>
<li><a href="https://github.com/deepkolos/three-platformize">three-platformize</a> - 一个让 THREE 平台化的项目，目前已适配微信，淘宝，头条小程序，微信小游戏</li>
</ul>
<h2 dir="auto">Article</h2>
<ul dir="auto">
<li><a href="https://tympanus.net/codrops/2021/08/02/magical-marbles-in-three-js/" rel="nofollow">Magical Marbles in Three.js</a></li>
</ul>]]></description>
</item>
<item>
  <title><![CDATA[Awesome JavaScript]]></title>
  <link>https://github.com/lencx/dev/discussions/37</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/37</guid>
  <pubDate>2022-06-08</pubDate>
  <description><![CDATA[<p dir="auto">JavaScript ( JS ) 是一种具有 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/First-class_Function" rel="nofollow">函数优先</a> 的轻量级，解释型或即时编译型的编程语言。JavaScript 是一种基于 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Prototype-based_programming" rel="nofollow">原型编程</a>、多范式的动态脚本语言，并且支持面向对象、命令式和声明式（如函数式编程）风格。</p>
<hr>
<h2 dir="auto">Weekly</h2>
<ul dir="auto">
<li><a href="https://javascriptweekly.com/" rel="nofollow">JavaScript Weekly</a> - A newsletter of JavaScript articles, news and cool projects</li>
<li><a href="https://nodeweekly.com/" rel="nofollow">Node Weekly</a> - A free, once–weekly e-mail round-up of Node.js news and articles</li>
<li><a href="https://reactjs.org/" rel="nofollow">React</a> - A JavaScript library for building user interfaces
<ul dir="auto">
<li><a href="https://react.statuscode.com/" rel="nofollow">React Status</a> - A weekly roundup of the latest React and React Native links and tutorials.</li>
<li><a href="https://reactnewsletter.com/" rel="nofollow">React Newsletter</a> - Stay up to date on the latest React news, tutorials, resources, and more. Delivered every Tuesday, for free.</li>
<li><a href="https://reactdigest.net/" rel="nofollow">React Digest</a> - React Digest is a weekly newsletter with the five most interesting stories in front-end React development <g-emoji class="g-emoji" alias="atom_symbol" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/269b.png">⚛️</g-emoji> <g-emoji class="g-emoji" alias="woman_technologist" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f4bb.png">👩‍💻</g-emoji>.</li>
</ul>
</li>
<li><a href="https://vuejs.org/" rel="nofollow">Vue</a> - The Progressive JavaScript Framework
<ul dir="auto">
<li><a href="https://www.vueweekly.dev/" rel="nofollow">VueWeekly .dev</a> - <g-emoji class="g-emoji" alias="wave" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f44b.png">👋</g-emoji> A free, weekly email digest of Vue.js news and articles.</li>
<li><a href="https://vuejsdevelopers.com/newsletter/" rel="nofollow">Vue.js Developers Newsletter</a> - The best Vue articles in your inbox, weekly</li>
</ul>
</li>
</ul>
<h2 dir="auto">Sheet</h2>
<ul dir="auto">
<li><a href="https://github.com/mechaniac/Map-of-Javascript">map of javascript</a> - Javascript on one sheet. (and one for algorithms)</li>
</ul>
<h2 dir="auto">JavaScript</h2>
<ul dir="auto">
<li><a href="https://exploringjs.com/impatient-js/toc.html" rel="nofollow">JavaScript for impatient programmers</a></li>
<li><a href="https://github.com/denysdovhan/wtfjs">What the f*ck JavaScript?</a>
<ul dir="auto">
<li><a href="https://jsisweird.com/" rel="nofollow">That JavaScript quiz you found on Reddit</a> - JS is weird: A fun and tricky JavaScript quiz</li>
</ul>
</li>
<li><a href="https://javascript.info/" rel="nofollow">The Modern JavaScript Tutorial</a> - Modern JavaScript Tutorial: simple, but detailed explanations with examples and tasks, including: closures, document and events, object oriented programming and more.</li>
</ul>
<h2 dir="auto">TypeScript</h2>
<ul dir="auto">
<li><a href="https://www.typescriptlang.org/docs/handbook/intro.html" rel="nofollow">The TypeScript Handbook</a></li>
<li><a href="https://github.com/type-challenges/type-challenges">type-challenges</a> - Collection of TypeScript type challenges with online judge</li>
</ul>
]]></description>
</item>
<item>
  <title><![CDATA[关于 requestIdleCallback]]></title>
  <link>https://github.com/lencx/dev/discussions/19</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/19</guid>
  <pubDate>2022-03-30</pubDate>
  <description><![CDATA[<ul dir="auto">
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestIdleCallback" rel="nofollow">[MDN] requestIdleCallback</a></li>
<li><a href="https://developers.google.com/web/updates/2015/08/using-requestidlecallback" rel="nofollow">Using requestIdleCallback</a></li>
</ul>]]></description>
</item>
<item>
  <title><![CDATA[Awesome Design]]></title>
  <link>https://github.com/lencx/dev/discussions/43</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/43</guid>
  <pubDate>2022-05-10</pubDate>
  <description><![CDATA[<ul dir="auto">
<li><a href="https://dribbble.com/" rel="nofollow">Dribbble - Discover the World’s Top Designers &amp; Creative Professionals</a> - Dribbble is where designers gain inspiration, feedback, community, and jobs and is your best resource to discover and connect with designers worldwide.</li>
<li><a href="https://uxmisfit.com/" rel="nofollow">UXMISFIT.COM</a> - Different Look at UX | Time Saving Toolkits Learn useful design tips. Get UX &amp; UI Resources. Read inspiring articles. Blog for all designers who want to improve their skills and design better.</li>
</ul>
<h3 dir="auto">Tools</h3>
<ul dir="auto">
<li><a href="https://www.sketch.com/" rel="nofollow">The digital design platform · Sketch</a> - The design platform used by over one million people — from freelancers, to the world’s largest teams.</li>
<li><a href="https://spline.design/" rel="nofollow">Spline - Design tool for 3D web experiences</a> - Create web-based 3D experiences</li>
</ul>]]></description>
</item>
<item>
  <title><![CDATA[Awesome Terminal]]></title>
  <link>https://github.com/lencx/dev/discussions/48</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/48</guid>
  <pubDate>2022-08-03</pubDate>
  <description><![CDATA[<ul dir="auto">
<li><a href="https://github.com/microsoft/terminal">«win» Windows Terminal</a> - The new Windows Terminal and the original Windows console host, all in the same place!</li>
<li><a href="https://github.com/lencx/z/discussions/27#discussioncomment-1031030">ohmyzsh</a> - Oh My Zsh will not make you a 10x developer...but you may feel like one.</li>
<li><a href="https://github.com/rupa/z">z</a> - jump around.</li>
<li><a href="https://github.com/cli/cli">GitHub CLI</a> - GitHub’s official command line tool.</li>
<li><a href="https://asciinema.org" rel="nofollow">asciinema</a> - Record and share your terminal sessions, the right way.</li>
<li><a href="https://github.com/sharkdp/bat">bat</a> - A cat(1) clone with wings.</li>
<li><a href="https://github.com/dylanaraps/fff">fff</a> - <g-emoji class="g-emoji" alias="file_folder" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4c1.png">📁</g-emoji> A simple file manager written in bash.</li>
<li><a href="https://github.com/tmux/tmux">tmux</a> - is a terminal multiplexer.</li>
<li><a href="https://github.com/jonas/tig">tig</a> - Text-mode interface for git.</li>
<li><a href="https://github.com/lencx/z/discussions/27#discussioncomment-1031084">starship</a> - <g-emoji class="g-emoji" alias="comet" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2604.png">☄</g-emoji><g-emoji class="g-emoji" alias="milky_way" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f30c.png">🌌️</g-emoji> The minimal, blazing-fast, and infinitely customizable prompt for any shell!</li>
<li><a href="https://github.com/kornelski/cavif">cavif</a> - PNG/JPEG to AVIF converter.</li>
<li><a href="https://github.com/BurntSushi/ripgrep">ripgrep</a> - ripgrep recursively searches directories for a regex pattern.</li>
<li><a href="https://github.com/sharkdp/fd">fd</a> - A simple, fast and user-friendly alternative to 'find'</li>
<li><a href="https://github.com/ogham/exa">exa</a> - A modern version of ‘ls’.</li>
<li><a href="https://github.com/Peltoche/lsd">lsd</a> - The next gen ls command.</li>
<li><a href="https://github.com/sharkdp/hexyl">hexyl</a> - A command-line hex viewer.</li>
<li><a href="https://github.com/BurntSushi/xsv">xsv</a> - A fast CSV command line toolkit written in Rust.</li>
<li><a href="https://github.com/wfxr/csview">csview</a> - <g-emoji class="g-emoji" alias="fax" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4e0.png">📠</g-emoji> A high performance csv viewer with cjk/emoji support.</li>
<li><a href="https://github.com/nivekuil/rip">rip(Rm ImProved)</a> - A safe and ergonomic alternative to rm.</li>
<li><a href="https://github.com/vmchale/tin-summer">The Tin Summer</a> - Find build artifacts that are taking up disk space.</li>
<li><a href="https://github.com/saschagrunert/git-journal">git-journal</a> - <g-emoji class="g-emoji" alias="book" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d6.png">📖</g-emoji> The Git Commit Message and Changelog Generation Framework.</li>
<li><a href="https://gitlab.com/timvisee/ffsend" rel="nofollow">ffsend</a> - <g-emoji class="g-emoji" alias="mailbox_with_mail" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4ec.png">📬</g-emoji> Easily and securely share files from the command line. A fully featured Firefox Send client.</li>
<li><a href="https://github.com/XAMPPRocky/tokei">Tokei</a> - Count your code, quickly.</li>
<li><a href="https://github.com/sharkdp/hyperfine">hyperfine</a> - A command-line benchmarking tool.</li>
<li><a href="https://github.com/nerdypepper/eva">eva</a> - a calculator REPL, similar to bc(1)</li>
<li><a href="https://github.com/RazrFalcon/svgcleaner">svgcleaner</a> - svgcleaner could help you to clean up your SVG files from the unnecessary data.</li>
<li><a href="https://github.com/watchexec/watchexec">watchexec</a> - Executes commands in response to file modifications.</li>
<li><a href="https://github.com/dalance/procs">procs</a> - A modern replacement for ps written in Rust.</li>
<li><a href="https://github.com/cli/cli">GitHub CLI</a> - GitHub’s official command line tool.</li>
<li><a href="https://github.com/alacritty/alacritty">Alacritty</a> - A cross-platform, GPU-accelerated terminal emulator.</li>
<li><a href="https://github.com/willdoescode/nat">nat</a> - <g-emoji class="g-emoji" alias="zap" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a1.png">⚡️</g-emoji>the 'ls' replacement you never knew you needed<g-emoji class="g-emoji" alias="zap" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a1.png">⚡️</g-emoji></li>
</ul>]]></description>
</item>
<item>
  <title><![CDATA[JavaScript for impatient programmers (ES2021 edition)]]></title>
  <link>https://github.com/lencx/dev/discussions/20</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/20</guid>
  <pubDate>2022-06-11</pubDate>
  <description><![CDATA[<blockquote>
<p dir="auto">读书笔记: 创作不易，推荐购买作者正版书籍，<a href="https://exploringjs.com/impatient-js/" rel="nofollow">Buy the book</a></p>
</blockquote>
<h2 dir="auto"><a href="https://exploringjs.com/impatient-js/toc.html" rel="nofollow">目录 (Table of contents)</a></h2>
<details>
<summary>I BACKGROUND</summary>
<ol dir="auto">
<li>Before you buy the book</li>
<li>FAQ: book and supplementary material</li>
<li><a href="https://github.com/lencx/z/discussions/42#discussioncomment-924178">History and evolution of JavaScript</a></li>
<li>New JavaScript features</li>
<li><a href="https://github.com/lencx/z/discussions/42#discussioncomment-932038">FAQ: JavaScript</a></li>
</ol>
</details>
<details>
<summary>II FIRST STEPS</summary>
<ol start="6" dir="auto">
<li><a href="https://github.com/lencx/z/discussions/42#discussioncomment-932104">Using JavaScript: the big picture</a></li>
<li><a href="https://github.com/lencx/z/discussions/42#discussioncomment-942662">Syntax</a></li>
<li>Consoles: interactive JavaScript command lines</li>
<li>Assertion API</li>
<li>Getting started with quizzes and exercises</li>
</ol>
</details>
<details>
<summary>III VARIABLES AND VALUES</summary>
<ol start="11" dir="auto">
<li>Variables and assignment</li>
<li>Values</li>
<li>Operators</li>
</ol>
</details>
<details>
<summary>IV PRIMITIVE VALUES</summary>
<ol start="14" dir="auto">
<li>The non-values <code class="notranslate">undefined</code> and <code class="notranslate">null</code></li>
<li>Booleans</li>
<li>Numbers</li>
<li>Math</li>
<li>Bigints – arbitrary-precision integers [ES2020] (advanced)</li>
<li>Unicode – a brief introduction (advanced)</li>
<li>Strings</li>
<li>Using template literals and tagged templates</li>
<li>Symbols</li>
</ol>
</details>
<details>
<summary>V CONTROL FLOW AND DATA FLOW</summary>
<ol start="23" dir="auto">
<li>Control flow statements</li>
<li>Exception handling</li>
<li>Callable values</li>
<li>Evaluating code dynamically: <code class="notranslate">eval()</code>, <code class="notranslate">new Function()</code> (advanced)</li>
</ol>
</details>
<details>
<summary>VI MODULARITY</summary>
<ol start="27" dir="auto">
<li>Modules</li>
<li>Single objects</li>
<li>Prototype chains and classes</li>
</ol>
</details>
<details>
<summary>VII COLLECTIONS</summary>
<ol start="30" dir="auto">
<li>Synchronous iteration</li>
<li>Arrays (<code class="notranslate">Array</code>)</li>
<li>Typed Arrays: handling binary data (advanced)</li>
<li>Maps (<code class="notranslate">Map</code>)</li>
<li>WeakMaps (<code class="notranslate">WeakMap</code>) (advanced)</li>
<li>Sets (<code class="notranslate">Set</code>)</li>
<li>WeakSets (<code class="notranslate">WeakSet</code>) (advanced)</li>
<li>Destructuring</li>
<li>Synchronous generators (advanced)</li>
</ol>
</details>
<details>
<summary>VIII ASYNCHRONICITY</summary>
<ol start="39" dir="auto">
<li>Asynchronous programming in JavaScript</li>
<li>Promises for asynchronous programming [ES6]</li>
<li>Async functions</li>
<li>Asynchronous iteration</li>
</ol>
</details>
<details>
<summary>IX MORE STANDARD LIBRARY</summary>
<ol start="43" dir="auto">
<li>Regular expressions (<code class="notranslate">RegExp</code>)</li>
<li>Dates (<code class="notranslate">Date</code>)</li>
<li>Creating and parsing JSON (<code class="notranslate">JSON</code>)</li>
</ol>
</details>]]></description>
</item>
<item>
  <title><![CDATA[Data Structure And Algorithms]]></title>
  <link>https://github.com/lencx/dev/discussions/42</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/42</guid>
  <pubDate>2022-06-20</pubDate>
  <description><![CDATA[<ul dir="auto">
<li><a href="https://github.com/trekhleb/javascript-algorithms">JavaScript Algorithms and Data Structures</a>: <g-emoji class="g-emoji" alias="memo" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4dd.png">📝</g-emoji> Algorithms and data structures implemented in JavaScript with explanations and links to further readings.</li>
<li><a href="https://github.com/TheAlgorithms">The Algorithms</a>: Open Source resource for learning Data Structures &amp; Algorithms and their implementation in any Programming Language.</li>
<li><a href="https://github.com/EbTech/rust-algorithms">Contest Algorithms in Rust</a>: Common data structures and algorithms in Rust.</li>
<li><a href="https://github.com/labuladong/fucking-algorithm">labuladong 的算法小抄</a>: 刷算法全靠套路，认准 labuladong 就够了！English version supported! Crack LeetCode, not only how, but also why.</li>
<li><a href="https://github.com/geekxh/hello-algorithm">小浩学算法</a>: <g-emoji class="g-emoji" alias="earth_africa" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f30d.png">🌍</g-emoji> 东半球最酷的学习项目 | 1、我写的三十万字算法图解 2、千本开源电子书 3、100 张思维导图 4、100 篇大厂面经 5、30 个学习专题 <g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji> <g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji> <g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji> 右上角点个 star，加入我们万人学习群！English Supported！</li>
<li><a href="https://github.com/algorithm-visualizer"><g-emoji class="g-emoji" alias="fireworks" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f386.png">🎆</g-emoji>Interactive Online Platform that Visualizes Algorithms from Code</a>: <g-emoji class="g-emoji" alias="fireworks" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f386.png">🎆</g-emoji>Interactive Online Platform that Visualizes Algorithms from Code.</li>
<li><a href="https://github.com/halfrost/LeetCode-Go">LeetCode in Go</a>: <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji> Solutions to LeetCode by Go, 100% test coverage, runtime beats 100% / LeetCode 题解</li>
<li><a href="https://github.com/azl397985856/leetcode">azl397985856/leetcode</a> - LeetCode Solutions: A Record of My Problem Solving Journey.( leetcode题解，记录自己的leetcode解题之路。)</li>
</ul>]]></description>
</item>
<item>
  <title><![CDATA[在线翻译 & APP]]></title>
  <link>https://github.com/lencx/dev/discussions/22</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/22</guid>
  <pubDate>2022-03-30</pubDate>
  <description><![CDATA[<ul dir="auto">
<li><a href="https://www.deepl.com/translator" rel="nofollow">DeepL Translate: The world's most accurate translator</a> - See why millions translate with DeepL every day. Fast, accurate, and secure – translate texts and full document files instantly. Currently supported languages are: Bulgarian, Chinese, Czech, Danish, Dutch, English, Estonian, Finnish, French, German, Greek, Hungarian, Italian, Japanese, Latvian, Lithuanian, Polish, Portuguese, Romanian, Russian, Slovak, Slovenian, Spanish, and Swedish.</li>
<li><a href="https://translate.google.cn/" rel="nofollow">Google 翻译</a> - Google 的免费翻译服务可提供简体中文和另外 100 多种语言之间的互译功能，可让您即时翻译字词、短语和网页内容。</li>
<li><a href="https://github.com/ripperhe/Bob">Bob</a> - Bob 是一款 Mac 端翻译软件，支持划词翻译、截图翻译以及手动输入翻译。</li>
</ul>]]></description>
</item>
<item>
  <title><![CDATA[js 中的语句 & 表达式 & 分号]]></title>
  <link>https://github.com/lencx/dev/discussions/24</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/24</guid>
  <pubDate>2022-03-30</pubDate>
  <description><![CDATA[<ul dir="auto">
<li>语句是一段可以执行并执行某种操作的代码</li>
<li>表达式是一段代码，可以对其进行求值以产生一个值</li>
<li>表达式可以用作语句，被称为表达式语句。反之则不然：当上下文需要表达式时，不能使用语句</li>
<li>每条语句都以分号结尾</li>
<li>以块结尾的语句
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="function foo() {
  // ...
}
if (x &gt; 0) {
  // ...  
}"><pre><span class="pl-k">function</span> <span class="pl-en">foo</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
  <span class="pl-c">// ...</span>
<span class="pl-kos">}</span>
<span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-s1">x</span> <span class="pl-c1">&gt;</span> <span class="pl-c1">0</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
  <span class="pl-c">// ...  </span>
<span class="pl-kos">}</span></pre></div>
</li>
<li>控制语句的主体本身就是一个语句
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="while (condition)
  statement"><pre><span class="pl-k">while</span> <span class="pl-kos">(</span><span class="pl-s1">condition</span><span class="pl-kos">)</span>
  <span class="pl-s1">statement</span></pre></div>
</li>
</ul>
<hr>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="// 表达式 `bar()` 可以是表达式或语句——这取决于上下文
function foo() {
  console.log(bar()) // bar() 是表达式
  bar(); // bar(); 是表达式语句
}"><pre><span class="pl-c">// 表达式 `bar()` 可以是表达式或语句——这取决于上下文</span>
<span class="pl-k">function</span> <span class="pl-en">foo</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
  <span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-en">bar</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">)</span> <span class="pl-c">// bar() 是表达式</span>
  <span class="pl-en">bar</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">;</span> <span class="pl-c">// bar(); 是表达式语句</span>
<span class="pl-kos">}</span></pre></div>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="// 函数声明
function foo(x) {
  return x;
}

// 函数表达式（=右侧）
const fooo = function bar(x) {
  return x;
}"><pre><span class="pl-c">// 函数声明</span>
<span class="pl-k">function</span> <span class="pl-en">foo</span><span class="pl-kos">(</span><span class="pl-s1">x</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
  <span class="pl-k">return</span> <span class="pl-s1">x</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span>

<span class="pl-c">// 函数表达式（=右侧）</span>
<span class="pl-k">const</span> <span class="pl-en">fooo</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-en">bar</span><span class="pl-kos">(</span><span class="pl-s1">x</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
  <span class="pl-k">return</span> <span class="pl-s1">x</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span></pre></div>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="// 对象字面量
const obj = {};

// 空代码块
{
}"><pre><span class="pl-c">// 对象字面量</span>
<span class="pl-k">const</span> <span class="pl-s1">obj</span> <span class="pl-c1">=</span> <span class="pl-kos">{</span><span class="pl-kos">}</span><span class="pl-kos">;</span>

<span class="pl-c">// 空代码块</span>
<span class="pl-kos">{</span>
<span class="pl-kos">}</span></pre></div>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="// 整个 const 声明（一个语句）以分号结尾，但在它里面，有一个箭头函数表达式。
// 也就是说，它本身并不是以花括号结尾的语句；
// 它是嵌入的箭头函数表达式。 这就是为什么末尾有一个分号。
const foo = () =&gt; {}; "><pre><span class="pl-c">// 整个 const 声明（一个语句）以分号结尾，但在它里面，有一个箭头函数表达式。</span>
<span class="pl-c">// 也就是说，它本身并不是以花括号结尾的语句；</span>
<span class="pl-c">// 它是嵌入的箭头函数表达式。 这就是为什么末尾有一个分号。</span>
<span class="pl-k">const</span> <span class="pl-en">foo</span> <span class="pl-c1">=</span> <span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-c1">=&gt;</span> <span class="pl-kos">{</span><span class="pl-kos">}</span><span class="pl-kos">;</span> </pre></div>
<h2 dir="auto">消除歧异</h2>
<p dir="auto">歧义只是语句上下文中的问题：如果 JavaScript 解析器遇到歧义语法，它不知道它是普通语句还是表达式语句。 例如：</p>
<ul dir="auto">
<li>如果语句以函数开头：它是函数声明还是函数表达式？</li>
<li>如果语句以 <code class="notranslate">{</code> 开头：它是对象字面量还是代码块？</li>
</ul>
<p dir="auto">为了解决歧义，以 <code class="notranslate">function</code> 或 <code class="notranslate">{</code> 开头的语句永远不会被解释为表达式。如果希望表达式语句以这些标记之一开头，则必须将其括在括号中。</p>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="// -------- (a) 创建函数 -------- | (b) 调用函数
(function (x) { console.log(x) })('abc');

// (a) 中的代码片段被解释为表达式，因为将其包裹在括号中。
// 如果不这样做，会得到一个语法错误，因为 JavaScript 需要一个函数声明并抱怨缺少函数名。
// 此外，不能在函数声明之后立即进行函数调用。
// Uncaught SyntaxError: Function statements require a function name"><pre><span class="pl-c">// -------- (a) 创建函数 -------- | (b) 调用函数</span>
<span class="pl-kos">(</span><span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">x</span><span class="pl-kos">)</span> <span class="pl-kos">{</span> <span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-s1">x</span><span class="pl-kos">)</span> <span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">(</span><span class="pl-s">'abc'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>

<span class="pl-c">// (a) 中的代码片段被解释为表达式，因为将其包裹在括号中。</span>
<span class="pl-c">// 如果不这样做，会得到一个语法错误，因为 JavaScript 需要一个函数声明并抱怨缺少函数名。</span>
<span class="pl-c">// 此外，不能在函数声明之后立即进行函数调用。</span>
<span class="pl-c">// Uncaught SyntaxError: Function statements require a function name</span></pre></div>
<h2 dir="auto">自动插入分号</h2>
<blockquote>
<p dir="auto">Automatic semicolon insertion (ASI)</p>
</blockquote>
<p dir="auto">ASI 的工作原理如下。语句的解析继续进行，直到出现以下任一情况：</p>
<ul dir="auto">
<li>分号</li>
<li>行终止符后跟非法标记</li>
</ul>
<p dir="auto">换句话说，ASI 可以看作是在换行符处插入分号。</p>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="return
{
	name: 'lencx'
};


// 解析后
return;
{
  name: 'lencx';
}
;

// 1. 不带操作数的返回语句：return;
// 2. 代码块的开始：{
// 3. 表达式语句 'lencx'，标签 name
// 4. 代码块结束：}
// 5. 空语句：;
// 为什么 JavaScript 会这样做？ 它可以防止在返回后意外返回一行中的值。"><pre><span class="pl-k">return</span>
<span class="pl-kos">{</span>
	<span class="pl-c1">name</span>: <span class="pl-s">'lencx'</span>
<span class="pl-kos">}</span><span class="pl-kos">;</span>


<span class="pl-c">// 解析后</span>
<span class="pl-k">return</span><span class="pl-kos">;</span>
<span class="pl-kos">{</span>
  name: <span class="pl-s">'lencx'</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span>
<span class="pl-kos">;</span>

<span class="pl-c">// 1. 不带操作数的返回语句：return;</span>
<span class="pl-c">// 2. 代码块的开始：{</span>
<span class="pl-c">// 3. 表达式语句 'lencx'，标签 name</span>
<span class="pl-c">// 4. 代码块结束：}</span>
<span class="pl-c">// 5. 空语句：;</span>
<span class="pl-c">// 为什么 JavaScript 会这样做？ 它可以防止在返回后意外返回一行中的值。</span></pre></div>
<hr>
<ul dir="auto">
<li><a href="https://exploringjs.com/impatient-js/ch_syntax.html#statement-vs-expression" rel="nofollow">Statement vs. expression</a></li>
<li><a href="https://exploringjs.com/impatient-js/ch_control-flow.html#labels" rel="nofollow">break plus label: leaving any labeled statement</a></li>
</ul>]]></description>
</item>
<item>
  <title><![CDATA[解决 mac 中使用 npm 命令必须要加 sudo]]></title>
  <link>https://github.com/lencx/dev/discussions/27</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/27</guid>
  <pubDate>2022-06-01</pubDate>
  <description><![CDATA[<p dir="auto">npm 包安装应该在没有 <code class="notranslate">sudo</code> 的情况下完成。除非修改系统范围的权限，否则永远不应使用 <code class="notranslate">sudo</code>。 Node 将 npm 包放在一个特定的文件夹中，通常是 <code class="notranslate">/usr/local/lib/node_modules</code>。但问题是你需要 <code class="notranslate">sudo</code> 权限才能在这里写。这会导致无休止地使用非必需的 <code class="notranslate">sudo</code> 权限。这个位置是我们需要改变的。我们可以通过以下方式来做到：</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="mkdir ~/.npm

npm config set prefix ~/.npm

vi ~/.bashrc

export PATH=&quot;$PATH:$HOME/.npm/bin&quot;

source ~/.bashrc"><pre>mkdir <span class="pl-k">~</span>/.npm

npm config <span class="pl-c1">set</span> prefix <span class="pl-k">~</span>/.npm

vi <span class="pl-k">~</span>/.bashrc

<span class="pl-k">export</span> PATH=<span class="pl-s"><span class="pl-pds">"</span><span class="pl-smi">$PATH</span>:<span class="pl-smi">$HOME</span>/.npm/bin<span class="pl-pds">"</span></span>

<span class="pl-c1">source</span> <span class="pl-k">~</span>/.bashrc</pre></div>
<p dir="auto">如果使用了 <a href="https://ohmyz.sh/" rel="nofollow">Oh My Zsh</a>，则编辑 <code class="notranslate">~/.zshrc</code></p>
<p dir="auto"><a href="https://github.com/nvm-sh/nvm">NVM（Node 版本管理器）</a>允许你在没有 root 权限的情况下安装 Node，还允许安装多个版本的 Node，非常适合开发。</p>
<hr>
<ul dir="auto">
<li><a href="https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally" rel="nofollow">Resolving EACCES permissions errors when installing packages globally</a></li>
<li><a href="https://stackoverflow.com/questions/16151018/how-to-fix-npm-throwing-error-without-sudo" rel="nofollow">How to fix npm throwing error without sudo</a></li>
</ul>]]></description>
</item>
<item>
  <title><![CDATA[技术名词解释 - 云服务]]></title>
  <link>https://github.com/lencx/dev/discussions/28</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/28</guid>
  <pubDate>2022-09-23</pubDate>
  <description><![CDATA[<h2 dir="auto">云计算</h2>
<p dir="auto">云计算（英语：cloud computing），也被意译为网络计算，是一种基于互联网的计算方式，通过这种方式，共享的软硬件资源和信息可以按需求提供给计算机各种终端和其他设备，使用服务商提供的电脑基建作计算和资源。</p>
<p dir="auto">云计算是指在云中运行工作负载，而云是一种能够抽象、汇集和共享整个网络中的可扩展资源的 IT 环境。云计算和云本身都不属于技术的范畴。</p>
<ul dir="auto">
<li>云计算是指在云中运行工作负载的功能。</li>
<li>而云是一种环境，是运行应用的地方。</li>
<li>技术则是指用于构建和使用云的软件和硬件。</li>
</ul>
<h3 dir="auto">BFF</h3>
<p dir="auto">服务于前端的后端（英语：Backend-For-Frontend，缩写：BFF） 本质上是 API 网关模式的一个变体。它还在微服务和客户端之间提供了一个附加层。但它不是单个入口点，而是为每个客户端引入了多个网关。 使用 BFF，您可以添加针对每个客户端的需求量身定制的 API，从而消除因将所有内容集中在一个地方而导致的大量臃肿。</p>
<h3 dir="auto">SaaS</h3>
<p dir="auto">软件即服务（英语：Software as a Service，缩写：SaaS，发音：sæs或sɑs），亦可称为“按需即用软件”（即“一经要求，即可使用”），它是一种软件交付模式。在这种交付模式中，软件仅需通过网络，不须经过传统的安装步骤即可使用，软件及其相关的数据集中托管于云端服务。用户通常使用精简客户端，一般即经由网页浏览器来访问、访问软件即服务。SaaS 最大的特色在于软件本身并没有被下载到用户的硬盘，而是存储在提供商的云端或者服务器。对比传统软件需要花钱购买，下载。软件即服务只需要用户租用软件，在线使用，不但大大减少了用户购买风险, 也无需下载软件本身，无设备要求的限制。</p>
<h3 dir="auto">IaaS</h3>
<p dir="auto">基础设施即服务（英语：Infrastructure as a Service，简称IaaS）是提供消费者处理、储存、网络以及各种基础运算资源，以部署与执行操作系统或应用程序等各种软件。</p>
<p dir="auto">IaaS 是云服务的最底层，主要提供一些基础资源。它与 PaaS 的区别是，用户需要自己控制底层，实现基础设施的使用逻辑。 客户端无须购买服务器、软件等网络设备，即可任意部署和运行处理、存储、网络和其它基本的计算资源，不能控管或控制底层的基础设施，但是可以控制操作系统、储存装置、已部署的应用程序，有时也可以有限度地控制特定的网络元件，像是主机端防火墙。</p>
<h3 dir="auto">PaaS</h3>
<p dir="auto">平台即服务（英语：platform as a service，缩写：PaaS）是一种云计算服务，提供运算平台与解决方案服务。在云计算的典型层级中，PaaS层介于软件即服务与基础设施即服务之间。</p>
<p dir="auto">PaaS提供用户将云端基础设施部署与创建至客户端，或者借此获得使用编程语言、程序库与服务。用户不需要管理与控制云端基础设施（包含网络、服务器、操作系统或存储），但需要控制上层的应用程序部署与应用托管的环境。</p>
<p dir="auto">PaaS将软件研发的平台做为一种服务，以软件即服务（SaaS）模式交付给用户。因此，PaaS也是SaaS模式的一种应用。但是，PaaS的出现可以加快SaaS的发展，尤其是加快SaaS应用的开发速度。</p>
<p dir="auto">PaaS 提供软件部署平台（runtime），抽象掉了硬件和操作系统细节，可以无缝地扩展（scaling）。开发者只需要关注自己的业务逻辑，不需要关注底层。</p>
<h3 dir="auto">BaaS</h3>
<p dir="auto">后端即服务 (BaaS) 使开发人员可以专注于应用程序的前端，无需构建或维护后端服务即可利用。BaaS 和无服务器计算有一些相似之处，许多提供商都提供两者，但是两种模型有一些差异。</p>
<h3 dir="auto">FaaS</h3>
<p dir="auto">功能即服务 (FaaS) 是一类云计算服务，它提供了一个平台，允许客户开发、运行和管理应用程序功能，而无需构建和维护通常与开发和启动应用程序相关的基础设施。按照此模型构建应用程序是实现“无服务器”架构的一种方式，通常用于构建微服务应用程序。</p>
<h3 dir="auto">DaaS</h3>
<p dir="auto">在计算领域，数据即服务（Data as a service，简称DaaS）是指在线数据服务，开发者将开发用的数据保存在互联网上并随时访问，而无需使用保存在本地计算机上的数据库。</p>
<hr>
<ul dir="auto">
<li><a href="https://zh.wikipedia.org/wiki/%E9%9B%B2%E7%AB%AF%E9%81%8B%E7%AE%97" rel="nofollow">[wiki] 云计算</a></li>
<li><a href="https://www.redhat.com/zh/topics/cloud" rel="nofollow">什么是云计算？</a></li>
<li><a href="https://www.redhat.com/zh/topics/cloud-native-apps/what-is-serverless" rel="nofollow">什么是无服务器？</a></li>
<li><a href="https://microservices.io/patterns/apigateway.html" rel="nofollow">Pattern: API Gateway / Backends for Frontends Context</a></li>
<li><a href="https://samnewman.io/patterns/architectural/bff/" rel="nofollow">Pattern: Backends For Frontends</a></li>
<li><a href="https://tsh.io/blog/design-patterns-in-microservices-api-gateway-bff-and-more/" rel="nofollow">Microservices design patterns for CTOs: API Gateway, Backend for Frontend and more</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6%E5%8D%B3%E6%9C%8D%E5%8A%A1" rel="nofollow">[wiki] 软件即服务</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%B9%B3%E5%8F%B0%E5%8D%B3%E6%9C%8D%E5%8A%A1" rel="nofollow">[wiki] 平台即服务</a></li>
<li><a href="https://azure.microsoft.com/zh-cn/overview/what-is-paas" rel="nofollow">什么是 PaaS？</a></li>
<li><a href="https://www.redhat.com/zh/topics/cloud-computing/what-is-paas" rel="nofollow">什么是平台即服务（PaaS）？PaaS SaaS IaaS 区别解析</a></li>
<li><a href="https://en.wikipedia.org/wiki/Mobile_backend_as_a_service" rel="nofollow">[wiki] Mobile backend as a service</a></li>
<li><a href="https://www.cloudflare.com/zh-cn/learning/serverless/glossary/backend-as-a-service-baas/" rel="nofollow">什么是 BaaS？|后端即服务与无服务器</a></li>
<li><a href="https://en.wikipedia.org/wiki/Function_as_a_service" rel="nofollow">Function as a service</a></li>
<li><a href="https://www.cloudflare.com/zh-cn/learning/serverless/glossary/function-as-a-service-faas/" rel="nofollow">什么功能即服务 (FaaS)？</a></li>
<li><a href="https://www.redhat.com/zh/topics/cloud-native-apps/what-is-faas" rel="nofollow">什么是功能即服务（FaaS）？</a></li>
<li><a href="https://aws.amazon.com/cn/blogs/china/iaas-faas-serverless/" rel="nofollow">从IaaS到FaaS—— Serverless架构的前世今生</a></li>
<li><a href="https://www.ibm.com/cloud/learn/faas" rel="nofollow">FaaS (Function-as-a-Service)</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E6%95%B8%E6%93%9A%E5%8D%B3%E6%9C%8D%E5%8B%99" rel="nofollow">[wiki] 数据即服务</a></li>
</ul>]]></description>
</item>
<item>
  <title><![CDATA[在线编辑器系列]]></title>
  <link>https://github.com/lencx/dev/discussions/26</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/26</guid>
  <pubDate>2022-09-23</pubDate>
  <description><![CDATA[<h2 dir="auto">Editor</h2>
<ul dir="auto">
<li><a href="https://copilot.github.com/">Copilot</a> - Your AI pair programmer. With GitHub Copilot, get suggestions for whole lines or entire functions right inside your editor.</li>
<li><a href="https://codesandbox.io/" rel="nofollow">CodeSandbox: Online Code Editor and IDE for Rapid Web Development</a> - CodeSandbox is an online code editor and prototyping tool that makes creating and sharing web apps faster</li>
<li><a href="https://codepen.io/" rel="nofollow">CodePen</a> - An online code editor, learning environment, and community for front-end web development using HTML, CSS and JavaScript code snippets, projects, and web applications.</li>
<li><a href="https://utopia.app/" rel="nofollow">Utopia</a> - Utopia is a production-grade online coding and design tool for React that reads and writes code you’ll want to commit.</li>
<li><a href="https://jsbin.com/" rel="nofollow">JS Bin - Collaborative JavaScript Debugging</a> - A live pastebin for HTML, CSS &amp; JavaScript and a range of processors, including SCSS, CoffeeScript, Jade and more...</li>
<li><a href="https://jsfiddle.net/" rel="nofollow">JSFiddle - Code Playground</a> - Test your JavaScript, CSS, HTML or CoffeeScript online with JSFiddle code editor.</li>
<li><a href="https://stackblitz.com/" rel="nofollow">StackBlitz</a> - The online code editor for web apps. Powered by Visual Studio Code.</li>
</ul>
<h2 dir="auto">Browser Cookie</h2>
<ul dir="auto">
<li><a href="https://github.com/ETCExtensions/Edit-This-Cookie">EditThisCookie</a> - EditThisCookie is the famous Google Chrome/Chromium extension for editing cookies</li>
</ul>]]></description>
</item>
<item>
  <title><![CDATA[移动端禁止页面缩放]]></title>
  <link>https://github.com/lencx/dev/discussions/50</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/50</guid>
  <pubDate>2022-09-23</pubDate>
  <description><![CDATA[<div class="highlight highlight-text-html-basic notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; /&gt;"><pre><span class="pl-kos">&lt;</span><span class="pl-ent">meta</span> <span class="pl-c1">name</span>="<span class="pl-s">viewport</span>" <span class="pl-c1">content</span>="<span class="pl-s">width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no</span>" /&gt;</pre></div>
<div class="highlight highlight-source-css notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="body {
  touch-action: pan-x pan-y;
}"><pre><span class="pl-ent">body</span> {
  <span class="pl-c1">touch-action</span><span class="pl-kos">:</span> pan-x pan-y;
}</pre></div>
<ul dir="auto">
<li><a href="https://stackoverflow.com/questions/4389932/how-do-you-disable-viewport-zooming-on-mobile-safari" rel="nofollow">How do you disable viewport zooming on Mobile Safari?</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/touch-action" rel="nofollow">touch-action</a> - The touch-action CSS property sets how an element's region can be manipulated by a touchscreen user (for example, by zooming features built into the browser).</li>
</ul>]]></description>
</item>
<item>
  <title><![CDATA[Unicode 中文乱码速查表]]></title>
  <link>https://github.com/lencx/dev/discussions/46</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/46</guid>
  <pubDate>2022-09-23</pubDate>
  <description><![CDATA[<table role="table">
<thead>
<tr>
<th>xxxxxx</th>
<th>示例</th>
<th>特点</th>
<th>产生原因</th>
</tr>
</thead>
<tbody>
<tr>
<td>古文码</td>
<td>鐢辨湀瑕佸ソ濂藉涔犲ぉ澶╁悜涓?</td>
<td>大都为不认识的古文，并加杂日韩文</td>
<td>以 GBK 方式读取 UTF-8 编码的中文</td>
</tr>
<tr>
<td>口字码</td>
<td>����Ҫ�¨2�ѧϰ������</td>
<td>大部分字符为小方块</td>
<td>以 UTF-8 的方式读取 GBK 编码的中文</td>
</tr>
<tr>
<td>符号码</td>
<td>ç”±æœˆè|�å￥½å￥½å-|ä1 å¤©å¤©å�‘ä¸Š</td>
<td>大部分字符为各种符号</td>
<td>以 ISO8859-1 方式读取 UTF-8 编码的中文</td>
</tr>
<tr>
<td>拼音码</td>
<td>óéÔÂòaoÃoÃÑ§Ï°ììììÏòéÏ</td>
<td>大部分字符为头顶带有各种类似声调符号的字母</td>
<td>以 ISO8859-1 方式读取 GBK 编码的中文</td>
</tr>
<tr>
<td>问句码</td>
<td>由月要好好学习天天向??</td>
<td>字符串长度为偶数时正确，长度为奇数时最后的字符变为问号</td>
<td>以 GBK 方式读取 UTF-8 编码的中文，然后又用 UTF-8 的格式再次读取</td>
</tr>
<tr>
<td>锟拷码</td>
<td>锟斤拷锟斤拷要锟矫猴拷学习锟斤拷锟斤拷锟斤拷</td>
<td>全中文字符，且大部分字符为“锟斤拷”这几个字符</td>
<td>以 UTF-8 方式读取 GBK 编码的中文，然后又用 GBK 的格式再次读取</td>
</tr>
<tr>
<td>烫烫烫</td>
<td>烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫</td>
<td>字符显示为“烫烫烫”这几个字符</td>
<td>VC Debug 模式下，栈内存未初始化</td>
</tr>
<tr>
<td>屯屯屯</td>
<td>屯屯屯屯屯屯屯屯屯屯屯屯屯屯屯屯屯屯</td>
<td>字符显示为“屯屯屯”这几个字符</td>
<td>VC Debug 模式下，堆内存未初始化</td>
</tr>
</tbody>
</table>
<hr>
<ul dir="auto">
<li><a href="https://zh.wikipedia.org/zh-cn/%E4%BA%82%E7%A2%BC" rel="nofollow">乱码</a> - 指的是电脑系统不能显示正确的字符，而显示其他无意义的字符或空白，如一堆 ASCII 代码。这样所显示出来的文字统称为乱码。</li>
<li><a href="https://github.com/justjavac/unicode-encoding-error-table">unicode-encoding-error-table</a> - Unicode 中文乱码速查表</li>
</ul>]]></description>
</item>
<item>
  <title><![CDATA[js 中 apply & bind & call 区别]]></title>
  <link>https://github.com/lencx/dev/discussions/49</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/49</guid>
  <pubDate>2022-06-15</pubDate>
  <description><![CDATA[<h2 dir="auto">三者异同</h2>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="+-----------------+-----------------+----------------+
|                 |   函数执行时间    |   this绑定时间  |
+-----------------+-----------------+----------------+
| function object |       未        |       未        |
|        f        |       来        |       来        |
+-----------------+-----------------+----------------+
| function call   |       现        |       现        |
|      f()        |       在        |       在        |
+-----------------+-----------------+----------------+
|    f.call()     |       现        |       现        |
|    f.apply()    |       在        |       在        |
+-----------------+-----------------+----------------+
|    f.bind()     |      未来        |      现在      |
+-----------------+-----------------+----------------+"><pre>+-----------------+-----------------+----------------+
<span class="pl-k">|</span>                 <span class="pl-k">|</span>   函数执行时间    <span class="pl-k">|</span>   this绑定时间  <span class="pl-k">|</span>
+-----------------+-----------------+----------------+
<span class="pl-k">|</span> <span class="pl-k">function</span> <span class="pl-en">object</span> <span class="pl-k">|</span>       未        <span class="pl-k">|</span>       未        <span class="pl-k">|</span>
<span class="pl-k">|</span>        f        <span class="pl-k">|</span>       来        <span class="pl-k">|</span>       来        <span class="pl-k">|</span>
+-----------------+-----------------+----------------+
<span class="pl-k">|</span> <span class="pl-k">function</span> <span class="pl-en">call</span>   <span class="pl-k">|</span>       现        <span class="pl-k">|</span>       现        <span class="pl-k">|</span>
<span class="pl-k">|</span>      <span class="pl-en">f</span>()        <span class="pl-k">|</span>       在        <span class="pl-k">|</span>       在        <span class="pl-k">|</span>
+-----------------+-----------------+----------------+
<span class="pl-k">|</span>    <span class="pl-en">f.call</span>()     <span class="pl-k">|</span>       现        <span class="pl-k">|</span>       现        <span class="pl-k">|</span>
<span class="pl-k">|</span>    <span class="pl-en">f.apply</span>()    <span class="pl-k">|</span>       在        <span class="pl-k">|</span>       在        <span class="pl-k">|</span>
+-----------------+-----------------+----------------+
<span class="pl-k">|</span>    <span class="pl-en">f.bind</span>()     <span class="pl-k">|</span>      未来        <span class="pl-k">|</span>      现在      <span class="pl-k">|</span>
+-----------------+-----------------+----------------+</pre></div>
<h3 dir="auto">相同点</h3>
<ul dir="auto">
<li>都是 <code class="notranslate">Function</code> 对象上的方法 ，为了改变函数体内部的 <code class="notranslate">this</code> 指向</li>
<li>三者第一个参数都是 <code class="notranslate">this</code> 要指向的对象，即指定函数调用上下文</li>
<li>三者都可以利用后续参数传参</li>
</ul>
<h3 dir="auto">不同点</h3>
<ul dir="auto">
<li><code class="notranslate">bind</code> 是指定上下文，返回函数，便于稍后调用，<code class="notranslate">apply</code> 和 <code class="notranslate">call</code> 则是立即调用函数并修改上下文
<ul dir="auto">
<li><code class="notranslate">bind()</code> 函数会创建一个新的绑定函数 <code class="notranslate">(bound function，BF)</code></li>
<li>返回值：返回一个原函数的拷贝，并拥有指定的 <code class="notranslate">this</code> 值和初始参数</li>
</ul>
</li>
<li><code class="notranslate">apply</code> 传入数组
<ul dir="auto">
<li>返回值：调用有指定 <code class="notranslate">this</code> 值和参数的函数的结果</li>
</ul>
</li>
<li><code class="notranslate">call</code> 传入参数列表
<ul dir="auto">
<li><code class="notranslate">call()</code> 允许为不同的对象分配和调用属于一个对象的函数/方法</li>
<li>可以使用 <code class="notranslate">call</code> 来实现继承：写一个方法，然后让另外一个新的对象来继承它（而不是在新对象中再写一次这个方法）</li>
<li>返回值：使用调用者提供的 <code class="notranslate">this</code> 值和参数调用该函数的返回值。若该方法没有返回值，则返回 <code class="notranslate">undefined</code></li>
</ul>
</li>
</ul>
<h2 dir="auto">参考资料</h2>
<ul dir="auto">
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply" rel="nofollow">[MDN] Function.prototype.apply()</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" rel="nofollow">[MDN] Function.prototype.bind()</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call" rel="nofollow">[MDN] Function.prototype.call()</a></li>
<li><a href="https://stackoverflow.com/questions/15455009/javascript-call-apply-vs-bind" rel="nofollow">Javascript call() &amp; apply() vs bind()?</a></li>
</ul>]]></description>
</item>
<item>
  <title><![CDATA[react-router 中的 <Link> 标签与 <a> 标签的区别是什么？]]></title>
  <link>https://github.com/lencx/dev/discussions/45</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/45</guid>
  <pubDate>2022-06-15</pubDate>
  <description><![CDATA[<p dir="auto">本质也是 <code class="notranslate">&lt;a&gt;</code> 标签，只不过在 <code class="notranslate">&lt;Link&gt;</code> 中禁用了 <code class="notranslate">&lt;a&gt;</code> 标签的默认事件，改用了 <code class="notranslate">history</code> 对象提供的方法进行跳转。区别是：</p>
<ul dir="auto">
<li><code class="notranslate">&lt;Link&gt;</code> 是 <code class="notranslate">react-router</code> 中实现的路由跳转链接，一般配合 <code class="notranslate">&lt;Router&gt;</code> 使用，<code class="notranslate">react-router</code> 接管了其默认的链接跳转行为，区别于传统的页面跳转，<code class="notranslate">&lt;Link&gt;</code> 的“跳转”行为只会触发相匹配的 <code class="notranslate">&lt;Route&gt;</code> 对应的页面内容更新，而不会刷新整个页面。
<ul dir="auto">
<li>有 <code class="notranslate">onClick</code> 则执行 <code class="notranslate">onClick</code></li>
<li><code class="notranslate">click</code> 时阻止 <code class="notranslate">&lt;a&gt;</code> 标签默认事件（点击 <code class="notranslate">&lt;a href="/abc"&gt;test&lt;/a&gt;</code> 就不会跳转和刷新页面）</li>
<li>再取得跳转 <code class="notranslate">href</code>（即是 <code class="notranslate">to</code>），用 <code class="notranslate">history</code>（前端路由两种方式之一，<code class="notranslate">history</code> &amp; <code class="notranslate">hash</code>）跳转，此时只是链接变了，并没有刷新页面</li>
</ul>
</li>
<li><code class="notranslate">&lt;a&gt;</code> 标签就是普通的超链接，用于从当前页面跳转到 <code class="notranslate">href</code> 指向的另一个页面（非锚点情况）</li>
</ul>
<hr>
<ul dir="auto">
<li><a href="https://stackoverflow.com/questions/43087007/react-link-vs-a-tag-and-arrow-function" rel="nofollow">react link vs a tag and arrow function</a></li>
<li><a href="https://github.com/ReactTraining/react-router/issues/1982" data-hovercard-type="issue" data-hovercard-url="/remix-run/react-router/issues/1982/hovercard">how to reload a route?</a></li>
<li><a href="https://blog.usejournal.com/make-different-html-tags-behave-as-a-react-router-link-81b09c9edc6d" rel="nofollow">Make different HTML tags behave as a react-router Link</a></li>
</ul>]]></description>
</item>
<item>
  <title><![CDATA[为什么不要在循环，条件或嵌套函数中调用 Hook]]></title>
  <link>https://github.com/lencx/dev/discussions/44</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/44</guid>
  <pubDate>2022-06-15</pubDate>
  <description><![CDATA[<p dir="auto">确保总是在你的 React 函数的最顶层以及任何 return 之前调用他们。遵守这条规则，你就能确保 Hook 在每一次渲染中都按照同样的顺序被调用。这让 React 能够在多次的 useState 和 useEffect 调用之间保持 hook 状态的正确。</p>
<hr>
<ul dir="auto">
<li><a href="https://zh-hans.reactjs.org/docs/hooks-rules.html" rel="nofollow">Hook 规则</a></li>
<li><a href="https://goodguydaniel.com/blog/call-react-hooks-inside-condition" rel="nofollow">You Can't Call Hooks Inside Conditions? Yes you can </a> - Because rules are made to be broken</li>
</ul>]]></description>
</item>
<item>
  <title><![CDATA[从输入 URL 到页面加载发生了什么？]]></title>
  <link>https://github.com/lencx/dev/discussions/40</link>
  <guid isPermaLink="false">https://github.com/lencx/dev/discussions/40</guid>
  <pubDate>2022-07-11</pubDate>
  <description><![CDATA[<h2 dir="auto">参考资料</h2>
<ul dir="auto">
<li><a href="https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/How_the_Web_works" rel="nofollow">How the Web works</a></li>
<li><a href="https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/" rel="nofollow">浏览器的工作原理：新式网络浏览器幕后揭秘</a></li>
<li><a href="https://www.youtube.com/watch?v=dh406O2v_1c" rel="nofollow">What happens when type google.com into your browser address box and hit enter? (Detailed Analysis)</a></li>
<li><a href="https://github.com/alex/what-happens-when">what-happens-when</a></li>
<li><a href="https://www.quora.com/What-happens-when-you-type-Google-in-a-web-browser-address-bar-and-press-enter" rel="nofollow">What happens when you type Google in a web browser address bar and press enter?</a></li>
<li><a href="https://www.educative.io/blog/behind-the-screens-what-happens-when-you-type-a-url-in-a-browser" rel="nofollow">Behind the Screens: What happens when you type a URL in a browser</a></li>
<li><a href="https://afteracademy.com/blog/what-happens-when-you-type-a-url-in-the-web-browser" rel="nofollow">What happens when you type a URL in the web browser?</a></li>
<li><a href="https://www.geeksforgeeks.org/what-happens-when-we-type-a-url/" rel="nofollow">What happens when we type a URL</a></li>
</ul>]]></description>
</item>

</channel>
</rss>